{"version":3,"file":"112.b9cb5de675b80c2d7682.js","mappings":"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","sources":["webpack://@mattermost/webapp/./components/password_reset_form/password_reset_form.tsx","webpack://@mattermost/webapp/./components/password_reset_form/index.ts"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useState, useRef, memo} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport classNames from 'classnames';\n\nimport {ServerError} from '@mattermost/types/errors';\nimport {browserHistory} from 'utils/browser_history';\nimport Constants from 'utils/constants';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nimport {t} from 'utils/i18n';\n\ninterface Props {\n    location: {search: string};\n    actions: {\n        resetUserPassword: (token: string, newPassword: string) => Promise<{data: any; error: ServerError}>;\n    };\n    siteName?: string;\n}\n\nconst PasswordResetForm = ({location, siteName, actions}: Props) => {\n    const [error, setError] = useState<React.ReactNode>(null);\n\n    const passwordInput = useRef<HTMLInputElement>(null);\n\n    const handlePasswordReset = async (e: React.FormEvent) => {\n        e.preventDefault();\n\n        const password = passwordInput.current!.value;\n        if (!password || password.length < Constants.MIN_PASSWORD_LENGTH) {\n            setError(\n                <FormattedMessage\n                    id='password_form.error'\n                    defaultMessage='Please enter at least {chars} characters.'\n                    values={{\n                        chars: Constants.MIN_PASSWORD_LENGTH,\n                    }}\n                />,\n            );\n            return;\n        }\n\n        const token = (new URLSearchParams(location.search)).get('token');\n\n        if (typeof token !== 'string') {\n            throw new Error('token must be a string');\n        }\n        const {data, error} = await actions.resetUserPassword(token, password);\n        if (data) {\n            browserHistory.push('/login?extra=' + Constants.PASSWORD_CHANGE);\n            setError(null);\n        } else if (error) {\n            setError(error.message);\n        }\n    };\n\n    const errorElement = error ? (\n        <div className='form-group has-error'>\n            <label className='control-label'>\n                {error}\n            </label>\n        </div>\n    ) : null;\n\n    return (\n        <div className='col-sm-12'>\n            <div className='signup-team__container'>\n                <FormattedMessage\n                    id='password_form.title'\n                    tagName='h1'\n                    defaultMessage='Password Reset'\n                />\n                <form onSubmit={handlePasswordReset}>\n                    <p>\n                        <FormattedMessage\n                            id='password_form.enter'\n                            defaultMessage='Enter a new password for your {siteName} account.'\n                            values={{\n                                siteName,\n                            }}\n                        />\n                    </p>\n                    <div className={classNames('form-group', {'has-error': error})}>\n                        <LocalizedInput\n                            id='resetPasswordInput'\n                            type='password'\n                            className='form-control'\n                            name='password'\n                            ref={passwordInput}\n                            placeholder={{id: t('password_form.pwd'), defaultMessage: 'Password'}}\n                            spellCheck='false'\n                            autoFocus={true}\n                        />\n                    </div>\n                    {errorElement}\n                    <button\n                        id='resetPasswordButton'\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='password_form.change'\n                            defaultMessage='Change my password'\n                        />\n                    </button>\n                </form>\n            </div>\n        </div>\n    );\n};\n\nexport default memo(PasswordResetForm);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {resetUserPassword} from 'mattermost-redux/actions/users';\n\nimport {GlobalState} from 'types/store';\nimport {ServerError} from '@mattermost/types/errors';\nimport {GenericAction, ActionFunc} from 'mattermost-redux/types/actions';\n\nimport PasswordResetForm from './password_reset_form';\n\ntype Actions = {\n    resetUserPassword: (token: string, newPassword: string) => Promise<{data: any; error: ServerError}>;\n}\n\nfunction mapStateToProps(state: GlobalState) {\n    return {siteName: getConfig(state).SiteName};\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch<GenericAction>) => ({\n    actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n        resetUserPassword,\n    }, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PasswordResetForm);\n"],"names":["React","useState","useRef","memo","FormattedMessage","classNames","browserHistory","Constants","LocalizedInput","t","PasswordResetForm","location","siteName","actions","error","setError","passwordInput","handlePasswordReset","e","preventDefault","password","current","value","length","MIN_PASSWORD_LENGTH","chars","token","URLSearchParams","search","get","Error","data","resetUserPassword","push","PASSWORD_CHANGE","message","errorElement","id","defaultMessage","bindActionCreators","connect","getConfig","mapStateToProps","state","SiteName","mapDispatchToProps","dispatch"],"sourceRoot":""}