{"version":3,"file":"120.ba123c6526ba1ab79bb9.js","mappings":"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","sources":["webpack://@mattermost/webapp/./components/claim/components/oauth_to_email.jsx","webpack://@mattermost/webapp/./components/claim/components/email_to_oauth.jsx","webpack://@mattermost/webapp/./components/claim/components/ldap_to_email.jsx","webpack://@mattermost/webapp/./components/claim/components/email_to_ldap.jsx","webpack://@mattermost/webapp/./components/claim/claim_controller.tsx","webpack://@mattermost/webapp/./components/claim/index.ts","webpack://@mattermost/webapp/./components/common/back_button.tsx","webpack://@mattermost/webapp/./components/header_footer_route/content_layouts/column.tsx","webpack://@mattermost/webapp/./components/common/svg_images_components/shield_with_checkmark.tsx","webpack://@mattermost/webapp/./components/login/login_mfa.tsx","webpack://@mattermost/webapp/./images/logo.png"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {oauthToEmail} from 'actions/admin_actions.jsx';\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils';\nimport {t} from 'utils/i18n';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nexport default class OAuthToEmail extends React.PureComponent {\n    static propTypes = {\n        currentType: PropTypes.string,\n        email: PropTypes.string,\n        siteName: PropTypes.string,\n        passwordConfig: PropTypes.object,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {};\n\n        this.passwordInput = React.createRef();\n        this.passwordConfirmInput = React.createRef();\n    }\n\n    submit = (e) => {\n        e.preventDefault();\n        const state = {};\n\n        const password = this.passwordInput.current.value;\n        if (!password) {\n            state.error = Utils.localizeMessage('claim.oauth_to_email.enterPwd', 'Please enter a password.');\n            this.setState(state);\n            return;\n        }\n\n        const {valid, error} = Utils.isValidPassword(password, this.props.passwordConfig);\n        if (!valid && error) {\n            this.setState({error});\n            return;\n        }\n\n        const confirmPassword = this.passwordConfirmInput.current.value;\n        if (!confirmPassword || password !== confirmPassword) {\n            state.error = Utils.localizeMessage('claim.oauth_to_email.pwdNotMatch', 'Passwords do not match.');\n            this.setState(state);\n            return;\n        }\n\n        state.error = null;\n        this.setState(state);\n\n        oauthToEmail(\n            this.props.currentType,\n            this.props.email,\n            password,\n            (data) => {\n                if (data.follow_link) {\n                    window.location.href = data.follow_link;\n                }\n            },\n            (err) => {\n                this.setState({error: err.message});\n            },\n        );\n    }\n    render() {\n        var error = null;\n        if (this.state.error) {\n            error = <div className='form-group has-error'><label className='control-label'>{this.state.error}</label></div>;\n        }\n\n        var formClass = 'form-group';\n        if (error) {\n            formClass += ' has-error';\n        }\n\n        const uiType = `${(this.props.currentType === Constants.SAML_SERVICE ? Constants.SAML_SERVICE.toUpperCase() : Utils.toTitleCase(this.props.currentType))} SSO`;\n\n        return (\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id='claim.oauth_to_email.title'\n                        defaultMessage='Switch {type} Account to Email'\n                        values={{\n                            type: uiType,\n                        }}\n                    />\n                </h3>\n                <form onSubmit={this.submit}>\n                    <p>\n                        <FormattedMessage\n                            id='claim.oauth_to_email.description'\n                            defaultMessage='Upon changing your account type, you will only be able to login with your email and password.'\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.oauth_to_email.enterNewPwd'\n                            defaultMessage='Enter a new password for your {site} email account'\n                            values={{\n                                site: this.props.siteName,\n                            }}\n                        />\n                    </p>\n                    <div className={formClass}>\n                        <LocalizedInput\n                            type='password'\n                            className='form-control'\n                            name='password'\n                            ref={this.passwordInput}\n                            placeholder={{id: t('claim.oauth_to_email.newPwd'), defaultMessage: 'New Password'}}\n                            spellCheck='false'\n                        />\n                    </div>\n                    <div className={formClass}>\n                        <LocalizedInput\n                            type='password'\n                            className='form-control'\n                            name='passwordconfirm'\n                            ref={this.passwordConfirmInput}\n                            placeholder={{id: t('claim.oauth_to_email.confirm'), defaultMessage: 'Confirm Password'}}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {error}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='claim.oauth_to_email.switchTo'\n                            defaultMessage='Switch {type} to Email and Password'\n                            values={{\n                                type: uiType,\n                            }}\n                        />\n                    </button>\n                </form>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {emailToOAuth} from 'actions/admin_actions.jsx';\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils';\nimport {t} from 'utils/i18n';\nimport LoginMfa from 'components/login/login_mfa.tsx';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nexport default class EmailToOAuth extends React.PureComponent {\n    static propTypes = {\n        newType: PropTypes.string,\n        email: PropTypes.string,\n        siteName: PropTypes.string,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {showMfa: false, password: ''};\n\n        this.passwordInput = React.createRef();\n    }\n\n    preSubmit = (e) => {\n        e.preventDefault();\n        var state = {};\n\n        var password = this.passwordInput.current.value;\n        if (!password) {\n            state.error = Utils.localizeMessage('claim.email_to_oauth.pwdError', 'Please enter your password.');\n            this.setState(state);\n            return;\n        }\n\n        this.setState({password});\n\n        state.error = null;\n        this.setState(state);\n\n        this.submit(this.props.email, password, '');\n    }\n\n    submit = (loginId, password, token) => {\n        emailToOAuth(\n            loginId,\n            password,\n            token,\n            this.props.newType,\n            (data) => {\n                if (data.follow_link) {\n                    window.location.href = data.follow_link;\n                }\n            },\n            (err) => {\n                if (!this.state.showMfa && err.server_error_id === 'mfa.validate_token.authenticate.app_error') {\n                    this.setState({showMfa: true});\n                } else {\n                    this.setState({error: err.message, showMfa: false});\n                }\n            },\n        );\n    }\n\n    render() {\n        var error = null;\n        if (this.state.error) {\n            error = <div className='form-group has-error'><label className='control-label'>{this.state.error}</label></div>;\n        }\n\n        var formClass = 'form-group';\n        if (error) {\n            formClass += ' has-error';\n        }\n\n        const type = (this.props.newType === Constants.SAML_SERVICE ? Constants.SAML_SERVICE.toUpperCase() : Utils.toTitleCase(this.props.newType));\n        const uiType = `${type} SSO`;\n\n        let content;\n        if (this.state.showMfa) {\n            content = (\n                <LoginMfa\n                    loginId={this.props.email}\n                    password={this.state.password}\n                    title={{\n                        id: t('claim.email_to_oauth.title'),\n                        defaultMessage: 'Switch Email/Password Account to {uiType}',\n                        values: {\n                            uiType,\n                        }}}\n                    onSubmit={this.submit}\n                />\n            );\n        } else {\n            content = (\n                <>\n                    <h3>\n                        <FormattedMessage\n                            id='claim.email_to_oauth.title'\n                            defaultMessage='Switch Email/Password Account to {uiType}'\n                            values={{\n                                uiType,\n                            }}\n                        />\n                    </h3>\n                    <form onSubmit={this.preSubmit}>\n                        <p>\n                            <FormattedMessage\n                                id='claim.email_to_oauth.ssoType'\n                                defaultMessage='Upon claiming your account, you will only be able to login with {type} SSO'\n                                values={{\n                                    type,\n                                }}\n                            />\n                        </p>\n                        <p>\n                            <FormattedMessage\n                                id='claim.email_to_oauth.ssoNote'\n                                defaultMessage='You must already have a valid {type} account'\n                                values={{\n                                    type,\n                                }}\n                            />\n                        </p>\n                        <p>\n                            <FormattedMessage\n                                id='claim.email_to_oauth.enterPwd'\n                                defaultMessage='Enter the password for your {site} account'\n                                values={{\n                                    site: this.props.siteName,\n                                }}\n                            />\n                        </p>\n                        <div className={formClass}>\n                            <LocalizedInput\n                                type='password'\n                                className='form-control'\n                                name='password'\n                                ref={this.passwordInput}\n                                placeholder={{id: t('claim.email_to_oauth.pwd'), defaultMessage: 'Password'}}\n                                spellCheck='false'\n                            />\n                        </div>\n                        {error}\n                        <button\n                            type='submit'\n                            className='btn btn-primary'\n                        >\n                            <FormattedMessage\n                                id='claim.email_to_oauth.switchTo'\n                                defaultMessage='Switch Account to {uiType}'\n                                values={{\n                                    uiType,\n                                }}\n                            />\n                        </button>\n                    </form>\n                </>\n            );\n        }\n\n        return (\n            <div>\n                {content}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils';\nimport {t} from 'utils/i18n';\nimport LoginMfa from 'components/login/login_mfa.tsx';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nexport default class LDAPToEmail extends React.PureComponent {\n    static propTypes = {\n        email: PropTypes.string,\n        passwordConfig: PropTypes.object,\n        switchLdapToEmail: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            passwordError: '',\n            confirmError: '',\n            ldapPasswordError: '',\n            serverError: '',\n            showMfa: true,\n            password: 'trwo',\n        };\n\n        this.ldapPasswordInput = React.createRef();\n        this.passwordInput = React.createRef();\n        this.passwordConfirmInput = React.createRef();\n    }\n\n    preSubmit = (e) => {\n        e.preventDefault();\n\n        var state = {\n            passwordError: '',\n            confirmError: '',\n            ldapPasswordError: '',\n            serverError: '',\n        };\n\n        const ldapPassword = this.ldapPasswordInput.current.value;\n        if (!ldapPassword) {\n            state.ldapPasswordError = Utils.localizeMessage('claim.ldap_to_email.ldapPasswordError', 'Please enter your AD/LDAP password.');\n            this.setState(state);\n            return;\n        }\n\n        const password = this.passwordInput.current.value;\n        if (!password) {\n            state.passwordError = Utils.localizeMessage('claim.ldap_to_email.pwdError', 'Please enter your password.');\n            this.setState(state);\n            return;\n        }\n\n        const {valid, error} = Utils.isValidPassword(password, this.props.passwordConfig);\n        if (!valid && error) {\n            this.setState({\n                passwordError: error,\n            });\n            return;\n        }\n\n        const confirmPassword = this.passwordConfirmInput.current.value;\n        if (!confirmPassword || password !== confirmPassword) {\n            state.confirmError = Utils.localizeMessage('claim.ldap_to_email.pwdNotMatch', 'Passwords do not match.');\n            this.setState(state);\n            return;\n        }\n\n        state.password = password;\n        state.ldapPassword = ldapPassword;\n        this.setState(state);\n\n        this.submit(this.props.email, password, '', ldapPassword);\n    }\n\n    submit = (loginId, password, token, ldapPassword) => {\n        this.props.switchLdapToEmail(ldapPassword || this.state.ldapPassword, this.props.email, password, token).then(({data, error: err}) => {\n            if (data && data.follow_link) {\n                window.location.href = data.follow_link;\n            } else if (err) {\n                if (err.server_error_id.startsWith('model.user.is_valid.pwd')) {\n                    this.setState({passwordError: err.message, showMfa: false});\n                } else if (err.server_error_id === 'ent.ldap.do_login.invalid_password.app_error') {\n                    this.setState({ldapPasswordError: err.message, showMfa: false});\n                } else if (!this.state.showMfa && err.server_error_id === 'mfa.validate_token.authenticate.app_error') {\n                    this.setState({showMfa: true});\n                } else {\n                    this.setState({serverError: err.message, showMfa: false});\n                }\n            }\n        });\n    }\n\n    render() {\n        let serverError = null;\n        let formClass = 'form-group';\n        if (this.state.serverError) {\n            serverError = <div className='form-group has-error'><label className='control-label'>{this.state.serverError}</label></div>;\n            formClass += ' has-error';\n        }\n\n        let passwordError = null;\n        let passwordClass = 'form-group';\n        if (this.state.passwordError) {\n            passwordError = <div className='form-group has-error'><label className='control-label'>{this.state.passwordError}</label></div>;\n            passwordClass += ' has-error';\n        }\n\n        let ldapPasswordError = null;\n        let ldapPasswordClass = 'form-group';\n        if (this.state.ldapPasswordError) {\n            ldapPasswordError = <div className='form-group has-error'><label className='control-label'>{this.state.ldapPasswordError}</label></div>;\n            ldapPasswordClass += ' has-error';\n        }\n\n        let confirmError = null;\n        let confimClass = 'form-group';\n        if (this.state.confirmError) {\n            confirmError = <div className='form-group has-error'><label className='control-label'>{this.state.confirmError}</label></div>;\n            confimClass += ' has-error';\n        }\n\n        const passwordPlaceholder = Utils.localizeMessage('claim.ldap_to_email.ldapPwd', 'AD/LDAP Password');\n\n        let content;\n        if (this.state.showMfa) {\n            content = (\n                <LoginMfa\n                    loginId={this.props.email}\n                    password={this.state.password}\n                    title={{id: t('claim.ldap_to_email.title'), defaultMessage: 'Switch AD/LDAP Account to Email/Password'}}\n                    onSubmit={this.submit}\n                />\n            );\n        } else {\n            content = (\n                <>\n                    <h3>\n                        <FormattedMessage\n                            id='claim.ldap_to_email.title'\n                            defaultMessage='Switch AD/LDAP Account to Email/Password'\n                        />\n                    </h3>\n                    <form\n                        onSubmit={this.preSubmit}\n                        className={formClass}\n                    >\n                        <p>\n                            <FormattedMessage\n                                id='claim.ldap_to_email.email'\n                                defaultMessage='After switching your authentication method, you will use {email} to login. Your AD/LDAP credentials will no longer allow access to Mattermost.'\n                                values={{\n                                    email: this.props.email,\n                                }}\n                            />\n                        </p>\n                        <p>\n                            <FormattedMessage\n                                id='claim.ldap_to_email.enterLdapPwd'\n                                defaultMessage='{ldapPassword}:'\n                                values={{\n                                    ldapPassword: passwordPlaceholder,\n                                }}\n                            />\n                        </p>\n                        <div className={ldapPasswordClass}>\n                            <input\n                                type='password'\n                                className='form-control'\n                                name='ldapPassword'\n                                ref={this.ldapPasswordInput}\n                                placeholder={passwordPlaceholder}\n                                spellCheck='false'\n                            />\n                        </div>\n                        {ldapPasswordError}\n                        <p>\n                            <FormattedMessage\n                                id='claim.ldap_to_email.enterPwd'\n                                defaultMessage='New email login password:'\n                            />\n                        </p>\n                        <div className={passwordClass}>\n                            <LocalizedInput\n                                type='password'\n                                className='form-control'\n                                name='password'\n                                ref={this.passwordInput}\n                                placeholder={{id: t('claim.ldap_to_email.pwd'), defaultMessage: 'Password'}}\n                                spellCheck='false'\n                            />\n                        </div>\n                        {passwordError}\n                        <div className={confimClass}>\n                            <LocalizedInput\n                                type='password'\n                                className='form-control'\n                                name='passwordconfirm'\n                                ref={this.passwordConfirmInput}\n                                placeholder={{id: t('claim.ldap_to_email.confirm'), defaultMessage: 'Confirm Password'}}\n                                spellCheck='false'\n                            />\n                        </div>\n                        {confirmError}\n                        <button\n                            type='submit'\n                            className='btn btn-primary'\n                        >\n                            <FormattedMessage\n                                id='claim.ldap_to_email.switchTo'\n                                defaultMessage='Switch account to email/password'\n                            />\n                        </button>\n                        {serverError}\n                    </form>\n                </>\n            );\n        }\n\n        return (\n            <div>\n                {content}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {emailToLdap} from 'actions/admin_actions.jsx';\nimport * as Utils from 'utils/utils';\nimport {t} from 'utils/i18n';\nimport LoginMfa from 'components/login/login_mfa.tsx';\nimport LocalizedInput from 'components/localized_input/localized_input';\nexport default class EmailToLDAP extends React.PureComponent {\n    static propTypes = {\n        email: PropTypes.string,\n        siteName: PropTypes.string,\n        ldapLoginFieldName: PropTypes.string,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            passwordError: '',\n            ldapError: '',\n            ldapPasswordError: '',\n            serverError: '',\n            showMfa: false,\n        };\n\n        this.emailPasswordInput = React.createRef();\n        this.ldapIdInput = React.createRef();\n        this.ldapPasswordInput = React.createRef();\n    }\n\n    preSubmit = (e) => {\n        e.preventDefault();\n\n        var state = {\n            passwordError: '',\n            ldapError: '',\n            ldapPasswordError: '',\n            serverError: '',\n        };\n\n        const password = this.emailPasswordInput.current && this.emailPasswordInput.current.value;\n        if (!password) {\n            state.passwordError = Utils.localizeMessage('claim.email_to_ldap.pwdError', 'Please enter your password.');\n            this.setState(state);\n            return;\n        }\n\n        const ldapId = this.ldapIdInput.current && this.ldapIdInput.current.value.trim();\n        if (!ldapId) {\n            state.ldapError = Utils.localizeMessage('claim.email_to_ldap.ldapIdError', 'Please enter your AD/LDAP ID.');\n            this.setState(state);\n            return;\n        }\n\n        const ldapPassword = this.ldapPasswordInput.current && this.ldapPasswordInput.current.value;\n        if (!ldapPassword) {\n            state.ldapPasswordError = Utils.localizeMessage('claim.email_to_ldap.ldapPasswordError', 'Please enter your AD/LDAP password.');\n            this.setState(state);\n            return;\n        }\n\n        state.password = password;\n        state.ldapId = ldapId;\n        state.ldapPassword = ldapPassword;\n        this.setState(state);\n\n        this.submit(this.props.email, password, '', ldapId, ldapPassword);\n    }\n\n    submit = (loginId, password, token, ldapId, ldapPassword) => {\n        emailToLdap(\n            loginId,\n            password,\n            token,\n            ldapId || this.state.ldapId,\n            ldapPassword || this.state.ldapPassword,\n            (data) => {\n                if (data.follow_link) {\n                    window.location.href = data.follow_link;\n                }\n            },\n            (err) => {\n                if (!this.state.showMfa && err.server_error_id === 'mfa.validate_token.authenticate.app_error') {\n                    this.setState({showMfa: true});\n                } else {\n                    switch (err.id) {\n                    case 'ent.ldap.do_login.user_not_registered.app_error':\n                    case 'ent.ldap.do_login.user_filtered.app_error':\n                    case 'ent.ldap.do_login.matched_to_many_users.app_error':\n                        this.setState({ldapError: err.message, showMfa: false});\n                        break;\n                    case 'ent.ldap.do_login.invalid_password.app_error':\n                        this.setState({ldapPasswordError: err.message, showMfa: false});\n                        break;\n                    case 'api.user.check_user_password.invalid.app_error':\n                        this.setState({passwordError: err.message, showMfa: false});\n                        break;\n                    default:\n                        this.setState({serverError: err.message, showMfa: false});\n                    }\n                }\n            },\n        );\n    }\n\n    render() {\n        let serverError = null;\n        let formClass = 'form-group';\n        if (this.state.serverError) {\n            serverError = <div className='form-group has-error'><label className='control-label'>{this.state.serverError}</label></div>;\n            formClass += ' has-error';\n        }\n\n        let passwordError = null;\n        let passwordClass = 'form-group';\n        if (this.state.passwordError) {\n            passwordError = <div className='form-group has-error'><label className='control-label'>{this.state.passwordError}</label></div>;\n            passwordClass += ' has-error';\n        }\n\n        let ldapError = null;\n        let ldapClass = 'form-group';\n        if (this.state.ldapError) {\n            ldapError = <div className='form-group has-error'><label className='control-label'>{this.state.ldapError}</label></div>;\n            ldapClass += ' has-error';\n        }\n\n        let ldapPasswordError = null;\n        let ldapPasswordClass = 'form-group';\n        if (this.state.ldapPasswordError) {\n            ldapPasswordError = <div className='form-group has-error'><label className='control-label'>{this.state.ldapPasswordError}</label></div>;\n            ldapPasswordClass += ' has-error';\n        }\n\n        let loginPlaceholder;\n        if (this.props.ldapLoginFieldName) {\n            loginPlaceholder = this.props.ldapLoginFieldName;\n        } else {\n            loginPlaceholder = Utils.localizeMessage('claim.email_to_ldap.ldapId', 'AD/LDAP ID');\n        }\n\n        let content;\n        if (this.state.showMfa) {\n            content = (\n                <LoginMfa\n                    loginId={this.props.email}\n                    password={this.state.password}\n                    title={{id: t('claim.email_to_ldap.title'), defaultMessage: 'Switch Email/Password Account to AD/LDAP'}}\n                    onSubmit={this.submit}\n                />\n            );\n        } else {\n            content = (\n                <>\n                    <h3>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.title'\n                            defaultMessage='Switch Email/Password Account to AD/LDAP'\n                        />\n                    </h3>\n                    <form\n                        onSubmit={this.preSubmit}\n                        className={formClass}\n                    >\n                        <p>\n                            <FormattedMessage\n                                id='claim.email_to_ldap.ssoType'\n                                defaultMessage='Upon claiming your account, you will only be able to login with AD/LDAP'\n                            />\n                        </p>\n                        <p>\n                            <FormattedMessage\n                                id='claim.email_to_ldap.ssoNote'\n                                defaultMessage='You must already have a valid AD/LDAP account'\n                            />\n                        </p>\n                        <p>\n                            <FormattedMessage\n                                id='claim.email_to_ldap.enterPwd'\n                                defaultMessage='Enter the password for your {site} email account'\n                                values={{\n                                    site: this.props.siteName,\n                                }}\n                            />\n                        </p>\n                        <input\n                            type='text'\n                            style={style.usernameInput}\n                            name='fakeusernameremembered'\n                        />\n                        <div className={passwordClass}>\n                            <LocalizedInput\n                                type='password'\n                                className='form-control'\n                                name='emailPassword'\n                                ref={this.emailPasswordInput}\n                                autoComplete='off'\n                                placeholder={{id: t('claim.email_to_ldap.pwd'), defaultMessage: 'Password'}}\n                                spellCheck='false'\n                            />\n                        </div>\n                        {passwordError}\n                        <p>\n                            <FormattedMessage\n                                id='claim.email_to_ldap.enterLdapPwd'\n                                defaultMessage='Enter the ID and password for your AD/LDAP account'\n                            />\n                        </p>\n                        <div className={ldapClass}>\n                            <input\n                                type='text'\n                                className='form-control'\n                                name='ldapId'\n                                ref={this.ldapIdInput}\n                                autoComplete='off'\n                                placeholder={loginPlaceholder}\n                                spellCheck='false'\n                            />\n                        </div>\n                        {ldapError}\n                        <div className={ldapPasswordClass}>\n                            <LocalizedInput\n                                type='password'\n                                className='form-control'\n                                name='ldapPassword'\n                                ref={this.ldapPasswordInput}\n                                autoComplete='off'\n                                placeholder={{id: t('claim.email_to_ldap.ldapPwd'), defaultMessage: 'AD/LDAP Password'}}\n                                spellCheck='false'\n                            />\n                        </div>\n                        {ldapPasswordError}\n                        <button\n                            type='submit'\n                            className='btn btn-primary'\n                        >\n                            <FormattedMessage\n                                id='claim.email_to_ldap.switchTo'\n                                defaultMessage='Switch Account to AD/LDAP'\n                            />\n                        </button>\n                        {serverError}\n                    </form>\n                </>\n            );\n        }\n\n        return (\n            <div>\n                {content}\n            </div>\n        );\n    }\n}\n\nconst style = {\n    usernameInput: {display: 'none'},\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Route, Switch} from 'react-router-dom';\n\nimport {ActionFunc} from 'mattermost-redux/types/actions';\n\nimport logoImage from 'images/logo.png';\nimport BackButton from 'components/common/back_button';\nimport OAuthToEmail from 'components/claim/components/oauth_to_email';\nimport EmailToOAuth from 'components/claim/components/email_to_oauth';\nimport LDAPToEmail from 'components/claim/components/ldap_to_email';\nimport EmailToLDAP from 'components/claim/components/email_to_ldap';\n\ninterface PasswordConfig {\n    minimumLength: number;\n    requireLowercase: boolean;\n    requireUppercase: boolean;\n    requireNumber: boolean;\n    requireSymbol: boolean;\n}\n\ntype Location = {\n    search: string;\n}\n\ntype Props = {\n    location: Location;\n    siteName?: string;\n    ldapLoginFieldName?: string;\n    passwordConfig?: PasswordConfig;\n    match: {\n        url: string;\n    };\n    actions: {\n        switchLdapToEmail: (ldapPassword: string, email: string, emailPassword: string, mfaCode?: string) => ActionFunc;\n    };\n}\n\nexport default class ClaimController extends React.PureComponent<Props> {\n    render(): JSX.Element {\n        const email = (new URLSearchParams(this.props.location.search)).get('email');\n        const newType = (new URLSearchParams(this.props.location.search)).get('new_type');\n        const currentType = (new URLSearchParams(this.props.location.search)).get('old_type');\n\n        return (\n            <div>\n                <BackButton/>\n                <div className='col-sm-12'>\n                    <div className='signup-team__container'>\n                        <img\n                            alt={'signup logo'}\n                            className='signup-team-logo'\n                            src={logoImage}\n                        />\n                        <div id='claim'>\n                            <Switch>\n                                <Route\n                                    path={`${this.props.match.url}/oauth_to_email`}\n                                    render={() => (\n                                        <OAuthToEmail\n                                            currentType={currentType}\n                                            email={email}\n                                            siteName={this.props.siteName}\n                                            passwordConfig={this.props.passwordConfig}\n                                        />\n                                    )}\n                                />\n                                <Route\n                                    path={`${this.props.match.url}/email_to_oauth`}\n                                    render={() => (\n                                        <EmailToOAuth\n                                            newType={newType}\n                                            email={email}\n                                            siteName={this.props.siteName}\n                                        />\n                                    )}\n                                />\n                                <Route\n                                    path={`${this.props.match.url}/ldap_to_email`}\n                                    render={() => (\n                                        <LDAPToEmail\n                                            email={email}\n                                            passwordConfig={this.props.passwordConfig}\n                                            switchLdapToEmail={this.props.actions.switchLdapToEmail}\n                                        />\n                                    )}\n                                />\n                                <Route\n                                    path={`${this.props.match.url}/email_to_ldap`}\n                                    render={() => (\n                                        <EmailToLDAP\n                                            email={email}\n                                            siteName={this.props.siteName}\n                                            ldapLoginFieldName={this.props.ldapLoginFieldName}\n                                        />\n                                    )}\n                                />\n                            </Switch>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch} from 'redux';\n\nimport {switchLdapToEmail} from 'mattermost-redux/actions/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {GlobalState} from '@mattermost/types/store';\nimport {GenericAction} from 'mattermost-redux/types/actions';\n\nimport {getPasswordConfig} from 'utils/utils';\n\nimport ClaimController from './claim_controller';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n    const siteName = config.SiteName as string;\n    const ldapLoginFieldName = config.LdapLoginFieldName as string;\n\n    return {\n        siteName,\n        ldapLoginFieldName,\n        passwordConfig: getPasswordConfig(config),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators({\n            switchLdapToEmail,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ClaimController);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\nimport {Link} from 'react-router-dom';\nimport classNames from 'classnames';\n\ntype Props = {\n\n    /**\n     * URL to return to\n     */\n    url: string;\n\n    className?: string;\n\n    /**\n     * onClick handler when user clicks back button\n     */\n    onClick?: React.EventHandler<React.MouseEvent>;\n}\n\nconst BackButton = ({url, className, onClick}: Props): JSX.Element => {\n    const {formatMessage} = useIntl();\n\n    return (\n        <div\n            id='back_button'\n            className={classNames('signup-header', className)}\n        >\n            <Link\n                onClick={onClick}\n                to={url}\n            >\n                <span\n                    id='back_button_icon'\n                    className='fa fa-1x fa-angle-left'\n                    title={formatMessage({id: 'generic_icons.back', defaultMessage: 'Back Icon'})}\n                />\n                <FormattedMessage\n                    id='web.header.back'\n                    defaultMessage='Back'\n                />\n            </Link>\n        </div>\n    );\n};\nBackButton.defaultProps = {\n    url: '/',\n};\n\nexport default BackButton;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport Constants from 'utils/constants';\n\nimport './column.scss';\n\ntype ColumnProps = {\n    title: string;\n    message: string;\n    SVGElement?: React.ReactNode;\n    extraContent?: React.ReactNode;\n    onEnterKeyDown?: (e: React.KeyboardEvent<HTMLInputElement>) => void;\n}\n\nconst Column = ({title, message, SVGElement, extraContent, onEnterKeyDown}: ColumnProps) => {\n    const handleOnEnterKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (onEnterKeyDown && e.key === Constants.KeyCodes.ENTER[0]) {\n            onEnterKeyDown(e);\n        }\n    };\n\n    return (\n        <div\n            className='content-layout-column'\n            onKeyDown={handleOnEnterKeyDown}\n            tabIndex={0}\n        >\n            <div className='content-layout-column-svg'>\n                {SVGElement}\n            </div>\n            <h1 className='content-layout-column-title'>\n                {title}\n            </h1>\n            <p className='content-layout-column-message'>\n                {message}\n            </p>\n            {extraContent && (\n                <div className='content-layout-column-extra-content'>\n                    {extraContent}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Column;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\ntype SvgProps = {\n    width?: number;\n    height?: number;\n}\n\nconst Svg = (props: SvgProps) => (\n    <svg\n        width={props.width?.toString() || '102'}\n        height={props.height?.toString() || '123'}\n        viewBox='0 0 102 123'\n        fill='none'\n        xmlns='http://www.w3.org/2000/svg'\n    >\n        <path\n            d='M101.675 27.9958L99.2946 16.0841C98.9367 14.3239 97.8957 12.7705 96.3927 11.7537C85.2266 4.1723 70.423 0.223633 51.0193 0.223633C31.6156 0.223633 16.7987 4.17233 5.67264 11.7801C4.17376 12.8008 3.13398 14.3524 2.7708 16.1104L0.336967 27.9958C0.184635 28.743 0.245121 29.5171 0.511798 30.2325C0.778474 30.948 1.24096 31.5769 1.84808 32.0498C5.05752 34.5111 6.51514 37.7622 7.19714 41.8688C7.96339 46.1871 7.78096 50.6168 6.6622 54.8599C-3.27367 93.2541 13.4555 110.72 50.9524 122.777C88.3958 110.72 105.165 93.2541 95.2293 54.8599C94.1175 50.6158 93.9351 46.1876 94.6944 41.8688C95.4299 37.7622 96.8875 34.5111 100.043 32.0498C100.675 31.593 101.162 30.9705 101.451 30.2536C101.74 29.5366 101.817 28.7542 101.675 27.9958Z'\n            fill='#CC8F00'\n        />\n        <path\n            d='M51.019 113.063C16.9455 101.507 8.05264 87.1071 15.8088 57.1236C17.2606 51.6118 17.4932 45.8575 16.4908 40.2496C15.7615 35.2997 13.534 30.681 10.0986 26.9954L11.7568 18.8348C21.4921 12.4906 34.3433 9.41064 51.019 9.41064C67.6947 9.41064 80.5324 12.4906 90.2677 18.8348L91.9259 26.9954C88.4947 30.6822 86.2718 35.301 85.5471 40.2496C84.5448 45.8575 84.7773 51.6118 86.2291 57.1236C93.9451 87.0939 85.0925 101.572 51.019 113.063Z'\n            fill='var(--away-indicator)'\n        />\n        <path\n            d='M51.019 113.063C16.9455 101.507 8.05264 87.1071 15.8088 57.1236C17.2606 51.6118 17.4932 45.8575 16.4908 40.2496C15.7615 35.2997 13.534 30.681 10.0986 26.9954L11.7568 18.8348C21.4921 12.4906 34.3433 9.41064 51.019 9.41064C67.6947 9.41064 80.5324 12.4906 90.2677 18.8348L91.9259 26.9954C88.4947 30.6822 86.2718 35.301 85.5471 40.2496C84.5448 45.8575 84.7773 51.6118 86.2291 57.1236C93.9451 87.0939 85.0925 101.572 51.019 113.063Z'\n            fill='var(--away-indicator)'\n        />\n        <path\n            d='M51.019 52.4511V9.43701C34.3433 9.43701 21.4921 12.5169 11.7568 18.8611L10.0986 27.0217C13.534 30.7073 15.7615 35.3261 16.4908 40.276C17.2085 44.307 17.2852 48.4233 16.7181 52.4774L51.019 52.4511Z'\n            fill='var(--away-indicator)'\n        />\n        <path\n            d='M51.0195 113.063C85.093 101.573 93.9457 87.0941 86.2297 57.1237C85.8321 55.5847 85.5241 54.0247 85.3069 52.4512H51.0195V113.063Z'\n            fill='var(--away-indicator)'\n        />\n        <path\n            d='M15.809 57.1237C8.05289 87.1072 16.9457 101.507 51.0192 113.063V52.4512H16.7184C16.5058 54.0245 16.2022 55.5845 15.809 57.1237Z'\n            fill='#FFD470'\n        />\n        <path\n            d='M51.0195 9.43701V52.4774H85.3069C84.7377 48.423 84.8189 44.3057 85.5476 40.276C86.2723 35.3274 88.4952 30.7085 91.9264 27.0217L90.2682 18.8611C80.5731 12.4906 67.6819 9.43701 51.0195 9.43701Z'\n            fill='#FFD470'\n        />\n        <path\n            d='M71.0644 38.9336L43.4633 68.8118L35.4531 62.8361H31L43.4633 82.7505L75.5175 38.9336H71.0644Z'\n            fill='#6F370B'\n        />\n    </svg>\n);\n\nexport default Svg;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useState} from 'react';\nimport {MessageDescriptor, useIntl} from 'react-intl';\n\nimport ColumnLayout from 'components/header_footer_route/content_layouts/column';\nimport SaveButton from 'components/save_button';\nimport Input, {SIZE} from 'components/widgets/inputs/input/input';\nimport ShieldWithCheckmarkSVG from 'components/common/svg_images_components/shield_with_checkmark';\n\nimport './login_mfa.scss';\n\ntype LoginMfaProps = {\n    loginId: string;\n    password: string;\n    title?: MessageDescriptor;\n    subtitle?: MessageDescriptor;\n    onSubmit: (loginId: string, password: string, token: string) => void;\n}\n\nconst LoginMfa = ({loginId, password, title, subtitle, onSubmit}: LoginMfaProps) => {\n    const {formatMessage} = useIntl();\n\n    const [token, setToken] = useState('');\n    const [saving, setSaving] = useState(false);\n\n    const handleInputOnChange = ({target: {value: token}}: React.ChangeEvent<HTMLInputElement>) => {\n        setToken(token.trim().replace(/\\s/g, ''));\n    };\n\n    const handleSaveButtonOnClick = (e: React.MouseEvent | React.KeyboardEvent) => {\n        e.preventDefault();\n\n        if (!saving) {\n            setSaving(true);\n\n            onSubmit(loginId, password, token);\n        }\n    };\n\n    const onEnterKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (token) {\n            handleSaveButtonOnClick(e);\n        }\n    };\n\n    return (\n        <ColumnLayout\n            title={formatMessage(title || {id: 'login_mfa.title', defaultMessage: 'Enter MFA Token'})}\n            message={formatMessage(subtitle || {id: 'login_mfa.subtitle', defaultMessage: 'To complete the sign in process, please enter a token from your smartphone\\'s authenticator'})}\n            SVGElement={<ShieldWithCheckmarkSVG/>}\n            extraContent={(\n                <div className='login-mfa-form'>\n                    <Input\n                        name='token'\n                        containerClassName='login-mfa-form-input'\n                        type='text'\n                        inputSize={SIZE.LARGE}\n                        value={token}\n                        onChange={handleInputOnChange}\n                        placeholder={formatMessage({id: 'login_mfa.token', defaultMessage: 'Enter MFA Token'})}\n                        autoFocus={true}\n                        disabled={saving}\n                    />\n                    <div className='login-mfa-form-button-container'>\n                        <SaveButton\n                            extraClasses='login-mfa-form-button-submit large'\n                            saving={saving}\n                            disabled={!token}\n                            onClick={handleSaveButtonOnClick}\n                            defaultMessage={formatMessage({id: 'login_mfa.submit', defaultMessage: 'Submit'})}\n                            savingMessage={formatMessage({id: 'login_mfa.saving', defaultMessage: 'Logging in…'})}\n                        />\n                    </div>\n                </div>\n            )}\n            onEnterKeyDown={onEnterKeyDown}\n        />\n    );\n};\n\nexport default LoginMfa;\n","export default __webpack_public_path__ + \"files/ab8aa80cba445eb0fb75e6611c292567.png\";"],"names":["PropTypes","React","FormattedMessage","oauthToEmail","Constants","Utils","t","LocalizedInput","OAuthToEmail","PureComponent","constructor","props","e","preventDefault","state","password","passwordInput","current","value","error","localizeMessage","setState","valid","isValidPassword","passwordConfig","confirmPassword","passwordConfirmInput","currentType","email","data","follow_link","window","location","href","err","message","createRef","render","formClass","uiType","SAML_SERVICE","toUpperCase","toTitleCase","type","submit","site","siteName","id","defaultMessage","string","object","emailToOAuth","LoginMfa","EmailToOAuth","loginId","token","newType","showMfa","server_error_id","content","values","preSubmit","LDAPToEmail","passwordError","confirmError","ldapPasswordError","serverError","ldapPassword","ldapPasswordInput","switchLdapToEmail","then","startsWith","passwordClass","ldapPasswordClass","confimClass","passwordPlaceholder","func","isRequired","emailToLdap","EmailToLDAP","ldapError","emailPasswordInput","ldapId","ldapIdInput","trim","ldapClass","loginPlaceholder","ldapLoginFieldName","style","usernameInput","display","Route","Switch","logoImage","BackButton","ClaimController","URLSearchParams","search","get","match","url","actions","minimumLength","requireLowercase","requireUppercase","requireNumber","requireSymbol","connect","bindActionCreators","getConfig","getPasswordConfig","mapStateToProps","config","SiteName","LdapLoginFieldName","mapDispatchToProps","dispatch","useIntl","Link","classNames","className","onClick","formatMessage","defaultProps","Column","title","SVGElement","extraContent","onEnterKeyDown","handleOnEnterKeyDown","key","KeyCodes","ENTER","Svg","width","toString","height","useState","ColumnLayout","SaveButton","Input","SIZE","ShieldWithCheckmarkSVG","subtitle","onSubmit","setToken","saving","setSaving","handleInputOnChange","target","replace","handleSaveButtonOnClick","LARGE"],"sourceRoot":""}