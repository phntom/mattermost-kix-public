{"version":3,"file":"152.e30f7ace4911a1eb82ef.js","mappings":"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","sources":["webpack://@mattermost/webapp/./components/dnd_custom_time_picker_modal/dnd_custom_time_picker_modal.tsx"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport DayPickerInput from 'react-day-picker/DayPickerInput';\n\nimport {ActionFunc} from 'mattermost-redux/types/actions';\nimport {UserStatus} from '@mattermost/types/users';\n\nimport GenericModal from 'components/generic_modal';\n\nimport {UserStatuses} from 'utils/constants';\nimport Menu from 'components/widgets/menu/menu';\nimport MenuWrapper from 'components/widgets/menu/menu_wrapper';\n\nimport './dnd_custom_time_picker_modal.scss';\nimport {toUTCUnix} from 'utils/datetime';\nimport {localizeMessage} from 'utils/utils';\n\ntype Props = {\n    onExited: () => void;\n    userId: string;\n    currentDate: Date;\n    actions: {\n        setStatus: (status: UserStatus) => ActionFunc;\n    };\n};\n\ntype State = {\n    selectedDate: Date;\n    selectedTime: string;\n    timeMenuList: string[];\n    dayPickerStartDate: Date;\n}\n\nexport default class DndCustomTimePicker extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        const {currentDate} = this.props;\n        const selectedDate: Date = new Date(currentDate);\n\n        // if current time is > 23:20 then we will set date to tomorrow and show all times\n        if (currentDate.getHours() === 23 && currentDate.getMinutes() > 20) {\n            selectedDate.setDate(currentDate.getDate() + 1);\n        }\n\n        this.state = {\n            selectedDate,\n            dayPickerStartDate: selectedDate,\n            ...this.makeTimeMenuList(selectedDate),\n        };\n    }\n\n    formatDate = (date: Date): string => {\n        const month = (date.getMonth() + 1).toString().padStart(2, '0');\n        const day = date.getDate().toString().padStart(2, '0');\n        const year = date.getFullYear().toString();\n        return [year, month, day].join('-');\n    }\n\n    getText = () => {\n        const modalHeaderText = (\n            <FormattedMessage\n                id='dnd_custom_time_picker_modal.defaultMsg'\n                defaultMessage='Disable notifications until'\n            />\n        );\n        const confirmButtonText = (\n            <FormattedMessage\n                id='dnd_custom_time_picker_modal.submitButton'\n                defaultMessage='Disable Notifications'\n            />\n        );\n\n        return {\n            modalHeaderText,\n            confirmButtonText,\n        };\n    }\n\n    handleConfirm = () => {\n        const hours = parseInt(this.state.selectedTime.split(':')[0], 10);\n        const minutes = parseInt(this.state.selectedTime.split(':')[1], 10);\n        const endTime = new Date(this.state.selectedDate);\n        endTime.setHours(hours, minutes);\n        if (endTime < new Date()) {\n            return;\n        }\n        this.props.actions.setStatus({\n            user_id: this.props.userId,\n            status: UserStatuses.DND,\n            dnd_end_time: toUTCUnix(endTime),\n            manual: true,\n            last_activity_at: toUTCUnix(this.props.currentDate),\n        });\n    }\n\n    handleDaySelection = (day: Date) => {\n        this.setState({\n            selectedDate: day,\n            ...this.makeTimeMenuList(day),\n        });\n    };\n\n    makeTimeMenuList = (date: Date): {timeMenuList: string[]; selectedTime: string} => {\n        const timeMenuItems = [];\n        let h = 0;\n        let m = 0;\n        const curr = this.props.currentDate;\n\n        if (this.formatDate(curr) === this.formatDate(date)) {\n            h = curr.getHours();\n            m = curr.getMinutes();\n            if (m > 20) {\n                h++;\n                m = 0;\n            } else {\n                m = 30;\n            }\n        }\n\n        for (let i = h; i < 24; i++) {\n            for (let j = m / 30; j < 2; j++) {\n                const t = i.toString().padStart(2, '0') + ':' + (j * 30).toString().padStart(2, '0');\n                timeMenuItems.push(\n                    t,\n                );\n            }\n        }\n\n        return {\n            timeMenuList: timeMenuItems,\n            selectedTime: timeMenuItems[0],\n        };\n    }\n\n    render() {\n        const {\n            modalHeaderText,\n            confirmButtonText,\n        } = this.getText();\n\n        const {timeMenuList, selectedTime, selectedDate, dayPickerStartDate} = this.state;\n        const timeMenuItems = timeMenuList.map((time) => {\n            return (\n                <Menu.ItemAction\n                    id={`dndTime_dropdown_${time}`}\n                    key={time}\n                    text={time}\n                    ariaLabel={`${time} hours`}\n                    onClick={() => {\n                        this.setState({\n                            selectedTime: time,\n                        });\n                    }}\n                >\n                    {time}\n                </Menu.ItemAction>\n            );\n        });\n\n        return (\n            <GenericModal\n                ariaLabel={localizeMessage('dnd_custom_time_picker_modal.defaultMsg', 'Disable notifications until')}\n                onExited={this.props.onExited}\n                modalHeaderText={modalHeaderText}\n                confirmButtonText={confirmButtonText}\n                handleConfirm={this.handleConfirm}\n                handleEnterKeyPress={this.handleConfirm}\n                id='dndCustomTimePickerModal'\n                className={'DndModal modal-overflow'}\n            >\n                <div className='DndModal__content'>\n                    <div>\n                        <div className='DndModal__input DndModal__input--no-border'>\n                            <div className='DndModal__input__label'>\n                                <FormattedMessage\n                                    id='dnd_custom_time_picker_modal.date'\n                                    defaultMessage='Date'\n                                />\n                            </div>\n                            <i className='icon icon--no-spacing icon-calendar-outline icon--xs icon-14'/>\n                            <DayPickerInput\n                                value={this.formatDate(selectedDate)}\n                                onDayChange={this.handleDaySelection}\n                                dayPickerProps={{\n                                    selectedDays: selectedDate,\n                                    disabledDays: {\n                                        before: dayPickerStartDate,\n                                    },\n                                }}\n                            />\n                        </div>\n                    </div>\n                    <MenuWrapper\n                        id='dropdown-no-caret'\n                        stopPropagationOnToggle={true}\n                    >\n                        <button\n                            className='DndModal__input'\n                            type='button'\n                        >\n                            <div className='DndModal__input__label'>\n                                <FormattedMessage\n                                    id='dnd_custom_time_picker_modal.time'\n                                    defaultMessage='Time'\n                                />\n                            </div>\n                            <i className='icon icon--no-spacing icon-clock-outline icon--xs icon-14'/>\n                            <span>{selectedTime}</span>\n                        </button>\n                        <Menu\n                            openLeft={false}\n                            ariaLabel={'Clear custom status after'}\n                        >\n                            {timeMenuItems}\n                        </Menu>\n                    </MenuWrapper>\n                </div>\n            </GenericModal>\n        );\n    }\n}\n"],"names":["React","FormattedMessage","DayPickerInput","GenericModal","UserStatuses","Menu","MenuWrapper","toUTCUnix","localizeMessage","DndCustomTimePicker","PureComponent","constructor","props","date","month","getMonth","toString","padStart","day","getDate","year","getFullYear","join","modalHeaderText","confirmButtonText","hours","parseInt","state","selectedTime","split","minutes","endTime","Date","selectedDate","setHours","actions","setStatus","user_id","userId","status","DND","dnd_end_time","manual","last_activity_at","currentDate","setState","makeTimeMenuList","timeMenuItems","h","m","curr","formatDate","getHours","getMinutes","i","j","t","push","timeMenuList","setDate","dayPickerStartDate","render","getText","map","time","onExited","handleConfirm","handleDaySelection","selectedDays","disabledDays","before"],"sourceRoot":""}