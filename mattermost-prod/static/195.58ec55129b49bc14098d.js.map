{"version":3,"file":"195.58ec55129b49bc14098d.js","mappings":"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","sources":["webpack://@mattermost/webapp/./actions/views/mfa.js","webpack://@mattermost/webapp/./components/audit_table/audit_table.tsx","webpack://@mattermost/webapp/./components/audit_table/index.ts","webpack://@mattermost/webapp/./components/color_input.tsx","webpack://@mattermost/webapp/./components/user_settings/advanced/join_leave_section/join_leave_section.tsx","webpack://@mattermost/webapp/./components/user_settings/advanced/join_leave_section/index.ts","webpack://@mattermost/webapp/./components/user_settings/advanced/performance_debugging_section/performance_debugging_section.tsx","webpack://@mattermost/webapp/./components/user_settings/advanced/performance_debugging_section/index.ts","webpack://@mattermost/webapp/./components/user_settings/advanced/user_settings_advanced.jsx","webpack://@mattermost/webapp/./components/user_settings/advanced/index.js","webpack://@mattermost/webapp/./components/user_settings/import_theme_modal.tsx","webpack://@mattermost/webapp/./components/user_settings/display/user_settings_theme/color_chooser.tsx","webpack://@mattermost/webapp/./components/user_settings/display/user_settings_theme/custom_theme_chooser.jsx","webpack://@mattermost/webapp/./components/user_settings/display/user_settings_theme/theme_thumbnail.tsx","webpack://@mattermost/webapp/./components/user_settings/display/user_settings_theme/premade_theme_chooser/premade_theme_chooser.jsx","webpack://@mattermost/webapp/./components/user_settings/display/user_settings_theme/premade_theme_chooser/index.js","webpack://@mattermost/webapp/./components/user_settings/display/user_settings_theme/user_settings_theme.jsx","webpack://@mattermost/webapp/./components/user_settings/display/user_settings_theme/index.js","webpack://@mattermost/webapp/./components/user_settings/display/manage_timezones/manage_timezones.tsx","webpack://@mattermost/webapp/./components/user_settings/display/manage_timezones/index.ts","webpack://@mattermost/webapp/./components/user_settings/display/manage_languages/manage_languages.tsx","webpack://@mattermost/webapp/./components/user_settings/display/manage_languages/index.ts","webpack://@mattermost/webapp/./components/user_settings/display/user_settings_display.tsx","webpack://@mattermost/webapp/./components/user_settings/display/index.ts","webpack://@mattermost/webapp/./components/user_settings/general/user_settings_general.tsx","webpack://@mattermost/webapp/./components/user_settings/general/index.ts","webpack://@mattermost/webapp/./components/user_settings/notifications/desktop_notification_settings.jsx","webpack://@mattermost/webapp/./packages/mattermost-redux/src/utils/notify_props.ts","webpack://@mattermost/webapp/./components/user_settings/notifications/email_notification_setting/email_notification_setting.tsx","webpack://@mattermost/webapp/./components/user_settings/notifications/email_notification_setting/index.ts","webpack://@mattermost/webapp/./components/user_settings/notifications/manage_auto_responder.jsx","webpack://@mattermost/webapp/./components/user_settings/notifications/user_settings_notifications.jsx","webpack://@mattermost/webapp/./components/user_settings/notifications/index.js","webpack://@mattermost/webapp/./components/access_history_modal/access_history_modal.tsx","webpack://@mattermost/webapp/./components/access_history_modal/index.ts","webpack://@mattermost/webapp/./components/activity_log_modal/components/more_info.tsx","webpack://@mattermost/webapp/./components/activity_log_modal/components/activity_log.tsx","webpack://@mattermost/webapp/./components/activity_log_modal/activity_log_modal.tsx","webpack://@mattermost/webapp/./components/activity_log_modal/index.ts","webpack://@mattermost/webapp/./components/user_settings/security/mfa_section/mfa_section.tsx","webpack://@mattermost/webapp/./components/user_settings/security/mfa_section/index.ts","webpack://@mattermost/webapp/./components/user_settings/security/user_access_token_section/user_access_token_section.tsx","webpack://@mattermost/webapp/./components/user_settings/security/user_access_token_section/index.ts","webpack://@mattermost/webapp/./components/user_settings/security/user_settings_security.tsx","webpack://@mattermost/webapp/./components/user_settings/security/index.ts","webpack://@mattermost/webapp/./components/user_settings/sidebar/show_unreads_category/show_unreads_category.tsx","webpack://@mattermost/webapp/./components/user_settings/sidebar/show_unreads_category/index.ts","webpack://@mattermost/webapp/./components/user_settings/sidebar/limit_visible_gms_dms/limit_visible_gms_dms.tsx","webpack://@mattermost/webapp/./components/user_settings/sidebar/limit_visible_gms_dms/index.ts","webpack://@mattermost/webapp/./components/user_settings/sidebar/user_settings_sidebar.tsx","webpack://@mattermost/webapp/./components/user_settings/sidebar/index.ts","webpack://@mattermost/webapp/./components/user_settings/user_settings.tsx","webpack://@mattermost/webapp/./components/user_settings/index.ts","webpack://@mattermost/webapp/./components/widgets/icons/fa_warning_icon.tsx","webpack://@mattermost/webapp/./packages/mattermost-redux/src/actions/timezone.ts"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport * as UserActions from 'mattermost-redux/actions/users';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nexport function activateMfa(code) {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.updateUserMfa(currentUserId, true, code));\n    };\n}\n\nexport function deactivateMfa() {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.updateUserMfa(currentUserId, false));\n    };\n}\n\nexport function generateMfaSecret() {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.generateMfaSecret(currentUserId));\n    };\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {defineMessages, FormattedDate, FormattedMessage, FormattedTime, injectIntl, IntlShape} from 'react-intl';\n\nimport {UserProfile} from '@mattermost/types/users';\nimport {ActionFunc} from 'mattermost-redux/types/actions';\nimport {Audit} from '@mattermost/types/audits';\nimport {Channel} from '@mattermost/types/channels';\n\nimport {t} from 'utils/i18n';\nimport {toTitleCase} from 'utils/utils';\nimport {isSystemAdmin} from 'mattermost-redux/utils/user_utils';\n\nconst holders = defineMessages({\n    sessionRevoked: {\n        id: t('audit_table.sessionRevoked'),\n        defaultMessage: 'The session with id {sessionId} was revoked',\n    },\n    channelCreated: {\n        id: t('audit_table.channelCreated'),\n        defaultMessage: 'Created the {channelName} channel',\n    },\n    establishedDM: {\n        id: t('audit_table.establishedDM'),\n        defaultMessage: 'Established a direct message channel with {username}',\n    },\n    nameUpdated: {\n        id: t('audit_table.nameUpdated'),\n        defaultMessage: 'Updated the {channelName} channel name',\n    },\n    headerUpdated: {\n        id: t('audit_table.headerUpdated'),\n        defaultMessage: 'Updated the {channelName} channel header',\n    },\n    channelDeleted: {\n        id: t('audit_table.channelDeleted'),\n        defaultMessage: 'Archived the channel with the URL {url}',\n    },\n    userAdded: {\n        id: t('audit_table.userAdded'),\n        defaultMessage: 'Added {username} to the {channelName} channel',\n    },\n    userRemoved: {\n        id: t('audit_table.userRemoved'),\n        defaultMessage: 'Removed {username} to the {channelName} channel',\n    },\n    attemptedRegisterApp: {\n        id: t('audit_table.attemptedRegisterApp'),\n        defaultMessage: 'Attempted to register a new OAuth Application with ID {id}',\n    },\n    attemptedAllowOAuthAccess: {\n        id: t('audit_table.attemptedAllowOAuthAccess'),\n        defaultMessage: 'Attempted to allow a new OAuth service access',\n    },\n    successfullOAuthAccess: {\n        id: t('audit_table.successfullOAuthAccess'),\n        defaultMessage: 'Successfully gave a new OAuth service access',\n    },\n    failedOAuthAccess: {\n        id: t('audit_table.failedOAuthAccess'),\n        defaultMessage: 'Failed to allow a new OAuth service access - the redirect URI did not match the previously registered callback',\n    },\n    attemptedOAuthToken: {\n        id: t('audit_table.attemptedOAuthToken'),\n        defaultMessage: 'Attempted to get an OAuth access token',\n    },\n    successfullOAuthToken: {\n        id: t('audit_table.successfullOAuthToken'),\n        defaultMessage: 'Successfully added a new OAuth service',\n    },\n    oauthTokenFailed: {\n        id: t('audit_table.oauthTokenFailed'),\n        defaultMessage: 'Failed to get an OAuth access token - {token}',\n    },\n    attemptedLogin: {\n        id: t('audit_table.attemptedLogin'),\n        defaultMessage: 'Attempted to login',\n    },\n    authenticated: {\n        id: t('audit_table.authenticated'),\n        defaultMessage: 'Successfully authenticated',\n    },\n    successfullLogin: {\n        id: t('audit_table.successfullLogin'),\n        defaultMessage: 'Successfully logged in',\n    },\n    failedLogin: {\n        id: t('audit_table.failedLogin'),\n        defaultMessage: 'FAILED login attempt',\n    },\n    updatePicture: {\n        id: t('audit_table.updatePicture'),\n        defaultMessage: 'Updated your profile picture',\n    },\n    updateGeneral: {\n        id: t('audit_table.updateGeneral'),\n        defaultMessage: 'Updated the general settings of your account',\n    },\n    attemptedPassword: {\n        id: t('audit_table.attemptedPassword'),\n        defaultMessage: 'Attempted to change password',\n    },\n    successfullPassword: {\n        id: t('audit_table.successfullPassword'),\n        defaultMessage: 'Successfully changed password',\n    },\n    failedPassword: {\n        id: t('audit_table.failedPassword'),\n        defaultMessage: 'Failed to change password - tried to update user password who was logged in through OAuth',\n    },\n    updatedRol: {\n        id: t('audit_table.updatedRol'),\n        defaultMessage: 'Updated user role(s) to ',\n    },\n    member: {\n        id: t('audit_table.member'),\n        defaultMessage: 'member',\n    },\n    accountActive: {\n        id: t('audit_table.accountActive'),\n        defaultMessage: 'Account activated',\n    },\n    accountInactive: {\n        id: t('audit_table.accountInactive'),\n        defaultMessage: 'Account deactivated',\n    },\n    by: {\n        id: t('audit_table.by'),\n        defaultMessage: ' by {username}',\n    },\n    byAdmin: {\n        id: t('audit_table.byAdmin'),\n        defaultMessage: ' by an admin',\n    },\n    sentEmail: {\n        id: t('audit_table.sentEmail'),\n        defaultMessage: 'Sent an email to {email} to reset your password',\n    },\n    attemptedReset: {\n        id: t('audit_table.attemptedReset'),\n        defaultMessage: 'Attempted to reset password',\n    },\n    successfullReset: {\n        id: t('audit_table.successfullReset'),\n        defaultMessage: 'Successfully reset password',\n    },\n    updateGlobalNotifications: {\n        id: t('audit_table.updateGlobalNotifications'),\n        defaultMessage: 'Updated your global notification settings',\n    },\n    attemptedWebhookCreate: {\n        id: t('audit_table.attemptedWebhookCreate'),\n        defaultMessage: 'Attempted to create a webhook',\n    },\n    succcessfullWebhookCreate: {\n        id: t('audit_table.successfullWebhookCreate'),\n        defaultMessage: 'Successfully created a webhook',\n    },\n    failedWebhookCreate: {\n        id: t('audit_table.failedWebhookCreate'),\n        defaultMessage: 'Failed to create a webhook - bad channel permissions',\n    },\n    attemptedWebhookDelete: {\n        id: t('audit_table.attemptedWebhookDelete'),\n        defaultMessage: 'Attempted to delete a webhook',\n    },\n    successfullWebhookDelete: {\n        id: t('audit_table.successfullWebhookDelete'),\n        defaultMessage: 'Successfully deleted a webhook',\n    },\n    failedWebhookDelete: {\n        id: t('audit_table.failedWebhookDelete'),\n        defaultMessage: 'Failed to delete a webhook - inappropriate conditions',\n    },\n    logout: {\n        id: t('audit_table.logout'),\n        defaultMessage: 'Logged out of your account',\n    },\n    verified: {\n        id: t('audit_table.verified'),\n        defaultMessage: 'Successfully verified your email address',\n    },\n    revokedAll: {\n        id: t('audit_table.revokedAll'),\n        defaultMessage: 'Revoked all current sessions for the team',\n    },\n    loginAttempt: {\n        id: t('audit_table.loginAttempt'),\n        defaultMessage: ' (Login attempt)',\n    },\n    loginFailure: {\n        id: t('audit_table.loginFailure'),\n        defaultMessage: ' (Login failure)',\n    },\n    attemptedLicenseAdd: {\n        id: t('audit_table.attemptedLicenseAdd'),\n        defaultMessage: 'Attempted to add new license',\n    },\n    successfullLicenseAdd: {\n        id: t('audit_table.successfullLicenseAdd'),\n        defaultMessage: 'Successfully added new license',\n    },\n    failedExpiredLicenseAdd: {\n        id: t('audit_table.failedExpiredLicenseAdd'),\n        defaultMessage: 'Failed to add a new license as it has either expired or not yet been started',\n    },\n    failedInvalidLicenseAdd: {\n        id: t('audit_table.failedInvalidLicenseAdd'),\n        defaultMessage: 'Failed to add an invalid license',\n    },\n    licenseRemoved: {\n        id: t('audit_table.licenseRemoved'),\n        defaultMessage: 'Successfully removed a license',\n    },\n});\n\ntype Props = {\n    intl: IntlShape;\n    audits: Audit[];\n    showUserId?: boolean;\n    showIp?: boolean;\n    showSession?: boolean;\n    currentUser: UserProfile;\n    getUser: (userId: string) => UserProfile;\n    getByName: (channelURL: string) => Channel | null | undefined;\n    actions: {\n        getMissingProfilesByIds: (userIds: string[]) => ActionFunc;\n    };\n    getDirectTeammate: (channelId: string) => any;\n};\n\ntype AuditInfo = {\n    userId: string;\n    desc: string;\n    ip: string;\n    sessionId: string;\n    timestamp: JSX.Element;\n};\n\nexport class AuditTable extends React.PureComponent<Props> {\n    componentDidMount() {\n        const ids = this.props.audits.map((audit) => audit.user_id);\n        this.props.actions.getMissingProfilesByIds(ids);\n    }\n\n    render() {\n        const {audits, showUserId, showIp, showSession} = this.props;\n        const accessList = [];\n\n        for (const [i, audit] of audits.entries()) {\n            const auditInfo = this.formatAuditInfo(audit);\n\n            let uContent;\n            if (showUserId) {\n                uContent = <td className='word-break--all'>{auditInfo.userId}</td>;\n            }\n\n            let iContent;\n            if (showIp) {\n                iContent = <td className='whitespace--nowrap word-break--all'>{auditInfo.ip}</td>;\n            }\n\n            let sContent;\n            if (showSession) {\n                sContent = <td className='whitespace--nowrap word-break--all'>{auditInfo.sessionId}</td>;\n            }\n\n            let descStyle = '';\n            if (auditInfo.desc.toLowerCase().indexOf('fail') !== -1) {\n                descStyle = ' color--error';\n            }\n\n            accessList[i] = (\n                <tr key={audit.id}>\n                    <td className='whitespace--nowrap word-break--all'>{auditInfo.timestamp}</td>\n                    {uContent}\n                    <td\n                        className={'word-break--all' + descStyle}\n                    >\n                        {auditInfo.desc}\n                    </td>\n                    {iContent}\n                    {sContent}\n                </tr>\n            );\n        }\n\n        let userIdContent;\n        if (showUserId) {\n            userIdContent = (\n                <th>\n                    <FormattedMessage\n                        id='audit_table.userId'\n                        defaultMessage='User ID'\n                    />\n                </th>\n            );\n        }\n\n        let ipContent;\n        if (showIp) {\n            ipContent = (\n                <th>\n                    <FormattedMessage\n                        id='audit_table.ip'\n                        defaultMessage='IP Address'\n                    />\n                </th>\n            );\n        }\n\n        let sessionContent;\n        if (showSession) {\n            sessionContent = (\n                <th>\n                    <FormattedMessage\n                        id='audit_table.session'\n                        defaultMessage='Session ID'\n                    />\n                </th>\n            );\n        }\n\n        return (\n            <table className='table'>\n                <thead>\n                    <tr>\n                        <th>\n                            <FormattedMessage\n                                id='audit_table.timestamp'\n                                defaultMessage='Timestamp'\n                            />\n                        </th>\n                        {userIdContent}\n                        <th>\n                            <FormattedMessage\n                                id='audit_table.action'\n                                defaultMessage='Action'\n                            />\n                        </th>\n                        {ipContent}\n                        {sessionContent}\n                    </tr>\n                </thead>\n                <tbody data-testid='auditTableBody'>\n                    {accessList}\n                </tbody>\n            </table>\n        );\n    }\n\n    formatAuditInfo(audit: Audit): AuditInfo {\n        const {formatMessage} = this.props.intl;\n        const actionURL = audit.action.replace(/\\/api\\/v[1-9]/, '');\n        let auditDesc = '';\n\n        if (actionURL.indexOf('/channels') === 0) {\n            const channelInfo = audit.extra_info.split(' ');\n            const channelNameField = channelInfo[0].split('=');\n\n            let channelURL = '';\n            let channelObj;\n            let channelName = '';\n            if (channelNameField.indexOf('name') >= 0) {\n                channelURL = channelNameField[channelNameField.indexOf('name') + 1];\n                channelObj = this.props.getByName(channelURL);\n                if (channelObj) {\n                    channelName = channelObj.display_name;\n                } else {\n                    channelName = channelURL;\n                }\n            }\n\n            switch (actionURL) {\n            case '/channels/create':\n                auditDesc = formatMessage(holders.channelCreated, {channelName});\n                break;\n            case '/channels/create_direct':\n                if (channelObj) {\n                    auditDesc = formatMessage(holders.establishedDM, {username: this.props.getDirectTeammate(channelObj.id).username});\n                }\n                break;\n            case '/channels/update':\n                auditDesc = formatMessage(holders.nameUpdated, {channelName});\n                break;\n            case '/channels/update_desc': // support the old path\n            case '/channels/update_header':\n                auditDesc = formatMessage(holders.headerUpdated, {channelName});\n                break;\n            default: {\n                let userIdField = [];\n                let userId = '';\n                let username = '';\n\n                if (channelInfo[1]) {\n                    userIdField = channelInfo[1].split('=');\n\n                    if (userIdField.indexOf('user_id') >= 0) {\n                        userId = userIdField[userIdField.indexOf('user_id') + 1];\n                        const profile = this.props.getUser(userId);\n                        if (profile) {\n                            username = profile.username;\n                        }\n                    }\n                }\n\n                if ((/\\/channels\\/[A-Za-z0-9]+\\/delete/).test(actionURL)) {\n                    auditDesc = formatMessage(holders.channelDeleted, {url: channelURL});\n                } else if ((/\\/channels\\/[A-Za-z0-9]+\\/add/).test(actionURL)) {\n                    auditDesc = formatMessage(holders.userAdded, {username, channelName});\n                } else if ((/\\/channels\\/[A-Za-z0-9]+\\/remove/).test(actionURL)) {\n                    auditDesc = formatMessage(holders.userRemoved, {username, channelName});\n                }\n\n                break;\n            }\n            }\n        } else if (actionURL.indexOf('/oauth') === 0) {\n            const oauthInfo = audit.extra_info.split(' ');\n\n            switch (actionURL) {\n            case '/oauth/register': {\n                const clientIdField = oauthInfo[0].split('=');\n\n                if (clientIdField[0] === 'client_id') {\n                    auditDesc = formatMessage(holders.attemptedRegisterApp, {id: clientIdField[1]});\n                }\n\n                break;\n            }\n            case '/oauth/allow':\n                if (oauthInfo[0] === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedAllowOAuthAccess);\n                } else if (oauthInfo[0] === 'success') {\n                    auditDesc = formatMessage(holders.successfullOAuthAccess);\n                } else if (oauthInfo[0] === 'fail - redirect_uri did not match registered callback') {\n                    auditDesc = formatMessage(holders.failedOAuthAccess);\n                }\n\n                break;\n            case '/oauth/access_token':\n                if (oauthInfo[0] === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedOAuthToken);\n                } else if (oauthInfo[0] === 'success') {\n                    auditDesc = formatMessage(holders.successfullOAuthToken);\n                } else {\n                    const oauthTokenFailure = oauthInfo[0].split('-');\n\n                    if (oauthTokenFailure[0].trim() === 'fail' && oauthTokenFailure[1]) {\n                        auditDesc = formatMessage(holders.oauthTokenFailed, {token: oauthTokenFailure[1].trim()});\n                    }\n                }\n\n                break;\n            default:\n                break;\n            }\n        } else if (actionURL.indexOf('/users') === 0) {\n            const userInfo = audit.extra_info.split(' ');\n\n            switch (actionURL) {\n            case '/users/login':\n                if (userInfo[0] === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedLogin);\n                } else if (userInfo[0] === 'success') {\n                    auditDesc = formatMessage(holders.successfullLogin);\n                } else if (userInfo[0] === 'authenticated') {\n                    auditDesc = formatMessage(holders.authenticated);\n                } else if (userInfo[0]) {\n                    auditDesc = formatMessage(holders.failedLogin);\n                }\n\n                break;\n            case '/users/revoke_session':\n                auditDesc = formatMessage(holders.sessionRevoked, {sessionId: userInfo[0].split('=')[1]});\n                break;\n            case '/users/newimage':\n                auditDesc = formatMessage(holders.updatePicture);\n                break;\n            case '/users/update':\n                auditDesc = formatMessage(holders.updateGeneral);\n                break;\n            case '/users/newpassword':\n                if (userInfo[0] === 'attempted') {\n                    auditDesc = formatMessage(holders.attemptedPassword);\n                } else if (userInfo[0] === 'completed') {\n                    auditDesc = formatMessage(holders.successfullPassword);\n                } else if (userInfo[0] === 'failed - tried to update user password who was logged in through oauth') {\n                    auditDesc = formatMessage(holders.failedPassword);\n                }\n\n                break;\n            case '/users/update_roles': {\n                const userRoles = userInfo[0].split('=')[1];\n\n                auditDesc = formatMessage(holders.updatedRol);\n                if (userRoles.trim()) {\n                    auditDesc += userRoles;\n                } else {\n                    auditDesc += formatMessage(holders.member);\n                }\n\n                break;\n            }\n            case '/users/update_active': {\n                const updateType = userInfo[0].split('=')[0];\n                const updateField = userInfo[0].split('=')[1];\n\n                /* Either describes account activation/deactivation or a revoked session as part of an account deactivation */\n                if (updateType === 'active') {\n                    if (updateField === 'true') {\n                        auditDesc = formatMessage(holders.accountActive);\n                    } else if (updateField === 'false') {\n                        auditDesc = formatMessage(holders.accountInactive);\n                    }\n\n                    const actingUserInfo = userInfo[1].split('=');\n                    if (actingUserInfo[0] === 'session_user') {\n                        const actingUser = this.props.getUser(actingUserInfo[1]);\n                        const user = this.props.currentUser;\n                        if (user && actingUser && isSystemAdmin(user.roles)) {\n                            auditDesc += formatMessage(holders.by, {username: actingUser.username});\n                        } else if (user && actingUser) {\n                            auditDesc += formatMessage(holders.byAdmin);\n                        }\n                    }\n                } else if (updateType === 'session_id') {\n                    auditDesc = formatMessage(holders.sessionRevoked, {sessionId: updateField});\n                }\n\n                break;\n            }\n            case '/users/send_password_reset':\n                auditDesc = formatMessage(holders.sentEmail, {email: userInfo[0].split('=')[1]});\n                break;\n            case '/users/reset_password':\n                if (userInfo[0] === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedReset);\n                } else if (userInfo[0] === 'success') {\n                    auditDesc = formatMessage(holders.successfullReset);\n                }\n\n                break;\n            case '/users/update_notify':\n                auditDesc = formatMessage(holders.updateGlobalNotifications);\n                break;\n            default:\n                break;\n            }\n        } else if (actionURL.indexOf('/hooks') === 0) {\n            const webhookInfo = audit.extra_info;\n\n            switch (actionURL) {\n            case '/hooks/incoming/create':\n                if (webhookInfo === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedWebhookCreate);\n                } else if (webhookInfo === 'success') {\n                    auditDesc = formatMessage(holders.succcessfullWebhookCreate);\n                } else if (webhookInfo === 'fail - bad channel permissions') {\n                    auditDesc = formatMessage(holders.failedWebhookCreate);\n                }\n\n                break;\n            case '/hooks/incoming/delete':\n                if (webhookInfo === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedWebhookDelete);\n                } else if (webhookInfo === 'success') {\n                    auditDesc = formatMessage(holders.successfullWebhookDelete);\n                } else if (webhookInfo === 'fail - inappropriate conditions') {\n                    auditDesc = formatMessage(holders.failedWebhookDelete);\n                }\n\n                break;\n            default:\n                break;\n            }\n        } else if (actionURL.indexOf('/license') === 0) {\n            const licenseInfo = audit.extra_info;\n\n            switch (actionURL) {\n            case '/license/add':\n                if (licenseInfo === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedLicenseAdd);\n                } else if (licenseInfo === 'success') {\n                    auditDesc = formatMessage(holders.successfullLicenseAdd);\n                } else if (licenseInfo === 'failed - expired or non-started license') {\n                    auditDesc = formatMessage(holders.failedExpiredLicenseAdd);\n                } else if (licenseInfo === 'failed - invalid license') {\n                    auditDesc = formatMessage(holders.failedInvalidLicenseAdd);\n                }\n\n                break;\n            case '/license/remove':\n                auditDesc = formatMessage(holders.licenseRemoved);\n                break;\n            default:\n                break;\n            }\n        } else if (actionURL.indexOf('/admin/download_compliance_report') === 0) {\n            auditDesc = toTitleCase(audit.extra_info);\n        } else {\n            switch (actionURL) {\n            case '/logout':\n                auditDesc = formatMessage(holders.logout);\n                break;\n            case '/verify_email':\n                auditDesc = formatMessage(holders.verified);\n                break;\n            default:\n                break;\n            }\n        }\n\n        /* If all else fails... */\n        if (!auditDesc) {\n            /* Currently not called anywhere */\n            if (audit.extra_info.indexOf('revoked_all=') >= 0) {\n                auditDesc = formatMessage(holders.revokedAll);\n            } else {\n                let actionDesc = '';\n                if (actionURL && actionURL.lastIndexOf('/') !== -1) {\n                    actionDesc = actionURL.substring(actionURL.lastIndexOf('/') + 1).replace('_', ' ');\n                    actionDesc = toTitleCase(actionDesc);\n                }\n\n                let extraInfoDesc = '';\n                if (audit.extra_info) {\n                    extraInfoDesc = audit.extra_info;\n\n                    if (extraInfoDesc.indexOf('=') !== -1) {\n                        extraInfoDesc = extraInfoDesc.substring(extraInfoDesc.indexOf('=') + 1);\n                    }\n                }\n                auditDesc = actionDesc + ' ' + extraInfoDesc;\n            }\n        }\n\n        const date = new Date(audit.create_at);\n        const timestamp = (\n            <div>\n                <div>\n                    <FormattedDate\n                        value={date}\n                        day='2-digit'\n                        month='short'\n                        year='numeric'\n                    />\n                </div>\n                <div>\n                    <FormattedTime\n                        value={date}\n                        hour='2-digit'\n                        minute='2-digit'\n                    />\n                </div>\n            </div>\n        );\n\n        const auditProfile = this.props.getUser(audit.user_id);\n\n        const userId = auditProfile ? auditProfile.email : audit.user_id;\n        const desc = auditDesc;\n        const ip = audit.ip_address;\n        const sessionId = audit.session_id;\n\n        return {\n            timestamp,\n            userId,\n            desc,\n            ip,\n            sessionId,\n        };\n    }\n}\n\nexport default injectIntl(AuditTable);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch} from 'redux';\n\nimport {getMissingProfilesByIds} from 'mattermost-redux/actions/users';\nimport {getUser, getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {getChannelByName, getDirectTeammate} from 'mattermost-redux/selectors/entities/channels';\nimport {GenericAction} from 'mattermost-redux/types/actions';\n\nimport {GlobalState} from 'types/store';\n\nimport AuditTable from './audit_table';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        currentUser: getCurrentUser(state),\n        getUser: (userId: string) => getUser(state, userId),\n        getByName: (channelName: string) => getChannelByName(state, channelName),\n        getDirectTeammate: (channelId: string) => getDirectTeammate(state, channelId),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators({\n            getMissingProfilesByIds,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AuditTable);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {ChromePicker, ColorResult} from 'react-color';\nimport tinycolor from 'tinycolor2';\n\ntype Props = {\n    id: string;\n    onChange: (color: string) => void;\n    value: string;\n    isDisabled?: boolean;\n}\n\ntype State = {\n    focused: boolean;\n    isOpened: boolean;\n    value: string;\n}\n\nexport default class ColorInput extends React.PureComponent<Props, State> {\n    private colorPicker: React.RefObject<HTMLDivElement>;\n    private colorInput: React.RefObject<HTMLInputElement>;\n\n    public constructor(props: Props) {\n        super(props);\n        this.colorPicker = React.createRef();\n        this.colorInput = React.createRef();\n\n        this.state = {\n            focused: false,\n            isOpened: false,\n            value: props.value,\n        };\n    }\n\n    static getDerivedStateFromProps(props: Props, state: State) {\n        if (!state.focused && props.value !== state.value) {\n            return {\n                value: props.value,\n            };\n        }\n\n        return null;\n    }\n\n    public componentDidUpdate(prevProps: Props, prevState: State) {\n        const {isOpened: prevIsOpened} = prevState;\n        const {isOpened} = this.state;\n\n        if (isOpened !== prevIsOpened) {\n            if (isOpened) {\n                document.addEventListener('click', this.checkClick);\n            } else {\n                document.removeEventListener('click', this.checkClick);\n            }\n        }\n    }\n\n    private checkClick = (e: MouseEvent): void => {\n        if (!this.colorPicker.current || !this.colorPicker.current.contains(e.target as Element)) {\n            this.setState({isOpened: false});\n        }\n    };\n\n    private togglePicker = () => {\n        if (!this.state.isOpened && this.colorInput.current) {\n            this.colorInput.current.focus();\n        }\n        this.setState({isOpened: !this.state.isOpened});\n    };\n\n    public handleColorChange = (newColorData: ColorResult) => {\n        this.props.onChange(newColorData.hex);\n    };\n\n    private onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const value = event.target.value;\n\n        const color = tinycolor(value);\n        const normalizedColor = '#' + color.toHex();\n\n        if (color.isValid()) {\n            this.props.onChange(normalizedColor);\n        }\n\n        this.setState({value});\n    };\n\n    private onFocus = (event: React.FocusEvent<HTMLInputElement>): void => {\n        this.setState({\n            focused: true,\n        });\n\n        if (event.target) {\n            event.target.setSelectionRange(1, event.target.value.length);\n        }\n    }\n\n    private onBlur = () => {\n        const value = this.state.value;\n\n        const color = tinycolor(value);\n        const normalizedColor = '#' + color.toHex();\n\n        if (color.isValid()) {\n            this.props.onChange(normalizedColor);\n\n            this.setState({\n                value: normalizedColor,\n            });\n        } else {\n            this.setState({\n                value: this.props.value,\n            });\n        }\n\n        this.setState({\n            focused: false,\n        });\n    };\n\n    private onKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n        // open picker on enter or space\n        if (event.key === 'Enter' || event.key === ' ') {\n            this.togglePicker();\n        }\n    };\n\n    public render() {\n        const {id} = this.props;\n        const {isOpened, value} = this.state;\n\n        return (\n            <div className='color-input input-group'>\n                <input\n                    id={`${id}-inputColorValue`}\n                    ref={this.colorInput}\n                    className='form-control'\n                    type='text'\n                    value={value}\n                    onChange={this.onChange}\n                    onBlur={this.onBlur}\n                    onFocus={this.onFocus}\n                    onKeyDown={this.onKeyDown}\n                    maxLength={7}\n                    disabled={this.props.isDisabled}\n\n                />\n                {!this.props.isDisabled &&\n                    <span\n                        id={`${id}-squareColorIcon`}\n                        className='input-group-addon color-pad'\n                        onClick={this.togglePicker}\n                    >\n                        <i\n                            id={`${id}-squareColorIconValue`}\n                            className='color-icon'\n                            style={{\n                                backgroundColor: value,\n                            }}\n                        />\n                    </span>\n                }\n                {isOpened && (\n                    <div\n                        ref={this.colorPicker}\n                        className='color-popover'\n                        id={`${id}-ChromePickerModal`}\n                    >\n                        <ChromePicker\n                            color={value}\n                            onChange={this.handleColorChange}\n                            disableAlpha={true}\n                        />\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Preferences} from 'mattermost-redux/constants';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nimport {AdvancedSections} from 'utils/constants';\nimport {PreferenceType} from '@mattermost/types/preferences';\n\ntype Props = {\n    activeSection?: string;\n    currentUserId: string;\n    joinLeave?: string;\n    onUpdateSection: (section?: string) => void;\n    renderOnOffLabel: (label: string) => string;\n    actions: {\n        savePreferences: (userId: string, preferences: PreferenceType[]) => void;\n    };\n}\n\ntype State = {\n    joinLeaveState?: string;\n    isSaving?: boolean;\n    serverError?: string;\n}\n\nexport default class JoinLeaveSection extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            joinLeaveState: props.joinLeave,\n        };\n    }\n\n    public handleOnChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        const value = e.currentTarget.value;\n\n        this.setState({joinLeaveState: value});\n    }\n\n    public handleUpdateSection = (section?: string): void => {\n        if (!section) {\n            this.setState({joinLeaveState: this.props.joinLeave});\n        }\n\n        this.props.onUpdateSection(section);\n    }\n\n    public handleSubmit = (): void => {\n        const {actions, currentUserId, onUpdateSection} = this.props;\n        const joinLeavePreference = {category: Preferences.CATEGORY_ADVANCED_SETTINGS, user_id: currentUserId, name: Preferences.ADVANCED_FILTER_JOIN_LEAVE, value: this.state.joinLeaveState};\n        actions.savePreferences(currentUserId, [joinLeavePreference]);\n\n        onUpdateSection();\n    }\n\n    public render(): React.ReactNode {\n        const {joinLeaveState} = this.state;\n        if (this.props.activeSection === AdvancedSections.JOIN_LEAVE) {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.joinLeaveTitle'\n                            defaultMessage='Enable Join/Leave Messages'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='joinLeaveSetting'>\n                            <legend className='form-legend hidden-label'>\n                                <FormattedMessage\n                                    id='user.settings.advance.joinLeaveTitle'\n                                    defaultMessage='Enable Join/Leave Messages'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='joinLeaveOn'\n                                        type='radio'\n                                        value={'true'}\n                                        name={AdvancedSections.JOIN_LEAVE}\n                                        checked={joinLeaveState === 'true'}\n                                        onChange={this.handleOnChange}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='joinLeaveOff'\n                                        type='radio'\n                                        value={'false'}\n                                        name={AdvancedSections.JOIN_LEAVE}\n                                        checked={joinLeaveState === 'false'}\n                                        onChange={this.handleOnChange}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='mt-5'>\n                                <FormattedMessage\n                                    id='user.settings.advance.joinLeaveDesc'\n                                    defaultMessage='When \"On\", System Messages saying a user has joined or left a channel will be visible. When \"Off\", the System Messages about joining or leaving a channel will be hidden. A message will still show up when you are added to a channel, so you can receive a notification.'\n                                />\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={AdvancedSections.JOIN_LEAVE}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.advance.joinLeaveTitle'\n                        defaultMessage='Enable Join/Leave Messages'\n                    />\n                }\n                describe={this.props.renderOnOffLabel(joinLeaveState!)}\n                section={AdvancedSections.JOIN_LEAVE}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators, Dispatch} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {GlobalState} from 'types/store/index.js';\n\nimport {GenericAction} from 'mattermost-redux/types/actions.js';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {get as getPreference} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport JoinLeaveSection from './join_leave_section';\n\nfunction mapStateToProps(state: GlobalState) {\n    const joinLeave = getPreference(\n        state,\n        Preferences.CATEGORY_ADVANCED_SETTINGS,\n        Preferences.ADVANCED_FILTER_JOIN_LEAVE,\n        'true',\n    );\n\n    return {\n        currentUserId: getCurrentUserId(state),\n        joinLeave,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(JoinLeaveSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback, useState} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Preferences} from 'mattermost-redux/constants';\n\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\n\nimport {AdvancedSections} from 'utils/constants';\n\nimport type {PropsFromRedux} from './index';\n\ntype Props = PropsFromRedux & {\n    activeSection?: string;\n    onUpdateSection: (section?: string) => void;\n};\n\nexport default function PerformanceDebuggingSection(props: Props) {\n    if (!props.performanceDebuggingEnabled) {\n        return null;\n    }\n\n    let settings;\n    if (props.activeSection === AdvancedSections.PERFORMANCE_DEBUGGING) {\n        settings = <PerformanceDebuggingSectionExpanded {...props}/>;\n    } else {\n        settings = <PerformanceDebuggingSectionCollapsed {...props}/>;\n    }\n\n    return (\n        <>\n            {settings}\n            <div className='divider-light'/>\n        </>\n    );\n}\n\nfunction PerformanceDebuggingSectionCollapsed(props: Props) {\n    let settingsEnabled = 0;\n\n    if (props.disableClientPlugins) {\n        settingsEnabled += 1;\n    }\n    if (props.disableTelemetry) {\n        settingsEnabled += 1;\n    }\n    if (props.disableTypingMessages) {\n        settingsEnabled += 1;\n    }\n\n    let description;\n    if (settingsEnabled === 0) {\n        description = (\n            <FormattedMessage\n                id='user.settings.advance.performance.noneEnabled'\n                defaultMessage='No settings enabled'\n            />\n        );\n    } else {\n        description = (\n            <FormattedMessage\n                id='user.settings.advance.performance.settingsEnabled'\n                defaultMessage='{count, number} {count, plural, one {setting} other {settings}} enabled'\n                values={{count: settingsEnabled}}\n            />\n        );\n    }\n\n    return (\n        <SettingItemMin\n            title={\n                <FormattedMessage\n                    id='user.settings.advance.performance.title'\n                    defaultMessage='Performance Debugging'\n                />\n            }\n            describe={description}\n            section={AdvancedSections.PERFORMANCE_DEBUGGING}\n            updateSection={props.onUpdateSection}\n        />\n    );\n}\n\nfunction PerformanceDebuggingSectionExpanded(props: Props) {\n    const [disableClientPlugins, setDisableClientPlugins] = useState(props.disableClientPlugins);\n    const [disableTelemetry, setDisableTelemetry] = useState(props.disableTelemetry);\n    const [disableTypingMessages, setDisableTypingMessages] = useState(props.disableTypingMessages);\n\n    const handleSubmit = useCallback(() => {\n        const preferences = [];\n\n        if (disableClientPlugins !== props.disableClientPlugins) {\n            preferences.push({\n                user_id: props.currentUserId,\n                category: Preferences.CATEGORY_PERFORMANCE_DEBUGGING,\n                name: Preferences.NAME_DISABLE_CLIENT_PLUGINS,\n                value: disableClientPlugins.toString(),\n            });\n        }\n        if (disableTelemetry !== props.disableTelemetry) {\n            preferences.push({\n                user_id: props.currentUserId,\n                category: Preferences.CATEGORY_PERFORMANCE_DEBUGGING,\n                name: Preferences.NAME_DISABLE_TELEMETRY,\n                value: disableTelemetry.toString(),\n            });\n        }\n        if (disableTypingMessages !== props.disableTypingMessages) {\n            preferences.push({\n                user_id: props.currentUserId,\n                category: Preferences.CATEGORY_PERFORMANCE_DEBUGGING,\n                name: Preferences.NAME_DISABLE_TYPING_MESSAGES,\n                value: disableTypingMessages.toString(),\n            });\n        }\n\n        if (preferences.length !== 0) {\n            props.savePreferences(props.currentUserId, preferences);\n        }\n\n        props.onUpdateSection('');\n    }, [\n        props.currentUserId,\n        props.onUpdateSection,\n        props.savePreferences,\n        disableClientPlugins,\n        disableTelemetry,\n        disableTypingMessages,\n    ]);\n\n    return (\n        <SettingItemMax\n            title={\n                <FormattedMessage\n                    id='user.settings.advance.performance.title'\n                    defaultMessage='Performance Debugging'\n                />\n            }\n            inputs={[\n                <fieldset key='settings'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                type='checkbox'\n                                checked={disableClientPlugins}\n                                onChange={(e) => {\n                                    setDisableClientPlugins(e.target.checked);\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.performance.disableClientPlugins'\n                                defaultMessage='Disable Client-side Plugins'\n                            />\n                        </label>\n                    </div>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                type='checkbox'\n                                checked={disableTelemetry}\n                                onChange={(e) => {\n                                    setDisableTelemetry(e.target.checked);\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.performance.disableTelemetry'\n                                defaultMessage='Disable telemetry events sent from the client'\n                            />\n                        </label>\n                    </div>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                type='checkbox'\n                                checked={disableTypingMessages}\n                                onChange={(e) => {\n                                    setDisableTypingMessages(e.target.checked);\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.performance.disableTypingMessages'\n                                defaultMessage='Disable \"User is typing...\" messages'\n                            />\n                        </label>\n                    </div>\n                    <div className='mt-5'>\n                        <FormattedMessage\n                            id='user.settings.advance.performance.info1'\n                            defaultMessage=\"You may enable these settings temporarily to help isolate performance issues while debugging. We don't recommend leaving these settings enabled for an extended period of time as they can negatively impact your user experience.\"\n                        />\n                        <br/>\n                        <br/>\n                        <FormattedMessage\n                            id='user.settings.advance.performance.info2'\n                            defaultMessage='You may need to refresh the page before these settings take effect.'\n                        />\n                    </div>\n                </fieldset>,\n            ]}\n            submit={handleSubmit}\n            updateSection={props.onUpdateSection}\n        />\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect, ConnectedProps} from 'react-redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\n\nimport {Preferences} from 'mattermost-redux/constants';\n\nimport {isPerformanceDebuggingEnabled} from 'mattermost-redux/selectors/entities/general';\nimport {getBool} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport {GlobalState} from 'types/store';\n\nimport PerformanceDebuggingSection from './performance_debugging_section';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        currentUserId: getCurrentUserId(state),\n        disableClientPlugins: getBool(state, Preferences.CATEGORY_PERFORMANCE_DEBUGGING, Preferences.NAME_DISABLE_CLIENT_PLUGINS),\n        disableTelemetry: getBool(state, Preferences.CATEGORY_PERFORMANCE_DEBUGGING, Preferences.NAME_DISABLE_TELEMETRY),\n        disableTypingMessages: getBool(state, Preferences.CATEGORY_PERFORMANCE_DEBUGGING, Preferences.NAME_DISABLE_TYPING_MESSAGES),\n        performanceDebuggingEnabled: isPerformanceDebuggingEnabled(state),\n    };\n}\n\nconst mapDispatchToProps = {\n    savePreferences,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(PerformanceDebuggingSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n/* eslint-disable react/no-string-refs */\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {emitUserLoggedOutEvent} from 'actions/global_actions';\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils';\nimport {t} from 'utils/i18n';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport ConfirmModal from 'components/confirm_modal';\nimport BackIcon from 'components/widgets/icons/fa_back_icon';\n\nimport JoinLeaveSection from './join_leave_section';\nimport PerformanceDebuggingSection from './performance_debugging_section';\n\nconst PreReleaseFeatures = Constants.PRE_RELEASE_FEATURES;\n\nexport default class AdvancedSettingsDisplay extends React.PureComponent {\n    static propTypes = {\n        currentUser: PropTypes.object.isRequired,\n        advancedSettingsCategory: PropTypes.array.isRequired,\n        isAdvancedTextEditorEnabled: PropTypes.bool,\n        sendOnCtrlEnter: PropTypes.string.isRequired,\n        codeBlockOnCtrlEnter: PropTypes.bool,\n        formatting: PropTypes.string.isRequired,\n        joinLeave: PropTypes.string.isRequired,\n        updateSection: PropTypes.func,\n        activeSection: PropTypes.string,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        enablePreviewFeatures: PropTypes.bool,\n        enableUserDeactivation: PropTypes.bool,\n        actions: PropTypes.shape({\n            savePreferences: PropTypes.func.isRequired,\n            updateUserActive: PropTypes.func.isRequired,\n            revokeAllSessionsForUser: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = this.getStateFromProps();\n    }\n\n    getStateFromProps = () => {\n        const advancedSettings = this.props.advancedSettingsCategory;\n        const settings = {\n            send_on_ctrl_enter: this.props.sendOnCtrlEnter,\n            code_block_ctrl_enter: this.props.codeBlockOnCtrlEnter,\n            formatting: this.props.formatting,\n            join_leave: this.props.joinLeave,\n        };\n\n        const PreReleaseFeaturesLocal = JSON.parse(JSON.stringify(PreReleaseFeatures));\n        if (this.props.isAdvancedTextEditorEnabled) {\n            delete PreReleaseFeaturesLocal.MARKDOWN_PREVIEW;\n        }\n        const preReleaseFeaturesKeys = Object.keys(PreReleaseFeaturesLocal);\n\n        let enabledFeatures = 0;\n        for (const as of advancedSettings) {\n            for (const key of preReleaseFeaturesKeys) {\n                const feature = PreReleaseFeaturesLocal[key];\n\n                if (as.name === Constants.FeatureTogglePrefix + feature.label) {\n                    settings[as.name] = as.value;\n\n                    if (as.value === 'true') {\n                        enabledFeatures += 1;\n                    }\n                }\n            }\n        }\n\n        const isSaving = false;\n\n        const previewFeaturesEnabled = this.props.enablePreviewFeatures;\n        const showDeactivateAccountModal = false;\n\n        return {\n            preReleaseFeatures: PreReleaseFeaturesLocal,\n            settings,\n            preReleaseFeaturesKeys,\n            enabledFeatures,\n            isSaving,\n            previewFeaturesEnabled,\n            showDeactivateAccountModal,\n        };\n    }\n\n    updateSetting = (setting, value) => {\n        const settings = this.state.settings;\n        settings[setting] = value;\n        this.setState(settings);\n    }\n\n    toggleFeature = (feature, checked) => {\n        const settings = this.state.settings;\n        settings[Constants.FeatureTogglePrefix + feature] = String(checked);\n\n        let enabledFeatures = 0;\n        Object.keys(this.state.settings).forEach((setting) => {\n            if (setting.lastIndexOf(Constants.FeatureTogglePrefix) === 0 && this.state.settings[setting] === 'true') {\n                enabledFeatures++;\n            }\n        });\n\n        this.setState({settings, enabledFeatures});\n    }\n\n    saveEnabledFeatures = () => {\n        const features = [];\n        Object.keys(this.state.settings).forEach((setting) => {\n            if (setting.lastIndexOf(Constants.FeatureTogglePrefix) === 0) {\n                features.push(setting);\n            }\n        });\n\n        this.handleSubmit(features);\n    }\n\n    handleSubmit = async (settings) => {\n        const preferences = [];\n        const {actions, currentUser} = this.props;\n        const userId = currentUser.id;\n\n        // this should be refactored so we can actually be certain about what type everything is\n        (Array.isArray(settings) ? settings : [settings]).forEach((setting) => {\n            preferences.push({\n                user_id: userId,\n                category: Constants.Preferences.CATEGORY_ADVANCED_SETTINGS,\n                name: setting,\n                value: this.state.settings[setting],\n            });\n        });\n\n        this.setState({isSaving: true});\n        await actions.savePreferences(userId, preferences);\n\n        this.handleUpdateSection('');\n    }\n\n    handleDeactivateAccountSubmit = async () => {\n        const userId = this.props.currentUser.id;\n\n        this.setState({isSaving: true});\n\n        this.props.actions.updateUserActive(userId, false).\n            then(({error}) => {\n                if (error) {\n                    this.setState({serverError: error.message});\n                }\n            });\n\n        const {data, error} = await this.props.actions.revokeAllSessionsForUser(userId);\n        if (data) {\n            emitUserLoggedOutEvent();\n        } else if (error) {\n            this.setState({serverError: error.message});\n        }\n    }\n\n    handleShowDeactivateAccountModal = () => {\n        this.setState({\n            showDeactivateAccountModal: true,\n        });\n    }\n\n    handleHideDeactivateAccountModal = () => {\n        this.setState({\n            showDeactivateAccountModal: false,\n        });\n    }\n\n    handleUpdateSection = (section) => {\n        if (!section) {\n            this.setState(this.getStateFromProps());\n        }\n        this.setState({isSaving: false});\n        this.props.updateSection(section);\n    }\n\n    // This function changes ctrl to cmd when OS is mac\n    getCtrlSendText = () => {\n        const description = {\n            default: {\n                id: t('user.settings.advance.sendDesc'),\n                defaultMessage: 'When enabled, CTRL + ENTER will send the message and ENTER inserts a new line.',\n            },\n            mac: {\n                id: t('user.settings.advance.sendDesc.mac'),\n                defaultMessage: 'When enabled, ⌘ + ENTER will send the message and ENTER inserts a new line.',\n            },\n        };\n        const title = {\n            default: {\n                id: t('user.settings.advance.sendTitle'),\n                defaultMessage: 'Send Messages on CTRL+ENTER',\n            },\n            mac: {\n                id: t('user.settings.advance.sendTitle.mac'),\n                defaultMessage: 'Send Messages on ⌘+ENTER',\n            },\n        };\n        if (Utils.isMac()) {\n            return {\n                ctrlSendTitle: title.mac,\n                ctrlSendDesc: description.mac,\n            };\n        }\n        return {\n            ctrlSendTitle: title.default,\n            ctrlSendDesc: description.default,\n        };\n    }\n\n    renderOnOffLabel(enabled) {\n        if (enabled === 'false') {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.off'\n                    defaultMessage='Off'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.advance.on'\n                defaultMessage='On'\n            />\n        );\n    }\n\n    renderCtrlEnterLabel() {\n        const ctrlEnter = this.state.settings.send_on_ctrl_enter;\n        const codeBlockCtrlEnter = this.state.settings.code_block_ctrl_enter;\n        if (ctrlEnter === 'false' && codeBlockCtrlEnter === 'false') {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.off'\n                    defaultMessage='Off'\n                />\n            );\n        } else if (ctrlEnter === 'true' && codeBlockCtrlEnter === 'true') {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.onForAllMessages'\n                    defaultMessage='On for all messages'\n                />\n            );\n        }\n        return (\n            <FormattedMessage\n                id='user.settings.advance.onForCode'\n                defaultMessage='On only for code blocks starting with ```'\n            />\n        );\n    }\n\n    renderFormattingSection = () => {\n        if (this.props.activeSection === 'formatting') {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.formattingTitle'\n                            defaultMessage='Enable Post Formatting'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='formattingSetting'>\n                            <legend className='form-legend hidden-label'>\n                                <FormattedMessage\n                                    id='user.settings.advance.formattingTitle'\n                                    defaultMessage='Enable Post Formatting'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='postFormattingOn'\n                                        type='radio'\n                                        name='formatting'\n                                        checked={this.state.settings.formatting !== 'false'}\n                                        onChange={this.updateSetting.bind(this, 'formatting', 'true')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='postFormattingOff'\n                                        type='radio'\n                                        name='formatting'\n                                        checked={this.state.settings.formatting === 'false'}\n                                        onChange={this.updateSetting.bind(this, 'formatting', 'false')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='mt-5'>\n                                <FormattedMessage\n                                    id='user.settings.advance.formattingDesc'\n                                    defaultMessage='If enabled, posts will be formatted to create links, show emoji, style the text, and add line breaks. By default, this setting is enabled.'\n                                />\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={'formatting'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.advance.formattingTitle'\n                        defaultMessage='Enable Post Formatting'\n                    />\n                }\n                describe={this.renderOnOffLabel(this.state.settings.formatting)}\n                section={'formatting'}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    renderFeatureLabel(feature) {\n        switch (feature) {\n        case 'MARKDOWN_PREVIEW':\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.markdown_preview'\n                    defaultMessage='Show markdown preview option in message input box'\n                />\n            );\n        default:\n            return null;\n        }\n    }\n\n    render() {\n        const serverError = this.state.serverError || null;\n        let ctrlSendSection;\n        const {ctrlSendTitle, ctrlSendDesc} = this.getCtrlSendText();\n\n        if (this.props.activeSection === 'advancedCtrlSend') {\n            const ctrlSendActive = [\n                this.state.settings.send_on_ctrl_enter === 'true',\n                this.state.settings.send_on_ctrl_enter === 'false' && this.state.settings.code_block_ctrl_enter === 'true',\n                this.state.settings.send_on_ctrl_enter === 'false' && this.state.settings.code_block_ctrl_enter === 'false',\n            ];\n\n            const inputs = [\n                <fieldset key='ctrlSendSetting'>\n                    <legend className='form-legend hidden-label'>\n                        <FormattedMessage {...ctrlSendTitle}/>\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ctrlSendOn'\n                                type='radio'\n                                name='sendOnCtrlEnter'\n                                checked={ctrlSendActive[0]}\n                                onChange={() => {\n                                    this.updateSetting('send_on_ctrl_enter', 'true');\n                                    this.updateSetting('code_block_ctrl_enter', 'true');\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.onForAllMessages'\n                                defaultMessage='On for all messages'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ctrlSendOnForCode'\n                                type='radio'\n                                name='sendOnCtrlEnter'\n                                checked={ctrlSendActive[1]}\n                                onChange={() => {\n                                    this.updateSetting('send_on_ctrl_enter', 'false');\n                                    this.updateSetting('code_block_ctrl_enter', 'true');\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.onForCode'\n                                defaultMessage='On only for code blocks starting with ```'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ctrlSendOff'\n                                type='radio'\n                                name='sendOnCtrlEnter'\n                                checked={ctrlSendActive[2]}\n                                onChange={() => {\n                                    this.updateSetting('send_on_ctrl_enter', 'false');\n                                    this.updateSetting('code_block_ctrl_enter', 'false');\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.off'\n                                defaultMessage='Off'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div>\n                        <br/>\n                        <FormattedMessage {...ctrlSendDesc}/>\n                    </div>\n                </fieldset>,\n            ];\n            ctrlSendSection = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage {...ctrlSendTitle}/>\n                    }\n                    inputs={inputs}\n                    submit={this.handleSubmit.bind(this, ['send_on_ctrl_enter', 'code_block_ctrl_enter'])}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        } else {\n            ctrlSendSection = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage {...ctrlSendTitle}/>\n                    }\n                    describe={this.renderCtrlEnterLabel()}\n                    section={'advancedCtrlSend'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        const formattingSection = this.props.isAdvancedTextEditorEnabled ? null : this.renderFormattingSection();\n        let formattingSectionDivider = null;\n        if (formattingSection) {\n            formattingSectionDivider = <div className='divider-light'/>;\n        }\n\n        let previewFeaturesSection;\n        let previewFeaturesSectionDivider;\n        if (this.state.previewFeaturesEnabled && this.state.preReleaseFeaturesKeys.length > 0) {\n            previewFeaturesSectionDivider = (\n                <div className='divider-light'/>\n            );\n\n            if (this.props.activeSection === 'advancedPreviewFeatures') {\n                const inputs = [];\n\n                this.state.preReleaseFeaturesKeys.forEach((key) => {\n                    const feature = this.state.preReleaseFeatures[key];\n                    inputs.push(\n                        <div key={'advancedPreviewFeatures_' + feature.label}>\n                            <div className='checkbox'>\n                                <label>\n                                    <input\n                                        id={'advancedPreviewFeatures' + feature.label}\n                                        type='checkbox'\n                                        checked={this.state.settings[Constants.FeatureTogglePrefix + feature.label] === 'true'}\n                                        onChange={(e) => {\n                                            this.toggleFeature(feature.label, e.target.checked);\n                                        }}\n                                    />\n                                    {this.renderFeatureLabel(key)}\n                                </label>\n                            </div>\n                        </div>,\n                    );\n                });\n\n                inputs.push(\n                    <div key='advancedPreviewFeatures_helptext'>\n                        <br/>\n                        <FormattedMessage\n                            id='user.settings.advance.preReleaseDesc'\n                            defaultMessage=\"Check any pre-released features you'd like to preview.  You may also need to refresh the page before the setting will take effect.\"\n                        />\n                    </div>,\n                );\n                previewFeaturesSection = (\n                    <SettingItemMax\n                        title={\n                            <FormattedMessage\n                                id='user.settings.advance.preReleaseTitle'\n                                defaultMessage='Preview Pre-release Features'\n                            />\n                        }\n                        inputs={inputs}\n                        submit={this.saveEnabledFeatures}\n                        saving={this.state.isSaving}\n                        server_error={serverError}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            } else {\n                previewFeaturesSection = (\n                    <SettingItemMin\n                        title={Utils.localizeMessage('user.settings.advance.preReleaseTitle', 'Preview Pre-release Features')}\n                        describe={\n                            <FormattedMessage\n                                id='user.settings.advance.enabledFeatures'\n                                defaultMessage='{count, number} {count, plural, one {feature} other {features}} enabled'\n                                values={{count: this.state.enabledFeatures}}\n                            />\n                        }\n                        section={'advancedPreviewFeatures'}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            }\n        }\n\n        let deactivateAccountSection = '';\n        let makeConfirmationModal = '';\n        const currentUser = this.props.currentUser;\n\n        if (currentUser.auth_service === '' && this.props.enableUserDeactivation) {\n            if (this.props.activeSection === 'deactivateAccount') {\n                deactivateAccountSection = (\n                    <SettingItemMax\n                        title={\n                            <FormattedMessage\n                                id='user.settings.advance.deactivateAccountTitle'\n                                defaultMessage='Deactivate Account'\n                            />\n                        }\n                        inputs={[\n                            <div key='formattingSetting'>\n                                <div>\n                                    <br/>\n                                    <FormattedMessage\n                                        id='user.settings.advance.deactivateDesc'\n                                        defaultMessage='Deactivating your account removes your ability to log in to this server and disables all email and mobile notifications. To reactivate your account, contact your System Administrator.'\n                                    />\n                                </div>\n                            </div>,\n                        ]}\n                        saveButtonText={'Deactivate'}\n                        setting={'deactivateAccount'}\n                        submit={this.handleShowDeactivateAccountModal}\n                        saving={this.state.isSaving}\n                        server_error={this.state.serverError}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            } else {\n                deactivateAccountSection = (\n                    <SettingItemMin\n                        title={\n                            <FormattedMessage\n                                id='user.settings.advance.deactivateAccountTitle'\n                                defaultMessage='Deactivate Account'\n                            />\n                        }\n                        describe={\n                            <FormattedMessage\n                                id='user.settings.advance.deactivateDescShort'\n                                defaultMessage=\"Click 'Edit' to deactivate your account\"\n                            />\n                        }\n                        section={'deactivateAccount'}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            }\n\n            const confirmButtonClass = 'btn btn-danger';\n            const deactivateMemberButton = (\n                <FormattedMessage\n                    id='user.settings.advance.deactivate_member_modal.deactivateButton'\n                    defaultMessage='Yes, deactivate my account'\n                />\n            );\n\n            makeConfirmationModal = (\n                <ConfirmModal\n                    show={this.state.showDeactivateAccountModal}\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.confirmDeactivateAccountTitle'\n                            defaultMessage='Confirm Deactivation'\n                        />\n                    }\n                    message={\n                        <FormattedMessage\n                            id='user.settings.advance.confirmDeactivateDesc'\n                            defaultMessage='Are you sure you want to deactivate your account? This can only be reversed by your System Administrator.'\n                        />\n                    }\n                    confirmButtonClass={confirmButtonClass}\n                    confirmButtonText={deactivateMemberButton}\n                    onConfirm={this.handleDeactivateAccountSubmit}\n                    onCancel={this.handleHideDeactivateAccountModal}\n                />\n            );\n        }\n\n        return (\n            <div>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label='Close'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <span onClick={this.props.collapseModal}>\n                                <BackIcon/>\n                            </span>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.advance.title'\n                            defaultMessage='Advanced Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3 className='tab-header'>\n                        <FormattedMessage\n                            id='user.settings.advance.title'\n                            defaultMessage='Advanced Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {ctrlSendSection}\n                    {formattingSectionDivider}\n                    {formattingSection}\n                    <div className='divider-light'/>\n                    <JoinLeaveSection\n                        activeSection={this.props.activeSection}\n                        onUpdateSection={this.handleUpdateSection}\n                        renderOnOffLabel={this.renderOnOffLabel}\n                    />\n                    {previewFeaturesSectionDivider}\n                    {previewFeaturesSection}\n                    {formattingSectionDivider}\n                    <PerformanceDebuggingSection\n                        activeSection={this.props.activeSection}\n                        onUpdateSection={this.handleUpdateSection}\n                    />\n                    {deactivateAccountSection}\n                    <div className='divider-dark'/>\n                    {makeConfirmationModal}\n                </div>\n            </div>\n        );\n    }\n}\n/* eslint-enable react/no-string-refs */\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {get, getIsAdvancedTextEditorEnabled, makeGetCategory} from 'mattermost-redux/selectors/entities/preferences';\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {updateUserActive, revokeAllSessionsForUser} from 'mattermost-redux/actions/users';\n\nimport {Preferences} from 'utils/constants';\n\nimport AdvancedSettingsDisplay from './user_settings_advanced.jsx';\n\nfunction makeMapStateToProps() {\n    const getAdvancedSettingsCategory = makeGetCategory();\n\n    return (state) => {\n        const config = getConfig(state);\n\n        const enablePreviewFeatures = config.EnablePreviewFeatures === 'true';\n        const enableUserDeactivation = config.EnableUserDeactivation === 'true';\n\n        return {\n            advancedSettingsCategory: getAdvancedSettingsCategory(state, Preferences.CATEGORY_ADVANCED_SETTINGS),\n            isAdvancedTextEditorEnabled: getIsAdvancedTextEditorEnabled(state),\n            sendOnCtrlEnter: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'send_on_ctrl_enter', 'false'),\n            codeBlockOnCtrlEnter: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'code_block_ctrl_enter', 'true'),\n            formatting: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'formatting', 'true'),\n            joinLeave: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'join_leave', 'true'),\n            currentUser: getCurrentUser(state),\n            enablePreviewFeatures,\n            enableUserDeactivation,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n            updateUserActive,\n            revokeAllSessionsForUser,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(AdvancedSettingsDisplay);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage, WrappedComponentProps, injectIntl} from 'react-intl';\n\nimport {Theme} from 'mattermost-redux/types/themes';\nimport {setThemeDefaults} from 'mattermost-redux/utils/theme_utils';\n\ninterface Props extends WrappedComponentProps {\n    callback: ((args: Theme) => void) | null;\n    onExited: () => void;\n}\n\ntype State = {\n    value: string;\n    inputError: React.ReactNode | null;\n    show: boolean;\n}\n\nclass ImportThemeModal extends React.PureComponent<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            value: '',\n            inputError: null,\n            show: true,\n        };\n    }\n\n    private handleOnHide = () => {\n        this.setState({show: false});\n    }\n\n    private handleSubmit = (e: React.MouseEvent<HTMLElement>) => {\n        e.preventDefault();\n\n        const text = this.state.value;\n\n        if (!ImportThemeModal.isInputValid(text)) {\n            this.setState({\n                inputError: (\n                    <FormattedMessage\n                        id='user.settings.import_theme.submitError'\n                        defaultMessage='Invalid format, please try copying and pasting in again.'\n                    />\n                ),\n            });\n            return;\n        }\n\n        /*\n         * index mapping of slack theme format (index => slack-property name)\n         *\n         * |-------|-------------------------|-------------------------|\n         * | index | Slack theme-property    | MM theme-property       |\n         * |-------|-------------------------|-------------------------|\n         * |   0   | Column BG               | sidebarBg               |\n         * |   1   | ???                     | sidebarHeaderBg         |\n         * |   2   | Active Item BG          | sidebarTextActiveBorder |\n         * |   3   | Active Item Text        | sidebarTextActiveColor  |\n         * |   4   | Hover Item BG           | sidebarTextHoverBg      |\n         * |   5   | Text Color              | sidebarText             |\n         * |   6   | Active Presence         | onlineIndicator         |\n         * |   7   | Mention Badge           | mentionBg               |\n         * |   8   | TOP-NAV BG              | --- (desktop only)      |\n         * |   9   | TOP-NAV Text            | --- (desktop only)      |\n         * |-------|-------------------------|-------------------------|\n         *\n         * values at index 8 + 9 are only for the desktop app\n         */\n\n        const [\n            sidebarBg, // 0\n            sidebarHeaderBg, // 1\n            sidebarTextActiveBorder, // 2\n            sidebarTextActiveColor, // 3\n            sidebarTextHoverBg, // 4\n            sidebarText, // 5\n            onlineIndicator, // 6\n            mentionBg, // 7\n        ] = text.split(',');\n\n        const theme = setThemeDefaults({\n            type: 'custom',\n            sidebarBg,\n            sidebarText,\n            sidebarUnreadText: sidebarText,\n            sidebarTextHoverBg,\n            sidebarTextActiveBorder,\n            sidebarTextActiveColor,\n            sidebarHeaderBg,\n            sidebarHeaderTextColor: sidebarText,\n            onlineIndicator,\n            mentionBg,\n        });\n\n        this.props.callback?.(theme as Theme);\n\n        this.handleOnHide();\n    }\n\n    private static isInputValid(text: string) {\n        if (text.length === 0) {\n            return false;\n        }\n\n        if (text.indexOf(' ') !== -1) {\n            return false;\n        }\n\n        if (text.length > 0 && text.indexOf(',') === -1) {\n            return false;\n        }\n\n        if (text.length > 0) {\n            const colors = text.split(',');\n\n            if (colors.length !== 10) {\n                return false;\n            }\n\n            for (let i = 0; i < colors.length; i++) {\n                if (colors[i].length !== 7 && colors[i].length !== 4) {\n                    return false;\n                }\n\n                if (colors[i].charAt(0) !== '#') {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const value = e.target.value;\n        this.setState({value});\n\n        if (ImportThemeModal.isInputValid(value)) {\n            this.setState({inputError: null});\n        } else {\n            this.setState({\n                inputError: (\n                    <FormattedMessage\n                        id='user.settings.import_theme.submitError'\n                        defaultMessage='Invalid format, please try copying and pasting in again.'\n                    />\n                ),\n            });\n        }\n    }\n\n    render() {\n        return (\n            <span>\n                <Modal\n                    dialogClassName='a11y__modal'\n                    show={this.state.show}\n                    onHide={this.handleOnHide}\n                    onExited={this.props.onExited}\n                    role='dialog'\n                    aria-labelledby='importThemeModalLabel'\n                >\n                    <Modal.Header closeButton={true}>\n                        <Modal.Title\n                            componentClass='h1'\n                            id='importThemeModalLabel'\n                        >\n                            <FormattedMessage\n                                id='user.settings.import_theme.importHeader'\n                                defaultMessage='Import Slack Theme'\n                            />\n                        </Modal.Title>\n                    </Modal.Header>\n                    <form\n                        role='form'\n                        className='form-horizontal'\n                    >\n                        <Modal.Body>\n                            <p>\n                                <FormattedMessage\n                                    id='user.settings.import_theme.importBody'\n                                    defaultMessage='To import a theme, go to a Slack team and look for \"Preferences -> Themes\". Open the custom theme option, copy the theme color values and paste them here:'\n                                />\n                            </p>\n                            <div className='form-group less'>\n                                <div className='col-sm-12'>\n                                    <input\n                                        id='themeVector'\n                                        type='text'\n                                        className='form-control'\n                                        value={this.state.value}\n                                        onChange={this.handleChange}\n                                    />\n                                    <div className='input__help'>\n                                        {this.state.inputError}\n                                    </div>\n                                </div>\n                            </div>\n                        </Modal.Body>\n                        <Modal.Footer>\n                            <button\n                                id='cancelButton'\n                                type='button'\n                                className='btn btn-link'\n                                onClick={this.handleOnHide}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.import_theme.cancel'\n                                    defaultMessage='Cancel'\n                                />\n                            </button>\n                            <button\n                                id='submitButton'\n                                onClick={this.handleSubmit}\n                                type='submit'\n                                className='btn btn-primary'\n                            >\n                                <FormattedMessage\n                                    id='user.settings.import_theme.submit'\n                                    defaultMessage='Submit'\n                                />\n                            </button>\n                        </Modal.Footer>\n                    </form>\n                </Modal>\n            </span>\n        );\n    }\n}\n\nexport default injectIntl(ImportThemeModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport ColorInput from 'components/color_input';\n\ntype Props = {\n    id: string;\n    label: React.ReactNode;\n    value: string;\n    onChange?: (id: string, newColor: string) => void;\n}\n\nexport default function ColorChooser(props: Props) {\n    const handleChange = (newColor: string) => {\n        props.onChange?.(props.id, newColor);\n    };\n\n    return (\n        <React.Fragment>\n            <label className='custom-label'>{props.label}</label>\n            <ColorInput\n                id={props.id}\n                value={props.value}\n                onChange={handleChange}\n            />\n        </React.Fragment>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n/* eslint-disable react/no-string-refs */\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {defineMessages, FormattedMessage} from 'react-intl';\n\nimport {setThemeDefaults} from 'mattermost-redux/utils/theme_utils';\n\nimport {t} from 'utils/i18n';\n\nimport Constants from 'utils/constants';\n\nimport LocalizedIcon from 'components/localized_icon';\nimport OverlayTrigger from 'components/overlay_trigger';\nimport Popover from 'components/widgets/popover';\n\nimport ColorChooser from './color_chooser';\n\nconst COPY_SUCCESS_INTERVAL = 3000;\n\nconst messages = defineMessages({\n    sidebarBg: {\n        id: t('user.settings.custom_theme.sidebarBg'),\n        defaultMessage: 'Sidebar BG',\n    },\n    sidebarText: {\n        id: t('user.settings.custom_theme.sidebarText'),\n        defaultMessage: 'Sidebar Text',\n    },\n    sidebarHeaderBg: {\n        id: t('user.settings.custom_theme.sidebarHeaderBg'),\n        defaultMessage: 'Sidebar Header BG',\n    },\n    sidebarTeamBarBg: {\n        id: t('user.settings.custom_theme.sidebarTeamBarBg'),\n        defaultMessage: 'Team Sidebar BG',\n    },\n    sidebarHeaderTextColor: {\n        id: t('user.settings.custom_theme.sidebarHeaderTextColor'),\n        defaultMessage: 'Sidebar Header Text',\n    },\n    sidebarUnreadText: {\n        id: t('user.settings.custom_theme.sidebarUnreadText'),\n        defaultMessage: 'Sidebar Unread Text',\n    },\n    sidebarTextHoverBg: {\n        id: t('user.settings.custom_theme.sidebarTextHoverBg'),\n        defaultMessage: 'Sidebar Text Hover BG',\n    },\n    sidebarTextActiveBorder: {\n        id: t('user.settings.custom_theme.sidebarTextActiveBorder'),\n        defaultMessage: 'Sidebar Text Active Border',\n    },\n    sidebarTextActiveColor: {\n        id: t('user.settings.custom_theme.sidebarTextActiveColor'),\n        defaultMessage: 'Sidebar Text Active Color',\n    },\n    onlineIndicator: {\n        id: t('user.settings.custom_theme.onlineIndicator'),\n        defaultMessage: 'Online Indicator',\n    },\n    awayIndicator: {\n        id: t('user.settings.custom_theme.awayIndicator'),\n        defaultMessage: 'Away Indicator',\n    },\n    dndIndicator: {\n        id: t('user.settings.custom_theme.dndIndicator'),\n        defaultMessage: 'Do Not Disturb Indicator',\n    },\n    mentionBg: {\n        id: t('user.settings.custom_theme.mentionBg'),\n        defaultMessage: 'Mention Jewel BG',\n    },\n    mentionColor: {\n        id: t('user.settings.custom_theme.mentionColor'),\n        defaultMessage: 'Mention Jewel Text',\n    },\n    centerChannelBg: {\n        id: t('user.settings.custom_theme.centerChannelBg'),\n        defaultMessage: 'Center Channel BG',\n    },\n    centerChannelColor: {\n        id: t('user.settings.custom_theme.centerChannelColor'),\n        defaultMessage: 'Center Channel Text',\n    },\n    newMessageSeparator: {\n        id: t('user.settings.custom_theme.newMessageSeparator'),\n        defaultMessage: 'New Message Separator',\n    },\n    linkColor: {\n        id: t('user.settings.custom_theme.linkColor'),\n        defaultMessage: 'Link Color',\n    },\n    buttonBg: {\n        id: t('user.settings.custom_theme.buttonBg'),\n        defaultMessage: 'Button BG',\n    },\n    buttonColor: {\n        id: t('user.settings.custom_theme.buttonColor'),\n        defaultMessage: 'Button Text',\n    },\n    errorTextColor: {\n        id: t('user.settings.custom_theme.errorTextColor'),\n        defaultMessage: 'Error Text Color',\n    },\n    mentionHighlightBg: {\n        id: t('user.settings.custom_theme.mentionHighlightBg'),\n        defaultMessage: 'Mention Highlight BG',\n    },\n    mentionHighlightLink: {\n        id: t('user.settings.custom_theme.mentionHighlightLink'),\n        defaultMessage: 'Mention Highlight Link',\n    },\n    codeTheme: {\n        id: t('user.settings.custom_theme.codeTheme'),\n        defaultMessage: 'Code Theme',\n    },\n});\n\nexport default class CustomThemeChooser extends React.PureComponent {\n    static propTypes = {\n        theme: PropTypes.object.isRequired,\n        updateTheme: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        const copyTheme = this.setCopyTheme(this.props.theme);\n\n        this.state = {\n            copyTheme,\n        };\n    }\n\n    handleColorChange = (settingId, color) => {\n        const {updateTheme, theme} = this.props;\n        if (theme[settingId] !== color) {\n            const newTheme = {\n                ...theme,\n                type: 'custom',\n                [settingId]: color,\n            };\n\n            // For backwards compatability\n            if (settingId === 'mentionBg') {\n                newTheme.mentionBj = color;\n            }\n\n            updateTheme(newTheme);\n\n            const copyTheme = this.setCopyTheme(newTheme);\n\n            this.setState({\n                copyTheme,\n            });\n        }\n    }\n\n    setCopyTheme(theme) {\n        const copyTheme = Object.assign({}, theme);\n        delete copyTheme.type;\n        delete copyTheme.image;\n\n        return JSON.stringify(copyTheme);\n    }\n\n    pasteBoxChange = (e) => {\n        let text = '';\n\n        if (window.clipboardData && window.clipboardData.getData) { // IE\n            text = window.clipboardData.getData('Text');\n        } else {\n            text = e.clipboardData.getData('Text');//e.clipboardData.getData('text/plain');\n        }\n\n        if (text.length === 0) {\n            return;\n        }\n\n        let theme;\n        try {\n            theme = JSON.parse(text);\n        } catch (err) {\n            return;\n        }\n\n        theme = setThemeDefaults(theme);\n\n        this.setState({\n            copyTheme: JSON.stringify(theme),\n        });\n\n        theme.type = 'custom';\n        this.props.updateTheme(theme);\n    }\n\n    onChangeHandle = (e) => {\n        e.stopPropagation();\n    }\n\n    selectTheme = () => {\n        const textarea = this.refs.textarea;\n        textarea.focus();\n        textarea.setSelectionRange(0, this.state.copyTheme.length);\n    }\n\n    toggleSidebarStyles = (e) => {\n        e.preventDefault();\n\n        this.refs.sidebarStylesHeader.classList.toggle('open');\n        this.toggleSection(this.refs.sidebarStyles);\n    }\n\n    toggleCenterChannelStyles = (e) => {\n        e.preventDefault();\n\n        this.refs.centerChannelStylesHeader.classList.toggle('open');\n        this.toggleSection(this.refs.centerChannelStyles);\n    }\n\n    toggleLinkAndButtonStyles = (e) => {\n        e.preventDefault();\n\n        this.refs.linkAndButtonStylesHeader.classList.toggle('open');\n        this.toggleSection(this.refs.linkAndButtonStyles);\n    }\n\n    toggleSection(node) {\n        node.classList.toggle('open');\n\n        // set overflow after animation, so the colorchooser is fully shown\n        node.ontransitionend = () => {\n            if (node.classList.contains('open')) {\n                node.style.overflowY = 'inherit';\n            } else {\n                node.style.overflowY = 'hidden';\n            }\n        };\n    }\n\n    onCodeThemeChange = (e) => {\n        const theme = {\n            ...this.props.theme,\n            type: 'custom',\n            codeTheme: e.target.value,\n        };\n\n        this.props.updateTheme(theme);\n    }\n\n    copyTheme = () => {\n        this.selectTheme();\n        document.execCommand('copy');\n        this.showCopySuccess();\n    }\n\n    showCopySuccess = () => {\n        const copySuccess = document.querySelector('.copy-theme-success');\n        copySuccess.style.display = 'inline-block';\n\n        setTimeout(() => {\n            copySuccess.style.display = 'none';\n        }, COPY_SUCCESS_INTERVAL);\n    }\n\n    render() {\n        const theme = this.props.theme;\n\n        const sidebarElements = [];\n        const centerChannelElements = [];\n        const linkAndButtonElements = [];\n        Constants.THEME_ELEMENTS.forEach((element, index) => {\n            if (element.id === 'codeTheme') {\n                const codeThemeOptions = [];\n                let codeThemeURL = '';\n\n                element.themes.forEach((codeTheme, codeThemeIndex) => {\n                    if (codeTheme.id === theme[element.id]) {\n                        codeThemeURL = codeTheme.iconURL;\n                    }\n                    codeThemeOptions.push(\n                        <option\n                            key={'code-theme-key' + codeThemeIndex}\n                            value={codeTheme.id}\n                        >\n                            {codeTheme.uiName}\n                        </option>,\n                    );\n                });\n\n                var popoverContent = (\n                    <Popover\n                        popoverStyle='info'\n                        id='code-popover'\n                        className='code-popover'\n                    >\n                        <img\n                            width='200'\n                            alt={'code theme image'}\n                            src={codeThemeURL}\n                        />\n                    </Popover>\n                );\n\n                centerChannelElements.push(\n                    <div\n                        className='col-sm-6 form-group'\n                        key={'custom-theme-key' + index}\n                    >\n                        <label className='custom-label'>\n                            <FormattedMessage {...messages[element.id]}/>\n                        </label>\n                        <div\n                            className='input-group theme-group group--code dropdown'\n                            id={element.id}\n                        >\n                            <select\n                                id='codeThemeSelect'\n                                className='form-control'\n                                type='text'\n                                defaultValue={theme[element.id]}\n                                onChange={this.onCodeThemeChange}\n                            >\n                                {codeThemeOptions}\n                            </select>\n                            <OverlayTrigger\n                                placement='top'\n                                overlay={popoverContent}\n                                ref='headerOverlay'\n                            >\n                                <span className='input-group-addon'>\n                                    <img\n                                        alt={'code theme image'}\n                                        src={codeThemeURL}\n                                    />\n                                </span>\n                            </OverlayTrigger>\n                        </div>\n                    </div>,\n                );\n            } else if (element.group === 'centerChannelElements') {\n                centerChannelElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={<FormattedMessage {...messages[element.id]}/>}\n                            value={theme[element.id]}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>,\n                );\n            } else if (element.group === 'sidebarElements') {\n                // Need to support old typo mentionBj element for mentionBg\n                let color = theme[element.id];\n                if (!color && element.id === 'mentionBg') {\n                    color = theme.mentionBj;\n                }\n\n                sidebarElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={<FormattedMessage {...messages[element.id]}/>}\n                            value={color}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>,\n                );\n            } else {\n                linkAndButtonElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={<FormattedMessage {...messages[element.id]}/>}\n                            value={theme[element.id]}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>,\n                );\n            }\n        });\n\n        const pasteBox = (\n            <div className='col-sm-12'>\n                <label className='custom-label'>\n                    <FormattedMessage\n                        id='user.settings.custom_theme.copyPaste'\n                        defaultMessage='Copy to share or paste theme colors here:'\n                    />\n                </label>\n                <textarea\n                    ref='textarea'\n                    className='form-control'\n                    id='pasteBox'\n                    value={this.state.copyTheme}\n                    onCopy={this.showCopySuccess}\n                    onPaste={this.pasteBoxChange}\n                    onChange={this.onChangeHandle}\n                    onClick={this.selectTheme}\n                />\n                <div className='mt-3'>\n                    <button\n                        className='btn btn-link copy-theme-button'\n                        onClick={this.copyTheme}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.copyThemeColors'\n                            defaultMessage='Copy Theme Colors'\n                        />\n                    </button>\n                    <span\n                        className='alert alert-success copy-theme-success'\n                        role='alert'\n                        style={{display: 'none'}}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.copied'\n                            defaultMessage='✔ Copied'\n                        />\n                    </span>\n                </div>\n            </div>\n        );\n\n        return (\n            <div className='appearance-section pt-2'>\n                <div className='theme-elements row'>\n                    <div\n                        ref='sidebarStylesHeader'\n                        id='sidebarStyles'\n                        className='theme-elements__header'\n                        onClick={this.toggleSidebarStyles}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.sidebarTitle'\n                            defaultMessage='Sidebar Styles'\n                        />\n                        <div className='header__icon'>\n                            <LocalizedIcon\n                                className='fa fa-plus'\n                                title={{id: t('generic_icons.expand'), defaultMessage: 'Expand Icon'}}\n                            />\n                            <LocalizedIcon\n                                className='fa fa-minus'\n                                title={{id: t('generic_icons.collapse'), defaultMessage: 'Collapse Icon'}}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        ref='sidebarStyles'\n                        className='theme-elements__body'\n                    >\n                        {sidebarElements}\n                    </div>\n                </div>\n                <div className='theme-elements row'>\n                    <div\n                        ref='centerChannelStylesHeader'\n                        id='centerChannelStyles'\n                        className='theme-elements__header'\n                        onClick={this.toggleCenterChannelStyles}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.centerChannelTitle'\n                            defaultMessage='Center Channel Styles'\n                        />\n                        <div className='header__icon'>\n                            <LocalizedIcon\n                                className='fa fa-plus'\n                                title={{id: t('generic_icons.expand'), defaultMessage: 'Expand Icon'}}\n                            />\n                            <LocalizedIcon\n                                className='fa fa-minus'\n                                title={{id: t('generic_icons.collapse'), defaultMessage: 'Collapse Icon'}}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        ref='centerChannelStyles'\n                        id='centerChannelStyles'\n                        className='theme-elements__body'\n                    >\n                        {centerChannelElements}\n                    </div>\n                </div>\n                <div className='theme-elements row'>\n                    <div\n                        ref='linkAndButtonStylesHeader'\n                        id='linkAndButtonsStyles'\n                        className='theme-elements__header'\n                        onClick={this.toggleLinkAndButtonStyles}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.linkButtonTitle'\n                            defaultMessage='Link and Button Styles'\n                        />\n                        <div className='header__icon'>\n                            <LocalizedIcon\n                                className='fa fa-plus'\n                                title={{id: t('generic_icons.expand'), defaultMessage: 'Expand Icon'}}\n                            />\n                            <LocalizedIcon\n                                className='fa fa-minus'\n                                title={{id: t('generic_icons.collapse'), defaultMessage: 'Collapse Icon'}}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        ref='linkAndButtonStyles'\n                        className='theme-elements__body'\n                    >\n                        {linkAndButtonElements}\n                    </div>\n                </div>\n                <div className='row mt-3'>\n                    {pasteBox}\n                </div>\n            </div>\n        );\n    }\n}\n/* eslint-enable react/no-string-refs */\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\n/* eslint-disable react/jsx-max-props-per-line */\n\nimport React from 'react';\n\ntype ThemeThumbnailProps = {\n    themeName: string;\n    themeKey: string;\n    sidebarBg: string;\n    sidebarText: string;\n    sidebarUnreadText: string;\n    onlineIndicator: string;\n    awayIndicator: string;\n    dndIndicator: string;\n    centerChannelColor: string;\n    centerChannelBg: string;\n    newMessageSeparator: string;\n    buttonBg: string;\n}\n\nfunction ThemeThumbnail({\n    themeName,\n    themeKey,\n    sidebarBg = '#174AB5',\n    sidebarText = '#86A1D9',\n    sidebarUnreadText = 'white',\n    onlineIndicator = '#3DB887',\n    awayIndicator = '#FFBC1F',\n    dndIndicator = '#D24B4E',\n    centerChannelColor = '#E0E1E3',\n    centerChannelBg = 'white',\n    newMessageSeparator = '#1C58D9',\n    buttonBg = '#15B7B7',\n}: ThemeThumbnailProps): JSX.Element {\n    return (\n        <svg width='112' height='86' viewBox='0 0 112 86' fill='none' xmlns='http://www.w3.org/2000/svg' aria-labelledby={`${themeKey}-theme-icon`} role='img'>\n            <title id={`${themeKey}-theme-icon`}>{`${themeName} theme icon`}</title>\n            <rect style={{fill: centerChannelBg}} x='0' y='0' width='112' height='86'/>\n            <g>\n                <rect style={{fill: centerChannelBg}} x='50' y='-1' width='63' height='88'/>\n                <g>\n                    <rect style={{fill: centerChannelColor}} x='55' y='75' width='52' height='6' rx='3'/>\n                    <rect style={{fill: centerChannelBg}} x='56' y='76' width='50' height='4' rx='2'/>\n                </g>\n                <rect style={{fill: buttonBg}} x='71' y='65' width='22' height='5' rx='2.5'/>\n                <rect style={{fill: newMessageSeparator}} x='50' y='32' width='62' height='1'/>\n                <g style={{fill: centerChannelColor}}>\n                    <rect x='55' y='5' width='52' height='4' rx='2'/>\n                    <rect x='55' y='14' width='52' height='4' rx='2'/>\n                    <rect x='55' y='23' width='52' height='4' rx='2'/>\n                    <rect x='55' y='38' width='52' height='4' rx='2'/>\n                    <rect x='55' y='47' width='52' height='4' rx='2'/>\n                    <rect x='55' y='56' width='52' height='4' rx='2'/>\n                </g>\n            </g>\n            <g>\n                <rect style={{fill: sidebarBg}} x='-1' y='-1' width='51' height='88'/>\n                <g style={{fill: sidebarText}}>\n                    <circle cx='7' cy='61' r='2'/>\n                    <circle cx='7' cy='70' r='2'/>\n                    <circle cx='7' cy='43' r='2'/>\n                    <circle cx='7' cy='34' r='2'/>\n                    <circle cx='7' cy='16' r='2'/>\n                    <circle cx='7' cy='7' r='2'/>\n                    <rect x='11' y='5' width='28' height='4' rx='2'/>\n                    <rect x='11' y='14' width='28' height='4' rx='2'/>\n                    <rect x='11' y='32' width='28' height='4' rx='2'/>\n                    <rect x='11' y='41' width='28' height='4' rx='2'/>\n                    <rect x='11' y='50' width='28' height='4' rx='2'/>\n                    <rect x='11' y='59' width='28' height='4' rx='2'/>\n                    <rect x='11' y='68' width='28' height='4' rx='2'/>\n                    <rect x='11' y='77' width='28' height='4' rx='2'/>\n                </g>\n                <circle style={{fill: dndIndicator}} cx='7' cy='79' r='2'/>\n                <circle style={{fill: awayIndicator}} cx='7' cy='52' r='2'/>\n                <circle style={{fill: onlineIndicator}} cx='7' cy='25' r='2'/>\n                <g style={{fill: sidebarUnreadText}}>\n                    <circle cx='43' cy='25' r='2'/>\n                    <rect x='11' y='23' width='28' height='4' rx='2'/>\n                </g>\n            </g>\n        </svg>\n    );\n}\n\nexport default ThemeThumbnail;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {Preferences} from 'mattermost-redux/constants';\nimport * as Utils from 'utils/utils';\nimport {changeOpacity} from 'mattermost-redux/utils/theme_utils';\n\nimport ThemeThumbnail from '../theme_thumbnail';\n\nexport default class PremadeThemeChooser extends React.PureComponent {\n    render() {\n        const theme = this.props.theme;\n\n        const premadeThemes = [];\n        const allowedThemes = this.props.allowedThemes;\n        const hasAllowedThemes = allowedThemes.length > 1 || (allowedThemes[0] && allowedThemes[0].trim().length > 0);\n\n        for (const k in Preferences.THEMES) {\n            if (Preferences.THEMES.hasOwnProperty(k)) {\n                if (hasAllowedThemes && allowedThemes.indexOf(k) < 0) {\n                    continue;\n                }\n\n                const premadeTheme = Object.assign({}, Preferences.THEMES[k]);\n\n                let activeClass = '';\n                if (premadeTheme.type === theme.type) {\n                    activeClass = 'active';\n                }\n\n                premadeThemes.push(\n                    <div\n                        className='col-xs-6 col-sm-3 premade-themes'\n                        key={'premade-theme-key' + k}\n                    >\n                        <div\n                            id={`premadeTheme${premadeTheme.type.replace(' ', '')}`}\n                            className={activeClass}\n                            onClick={() => this.props.updateTheme(premadeTheme)}\n                        >\n                            <label>\n                                <ThemeThumbnail\n                                    themeKey={k}\n                                    themeName={premadeTheme.type}\n                                    sidebarBg={premadeTheme.sidebarBg}\n                                    sidebarText={changeOpacity(premadeTheme.sidebarText, 0.48)}\n                                    sidebarUnreadText={premadeTheme.sidebarUnreadText}\n                                    onlineIndicator={premadeTheme.onlineIndicator}\n                                    awayIndicator={premadeTheme.awayIndicator}\n                                    dndIndicator={premadeTheme.dndIndicator}\n                                    centerChannelColor={changeOpacity(premadeTheme.centerChannelColor, 0.16)}\n                                    centerChannelBg={premadeTheme.centerChannelBg}\n                                    newMessageSeparator={premadeTheme.newMessageSeparator}\n                                    buttonBg={premadeTheme.buttonBg}\n                                />\n                                <div className='theme-label'>{Utils.toTitleCase(premadeTheme.type)}</div>\n                            </label>\n                        </div>\n                    </div>,\n                );\n            }\n        }\n\n        return (\n            <div className='row appearance-section'>\n                <div className='clearfix'>\n                    {premadeThemes}\n                </div>\n            </div>\n        );\n    }\n}\n\nPremadeThemeChooser.propTypes = {\n    theme: PropTypes.object.isRequired,\n    updateTheme: PropTypes.func.isRequired,\n    allowedThemes: PropTypes.arrayOf(PropTypes.string),\n};\n\nPremadeThemeChooser.defaultProps = {\n    allowedThemes: [],\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport PremadeThemeChooser from './premade_theme_chooser.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const allowedThemes = (config.AllowedThemes && config.AllowedThemes.split(',')) || [];\n\n    return {\n        allowedThemes,\n    };\n}\n\nexport default connect(mapStateToProps)(PremadeThemeChooser);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\n\nimport React from 'react';\n\nimport {FormattedMessage} from 'react-intl';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport ImportThemeModal from 'components/user_settings/import_theme_modal.tsx';\n\nimport {Constants, ModalIdentifiers} from 'utils/constants';\nimport * as Utils from 'utils/utils';\n\nimport CustomThemeChooser from './custom_theme_chooser.jsx';\nimport PremadeThemeChooser from './premade_theme_chooser';\nexport default class ThemeSetting extends React.PureComponent {\n    static propTypes = {\n        actions: PropTypes.shape({\n            saveTheme: PropTypes.func.isRequired,\n            deleteTeamSpecificThemes: PropTypes.func.isRequired,\n            openModal: PropTypes.func.isRequired,\n        }).isRequired,\n        currentTeamId: PropTypes.string.isRequired,\n        theme: PropTypes.object,\n        selected: PropTypes.bool.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        setRequireConfirm: PropTypes.func.isRequired,\n        setEnforceFocus: PropTypes.func.isRequired,\n        allowCustomThemes: PropTypes.bool,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            ...this.getStateFromProps(props),\n            isSaving: false,\n        };\n\n        this.originalTheme = Object.assign({}, this.state.theme);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.selected && !this.props.selected) {\n            this.resetFields();\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.props.selected) {\n            Utils.applyTheme(this.props.theme);\n        }\n    }\n\n    getStateFromProps(props = this.props) {\n        const theme = {...props.theme};\n        if (!theme.codeTheme) {\n            theme.codeTheme = Constants.DEFAULT_CODE_THEME;\n        }\n\n        return {\n            theme,\n            type: theme.type || 'premade',\n            showAllTeamsCheckbox: props.showAllTeamsCheckbox,\n            applyToAllTeams: props.applyToAllTeams,\n        };\n    }\n\n    submitTheme = async () => {\n        const teamId = this.state.applyToAllTeams ? '' : this.props.currentTeamId;\n\n        this.setState({isSaving: true});\n\n        await this.props.actions.saveTheme(teamId, this.state.theme);\n\n        if (this.state.applyToAllTeams) {\n            await this.props.actions.deleteTeamSpecificThemes();\n        }\n\n        this.props.setRequireConfirm(false);\n        this.originalTheme = Object.assign({}, this.state.theme);\n        this.props.updateSection('');\n        this.setState({isSaving: false});\n    };\n\n    updateTheme = (theme) => {\n        let themeChanged = this.state.theme.length === theme.length;\n        if (!themeChanged) {\n            for (const field in theme) {\n                if (theme.hasOwnProperty(field)) {\n                    if (this.state.theme[field] !== theme[field]) {\n                        themeChanged = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        this.props.setRequireConfirm(themeChanged);\n\n        this.setState({theme});\n        Utils.applyTheme(theme);\n    };\n\n    updateType(type) {\n        this.setState({type});\n    }\n\n    resetFields = () => {\n        const state = this.getStateFromProps();\n        state.serverError = null;\n        this.setState(state);\n\n        Utils.applyTheme(state.theme);\n\n        this.props.setRequireConfirm(false);\n    };\n\n    handleImportModal = () => {\n        this.props.actions.openModal({\n            modalId: ModalIdentifiers.IMPORT_THEME_MODAL,\n            dialogType: ImportThemeModal,\n            dialogProps: {\n                callback: this.updateTheme,\n            },\n        });\n\n        this.props.setEnforceFocus(false);\n    };\n\n    handleUpdateSection = (section) => {\n        this.props.updateSection(section);\n    };\n\n    render() {\n        let serverError;\n        if (this.state.serverError) {\n            serverError = this.state.serverError;\n        }\n\n        const displayCustom = this.state.type === 'custom';\n\n        let custom;\n        let premade;\n        if (displayCustom && this.props.allowCustomThemes) {\n            custom = (\n                <div key='customThemeChooser'>\n                    <CustomThemeChooser\n                        theme={this.state.theme}\n                        updateTheme={this.updateTheme}\n                    />\n                </div>\n            );\n        } else {\n            premade = (\n                <div key='premadeThemeChooser'>\n                    <br/>\n                    <PremadeThemeChooser\n                        theme={this.state.theme}\n                        updateTheme={this.updateTheme}\n                    />\n                </div>\n            );\n        }\n\n        let themeUI;\n        if (this.props.selected) {\n            const inputs = [];\n\n            if (this.props.allowCustomThemes) {\n                inputs.push(\n                    <div\n                        className='radio'\n                        key='premadeThemeColorLabel'\n                    >\n                        <label>\n                            <input\n                                id='standardThemes'\n                                type='radio'\n                                name='theme'\n                                checked={!displayCustom}\n                                onChange={this.updateType.bind(this, 'premade')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.themeColors'\n                                defaultMessage='Theme Colors'\n                            />\n                        </label>\n                        <br/>\n                    </div>,\n                );\n            }\n\n            inputs.push(premade);\n\n            if (this.props.allowCustomThemes) {\n                inputs.push(\n                    <div\n                        className='radio'\n                        key='customThemeColorLabel'\n                    >\n                        <label>\n                            <input\n                                id='customThemes'\n                                type='radio'\n                                name='theme'\n                                checked={displayCustom}\n                                onChange={this.updateType.bind(this, 'custom')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.customTheme'\n                                defaultMessage='Custom Theme'\n                            />\n                        </label>\n                    </div>,\n                );\n\n                inputs.push(custom);\n\n                inputs.push(\n                    <div key='otherThemes'>\n                        <br/>\n                        <a\n                            id='otherThemes'\n                            href='http://docs.mattermost.com/help/settings/theme-colors.html#custom-theme-examples'\n                            target='_blank'\n                            rel='noopener noreferrer'\n                        >\n                            <FormattedMessage\n                                id='user.settings.display.theme.otherThemes'\n                                defaultMessage='See other themes'\n                            />\n                        </a>\n                    </div>,\n                );\n\n                inputs.push(\n                    <div\n                        key='importSlackThemeButton'\n                        className='pt-2'\n                    >\n                        <button\n                            id='slackImportTheme'\n                            className='theme style--none color--link'\n                            onClick={this.handleImportModal}\n                        >\n                            <FormattedMessage\n                                id='user.settings.display.theme.import'\n                                defaultMessage='Import theme colors from Slack'\n                            />\n                        </button>\n                    </div>,\n                );\n            }\n\n            let allTeamsCheckbox = null;\n            if (this.state.showAllTeamsCheckbox) {\n                allTeamsCheckbox = (\n                    <div className='checkbox user-settings__submit-checkbox'>\n                        <label>\n                            <input\n                                id='applyThemeToAllTeams'\n                                type='checkbox'\n                                checked={this.state.applyToAllTeams}\n                                onChange={(e) => this.setState({applyToAllTeams: e.target.checked})}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.applyToAllTeams'\n                                defaultMessage='Apply new theme to all my teams'\n                            />\n                        </label>\n                    </div>\n                );\n            }\n\n            themeUI = (\n                <SettingItemMax\n                    inputs={inputs}\n                    submitExtra={allTeamsCheckbox}\n                    submit={this.submitTheme}\n                    disableEnterSubmit={true}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    width='full'\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        } else {\n            themeUI = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.display.theme.title'\n                            defaultMessage='Theme'\n                        />\n                    }\n                    describe={\n                        <FormattedMessage\n                            id='user.settings.display.theme.describe'\n                            defaultMessage='Open to manage your theme'\n                        />\n                    }\n                    section={'theme'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        return themeUI;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getTheme, makeGetCategory} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentTeamId, getMyTeamsCount} from 'mattermost-redux/selectors/entities/teams';\n\nimport {saveTheme, deleteTeamSpecificThemes} from 'mattermost-redux/actions/preferences';\nimport {openModal} from 'actions/views/modals';\n\nimport {Preferences} from 'utils/constants';\n\nimport UserSettingsTheme from './user_settings_theme.jsx';\n\nfunction makeMapStateToProps() {\n    const getThemeCategory = makeGetCategory();\n\n    return (state) => {\n        return {\n            currentTeamId: getCurrentTeamId(state),\n            theme: getTheme(state),\n            applyToAllTeams: getThemeCategory(state, Preferences.CATEGORY_THEME).length <= 1,\n            showAllTeamsCheckbox: getMyTeamsCount(state) > 1,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            saveTheme,\n            deleteTeamSpecificThemes,\n            openModal,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(UserSettingsTheme);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport ReactSelect, {ValueType} from 'react-select';\nimport {Timezone} from 'timezones.json';\n\nimport {UserProfile} from '@mattermost/types/users';\nimport {ActionResult} from 'mattermost-redux/types/actions';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport {getBrowserTimezone} from 'utils/timezone';\nimport {getTimezoneLabel} from 'mattermost-redux/utils/timezone_utils';\n\ntype Actions = {\n    updateMe: (user: UserProfile) => Promise<ActionResult>;\n}\n\ntype Props = {\n    user: UserProfile;\n    updateSection: (section: string) => void;\n    useAutomaticTimezone: boolean;\n    automaticTimezone: string;\n    manualTimezone: string;\n    timezones: Timezone[];\n    timezoneLabel: string;\n    actions: Actions;\n}\ntype SelectedOption = {\n    value: string;\n    label: string;\n}\n\ntype State = {\n    useAutomaticTimezone: boolean;\n    automaticTimezone: string;\n    manualTimezone: string;\n    isSaving: boolean;\n    serverError?: string;\n    openMenu: boolean;\n    selectedOption: SelectedOption;\n}\n\nexport default class ManageTimezones extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            useAutomaticTimezone: props.useAutomaticTimezone,\n            automaticTimezone: props.automaticTimezone,\n            manualTimezone: props.manualTimezone,\n            isSaving: false,\n            openMenu: false,\n            selectedOption: {label: props.timezoneLabel, value: props.useAutomaticTimezone ? props.automaticTimezone : props.manualTimezone},\n        };\n    }\n\n    onChange = (selectedOption: ValueType<SelectedOption>) => {\n        if (selectedOption && 'value' in selectedOption) {\n            this.setState({\n                manualTimezone: selectedOption.value,\n                selectedOption,\n            });\n        }\n    }\n\n    timezoneNotChanged = () => {\n        const {\n            useAutomaticTimezone,\n            automaticTimezone,\n            manualTimezone,\n        } = this.state;\n\n        const {\n            useAutomaticTimezone: oldUseAutomaticTimezone,\n            automaticTimezone: oldAutomaticTimezone,\n            manualTimezone: oldManualTimezone,\n        } = this.props;\n\n        return (\n            useAutomaticTimezone === oldUseAutomaticTimezone &&\n            automaticTimezone === oldAutomaticTimezone &&\n            manualTimezone === oldManualTimezone\n        );\n    };\n\n    changeTimezone = () => {\n        if (this.timezoneNotChanged()) {\n            this.props.updateSection('');\n            return;\n        }\n\n        this.submitUser();\n    };\n\n    submitUser = () => {\n        const {user, actions} = this.props;\n        const {useAutomaticTimezone, automaticTimezone, manualTimezone} = this.state;\n\n        const timezone = {\n            useAutomaticTimezone: useAutomaticTimezone.toString(),\n            automaticTimezone,\n            manualTimezone,\n        };\n\n        const updatedUser = {\n            ...user,\n            timezone,\n        };\n\n        actions.updateMe(updatedUser).\n            then((res) => {\n                if ('data' in res) {\n                    this.props.updateSection('');\n                } else if ('error' in res) {\n                    const {error} = res;\n                    let serverError;\n                    if (error instanceof Error) {\n                        serverError = error.message;\n                    } else {\n                        serverError = error as string;\n                    }\n                    this.setState({serverError, isSaving: false});\n                }\n            });\n    };\n\n    handleAutomaticTimezone = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const useAutomaticTimezone = e.target.checked;\n        let automaticTimezone = '';\n        let timezoneLabel: string;\n        let selectedOptionValue: string;\n\n        if (useAutomaticTimezone) {\n            automaticTimezone = getBrowserTimezone();\n            timezoneLabel = getTimezoneLabel(this.props.timezones, automaticTimezone);\n            selectedOptionValue = automaticTimezone;\n        } else {\n            timezoneLabel = getTimezoneLabel(this.props.timezones, getBrowserTimezone());\n            selectedOptionValue = getBrowserTimezone();\n            this.setState({\n                manualTimezone: getBrowserTimezone(),\n            });\n        }\n\n        this.setState({\n            useAutomaticTimezone,\n            automaticTimezone,\n            selectedOption: {label: timezoneLabel, value: selectedOptionValue},\n        });\n    };\n\n    handleManualTimezone = (e: React.ChangeEvent<HTMLSelectElement>) => {\n        this.setState({manualTimezone: e.target.value});\n    };\n    render() {\n        const {timezones} = this.props;\n        const {useAutomaticTimezone} = this.state;\n\n        const timeOptions = this.props.timezones.map((timeObject) => {\n            return {\n                value: timeObject.utc[0],\n                label: timeObject.text,\n            };\n        });\n        let serverError;\n        if (this.state.serverError) {\n            serverError = <label className='has-error'>{this.state.serverError}</label>;\n        }\n\n        const inputs = [];\n        const reactStyles = {\n\n            menuPortal: (provided: React.CSSProperties) => ({\n                ...provided,\n                zIndex: 9999,\n            }),\n\n        };\n\n        const noTimezonesFromServer = timezones.length === 0;\n        const automaticTimezoneInput = (\n            <div className='checkbox'>\n                <label>\n                    <input\n                        id='automaticTimezoneInput'\n                        type='checkbox'\n                        checked={useAutomaticTimezone}\n                        onChange={this.handleAutomaticTimezone}\n                        disabled={noTimezonesFromServer}\n                    />\n                    <FormattedMessage\n                        id='user.settings.timezones.automatic'\n                        defaultMessage='Automatic'\n                    />\n\n                </label>\n            </div>\n        );\n\n        const manualTimezoneInput = (\n            <div\n                className='pt-2'\n            >\n                <ReactSelect\n                    className='react-select react-select-top'\n                    classNamePrefix='react-select'\n                    id='displayTimezone'\n                    menuPortalTarget={document.body}\n                    styles={reactStyles}\n                    options={timeOptions}\n                    clearable={false}\n                    onChange={this.onChange}\n                    value={this.state.selectedOption}\n                    aria-labelledby='changeInterfaceTimezoneLabel'\n                    isDisabled={useAutomaticTimezone}\n                />\n                {serverError}\n            </div>\n        );\n\n        inputs.push(automaticTimezoneInput);\n\n        inputs.push(manualTimezoneInput);\n\n        inputs.push(\n            <div>\n                <br/>\n                <FormattedMessage\n                    id='user.settings.timezones.promote'\n                    defaultMessage='Select the time zone used for timestamps in the user interface and email notifications.'\n                />\n            </div>,\n        );\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.display.timezone'\n                        defaultMessage='Timezone'\n                    />\n                }\n                containerStyle='timezone-container'\n                width='medium'\n                submit={this.changeTimezone}\n                saving={this.state.isSaving}\n                inputs={inputs}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {connect} from 'react-redux';\nimport {ActionCreatorsMapObject, bindActionCreators, Dispatch} from 'redux';\n\nimport timezones from 'timezones.json';\n\nimport {updateMe} from 'mattermost-redux/actions/users';\nimport {ActionFunc, ActionResult} from 'mattermost-redux/types/actions';\nimport {UserProfile} from '@mattermost/types/users';\nimport {GlobalState} from '@mattermost/types/store';\nimport {getTimezoneLabel} from 'mattermost-redux/selectors/entities/timezone';\n\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport ManageTimezones from './manage_timezones';\n\ntype Actions = {\n    updateMe: (user: UserProfile) => Promise<ActionResult>;\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            updateMe,\n        }, dispatch)};\n}\nfunction mapStateToProps(state: GlobalState) {\n    const currentUserId = getCurrentUserId(state);\n    const timezoneLabel = getTimezoneLabel(state, currentUserId);\n    return {\n        timezones,\n        timezoneLabel,\n    };\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageTimezones);\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport ReactSelect, {ValueType} from 'react-select';\n\nimport {ActionResult} from 'mattermost-redux/types/actions';\nimport {UserProfile} from '@mattermost/types/users';\n\nimport * as I18n from 'i18n/i18n.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport {isKeyPressed} from 'utils/utils';\nimport Constants from 'utils/constants';\n\ntype Actions = {\n    updateMe: (user: UserProfile) => Promise<ActionResult>;\n};\n\ntype Props = {\n    user: UserProfile;\n    locale: string;\n    updateSection: (section: string) => void;\n    actions: Actions;\n};\n\ntype SelectedOption = {\n    value: string;\n    label: string;\n}\n\ntype State = {\n    isSaving: boolean;\n    openMenu: boolean;\n    locale: string;\n    serverError?: string;\n    selectedOption: SelectedOption;\n};\n\nexport default class ManageLanguage extends React.PureComponent<Props, State> {\n    reactSelectContainer: React.RefObject<HTMLDivElement>;\n    constructor(props: Props) {\n        super(props);\n        const locales: any = I18n.getLanguages();\n        const userLocale = props.locale;\n        const selectedOption = {\n            value: locales[userLocale].value,\n            label: locales[userLocale].name,\n        };\n        this.reactSelectContainer = React.createRef();\n\n        this.state = {\n            locale: props.locale,\n            selectedOption,\n            isSaving: false,\n            openMenu: false,\n        };\n    }\n\n    componentDidMount() {\n        const reactSelectContainer = this.reactSelectContainer.current;\n        if (reactSelectContainer) {\n            reactSelectContainer.addEventListener(\n                'keydown',\n                this.handleContainerKeyDown,\n            );\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.reactSelectContainer.current) {\n            this.reactSelectContainer.current.removeEventListener(\n                'keydown',\n                this.handleContainerKeyDown,\n            );\n        }\n    }\n\n    handleContainerKeyDown = (e: KeyboardEvent) => {\n        const modalBody = document.querySelector('.modal-body');\n        if (isKeyPressed(e, Constants.KeyCodes.ESCAPE) && this.state.openMenu) {\n            modalBody?.classList.remove('no-scroll');\n            this.setState({openMenu: false});\n            e.stopPropagation();\n        }\n    };\n\n    handleKeyDown = (e: React.KeyboardEvent) => {\n        const modalBody = document.querySelector('.modal-body');\n        if (isKeyPressed(e, Constants.KeyCodes.ENTER)) {\n            modalBody?.classList.add('no-scroll');\n            this.setState({openMenu: true});\n        }\n    };\n\n    setLanguage = (selectedOption: ValueType<SelectedOption>) => {\n        if (selectedOption && 'value' in selectedOption) {\n            this.setState({\n                locale: selectedOption.value,\n                selectedOption,\n            });\n        }\n    };\n\n    changeLanguage = () => {\n        if (this.props.user.locale === this.state.locale) {\n            this.props.updateSection('');\n        } else {\n            this.submitUser({\n                ...this.props.user,\n                locale: this.state.locale,\n            });\n        }\n    };\n\n    submitUser = (user: UserProfile) => {\n        this.setState({isSaving: true});\n\n        this.props.actions.updateMe(user).then((res) => {\n            if ('data' in res) {\n                // Do nothing since changing the locale essentially refreshes the page\n            } else if ('error' in res) {\n                let serverError;\n                const {error} = res;\n                if (error instanceof Error) {\n                    serverError = error.message;\n                } else {\n                    serverError = error;\n                }\n                this.setState({serverError, isSaving: false});\n            }\n        });\n    };\n\n    handleMenuClose = () => {\n        const modalBody = document.querySelector('.modal-body');\n        if (modalBody) {\n            modalBody.classList.remove('no-scroll');\n        }\n        this.setState({openMenu: false});\n    };\n\n    handleMenuOpen = () => {\n        const modalBody = document.querySelector('.modal-body');\n        if (modalBody) {\n            modalBody.classList.add('no-scroll');\n        }\n        this.setState({openMenu: true});\n    };\n\n    render() {\n        let serverError;\n        if (this.state.serverError) {\n            serverError = (\n                <label className='has-error'>{this.state.serverError}</label>\n            );\n        }\n\n        const options: SelectedOption[] = [];\n        const locales: any = I18n.getLanguages();\n\n        const languages = Object.keys(locales).\n            map((l) => {\n                return {\n                    value: locales[l].value as string,\n                    name: locales[l].name,\n                    order: locales[l].order,\n                };\n            }).\n            sort((a, b) => a.order - b.order);\n\n        languages.forEach((lang) => {\n            options.push({value: lang.value, label: lang.name});\n        });\n\n        const reactStyles = {\n            menuPortal: (provided: React.CSSProperties) => ({\n                ...provided,\n                zIndex: 9999,\n            }),\n        };\n\n        const input = (\n            <div key='changeLanguage'>\n                <br/>\n                <label\n                    className='control-label'\n                    id='changeInterfaceLanguageLabel'\n                >\n                    <FormattedMessage\n                        id='user.settings.languages.change'\n                        defaultMessage='Change interface language'\n                    />\n                </label>\n                <div\n                    ref={this.reactSelectContainer}\n                    className='pt-2'\n                >\n                    <ReactSelect\n                        className='react-select react-select-top'\n                        classNamePrefix='react-select'\n                        id='displayLanguage'\n                        menuIsOpen={this.state.openMenu}\n                        menuPortalTarget={document.body}\n                        styles={reactStyles}\n                        options={options}\n                        clearable={false}\n                        onChange={this.setLanguage}\n                        onKeyDown={this.handleKeyDown}\n                        value={this.state.selectedOption}\n                        onMenuClose={this.handleMenuClose}\n                        onMenuOpen={this.handleMenuOpen}\n                        aria-labelledby='changeInterfaceLanguageLabel'\n                    />\n                    {serverError}\n                </div>\n                <div>\n                    <br/>\n                    <FormattedMarkdownMessage\n                        id='user.settings.languages.promote'\n                        defaultMessage='Select which language Mattermost displays in the user interface.\\n \\nWould you like to help with translations? Join the [Mattermost Translation Server](!http://translate.mattermost.com/) to contribute.'\n                    />\n                </div>\n            </div>\n        );\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.display.language'\n                        defaultMessage='Language'\n                    />\n                }\n                width='medium'\n                submit={this.changeLanguage}\n                saving={this.state.isSaving}\n                inputs={[input]}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {connect} from 'react-redux';\nimport {ActionCreatorsMapObject, bindActionCreators, Dispatch} from 'redux';\n\nimport {updateMe} from 'mattermost-redux/actions/users';\nimport {UserProfile} from '@mattermost/types/users';\nimport {ActionFunc, ActionResult} from 'mattermost-redux/types/actions';\n\nimport ManageLanguages from './manage_languages';\n\ntype Actions = {\n    updateMe: (user: UserProfile) => Promise<ActionResult>;\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            updateMe,\n        }, dispatch)};\n}\n\nexport default connect(null, mapDispatchToProps)(ManageLanguages);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n/* eslint-disable react/no-string-refs */\n\nimport deepEqual from 'fast-deep-equal';\nimport React from 'react';\n\nimport {FormattedMessage} from 'react-intl';\n\nimport {Timezone} from 'timezones.json';\n\nimport {PreferenceType} from '@mattermost/types/preferences';\nimport {UserProfile, UserTimezone} from '@mattermost/types/users';\n\nimport {trackEvent} from 'actions/telemetry_actions';\n\nimport Constants from 'utils/constants';\nimport {getBrowserTimezone} from 'utils/timezone.jsx';\n\nimport * as I18n from 'i18n/i18n.jsx';\nimport {t} from 'utils/i18n';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport ThemeSetting from 'components/user_settings/display/user_settings_theme';\nimport BackIcon from 'components/widgets/icons/fa_back_icon';\n\nimport ManageTimezones from './manage_timezones';\nimport ManageLanguages from './manage_languages';\n\nconst Preferences = Constants.Preferences;\n\nfunction getDisplayStateFromProps(props: Props) {\n    return {\n        militaryTime: props.militaryTime,\n        teammateNameDisplay: props.teammateNameDisplay,\n        availabilityStatusOnPosts: props.availabilityStatusOnPosts,\n        channelDisplayMode: props.channelDisplayMode,\n        messageDisplay: props.messageDisplay,\n        collapseDisplay: props.collapseDisplay,\n        collapsedReplyThreads: props.collapsedReplyThreads,\n        linkPreviewDisplay: props.linkPreviewDisplay,\n        oneClickReactionsOnPosts: props.oneClickReactionsOnPosts,\n        clickToReply: props.clickToReply,\n    };\n}\n\ntype Option = {\n    value: string;\n    radionButtonText: {\n        id: string;\n        message: string;\n        moreId?: string;\n        moreMessage?: string;\n    };\n}\n\ntype SectionProps ={\n    section: string;\n    display: string;\n    defaultDisplay: string;\n    value: string;\n    title: {\n        id: string;\n        message: string;\n    };\n    firstOption: Option;\n    secondOption: Option;\n    thirdOption?: Option;\n    description: {\n        id: string;\n        message: string;\n    };\n    disabled?: boolean;\n}\n\ntype Props = {\n    user: UserProfile;\n    updateSection: (section: string) => void;\n    activeSection?: string;\n    closeModal?: () => void;\n    collapseModal?: () => void;\n    setRequireConfirm?: () => void;\n    setEnforceFocus?: () => void;\n    timezones: Timezone[];\n    userTimezone: UserTimezone;\n    allowCustomThemes: boolean;\n    enableLinkPreviews: boolean;\n    defaultClientLocale: string;\n    enableThemeSelection: boolean;\n    configTeammateNameDisplay: string;\n    currentUserTimezone: string;\n    enableTimezone: boolean;\n    shouldAutoUpdateTimezone: boolean | string;\n    lockTeammateNameDisplay: boolean;\n    militaryTime: string;\n    teammateNameDisplay: string;\n    availabilityStatusOnPosts: string;\n    channelDisplayMode: string;\n    messageDisplay: string;\n    collapseDisplay: string;\n    collapsedReplyThreads: string;\n    collapsedReplyThreadsAllowUserPreference: boolean;\n    clickToReply: string;\n    linkPreviewDisplay: string;\n    oneClickReactionsOnPosts: string;\n    emojiPickerEnabled: boolean;\n    timezoneLabel: string;\n    actions: {\n        savePreferences: (userId: string, preferences: PreferenceType[]) => void;\n        autoUpdateTimezone: (deviceTimezone: string) => void;\n    };\n}\n\ntype State = {\n    [key: string]: any;\n    isSaving: boolean;\n    militaryTime: string;\n    teammateNameDisplay: string;\n    availabilityStatusOnPosts: string;\n    channelDisplayMode: string;\n    messageDisplay: string;\n    collapseDisplay: string;\n    collapsedReplyThreads: string;\n    linkPreviewDisplay: string;\n    oneClickReactionsOnPosts: string;\n    clickToReply: string;\n    handleSubmit?: () => void;\n    serverError?: string;\n}\n\nexport default class UserSettingsDisplay extends React.PureComponent<Props, State> {\n    public prevSections: {\n        theme: string;\n\n        clock: string;\n        linkpreview: string;\n        message_display: string;\n        channel_display_mode: string;\n        languages: string;\n    };\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            ...getDisplayStateFromProps(props),\n            isSaving: false,\n        };\n\n        this.prevSections = {\n            theme: 'dummySectionName', // dummy value that should never match any section name\n            clock: 'theme',\n            linkpreview: 'clock',\n            message_display: 'linkpreview',\n            channel_display_mode: 'message_display',\n            languages: 'channel_display_mode',\n        };\n    }\n\n    componentDidMount() {\n        const {actions, enableTimezone, shouldAutoUpdateTimezone} = this.props;\n\n        if (enableTimezone && shouldAutoUpdateTimezone) {\n            actions.autoUpdateTimezone(getBrowserTimezone());\n        }\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (this.props.teammateNameDisplay !== prevProps.teammateNameDisplay) {\n            this.updateState();\n        }\n    }\n\n    trackChangeIfNecessary(preference: PreferenceType, oldValue: any): void {\n        const props = {\n            field: 'display.' + preference.name,\n            value: preference.value,\n        };\n\n        if (preference.value !== oldValue) {\n            trackEvent('settings', 'user_settings_update', props);\n        }\n    }\n\n    handleSubmit = async () => {\n        const userId = this.props.user.id;\n\n        const timePreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.USE_MILITARY_TIME,\n            value: this.state.militaryTime,\n        };\n        const availabilityStatusOnPostsPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.AVAILABILITY_STATUS_ON_POSTS,\n            value: this.state.availabilityStatusOnPosts,\n        };\n        const teammateNameDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.NAME_NAME_FORMAT,\n            value: this.state.teammateNameDisplay,\n        };\n        const channelDisplayModePreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.CHANNEL_DISPLAY_MODE,\n            value: this.state.channelDisplayMode,\n        };\n        const messageDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.MESSAGE_DISPLAY,\n            value: this.state.messageDisplay,\n        };\n        const collapseDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.COLLAPSE_DISPLAY,\n            value: this.state.collapseDisplay,\n        };\n        const collapsedReplyThreadsPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.COLLAPSED_REPLY_THREADS,\n            value: this.state.collapsedReplyThreads,\n        };\n        const linkPreviewDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.LINK_PREVIEW_DISPLAY,\n            value: this.state.linkPreviewDisplay,\n        };\n        const oneClickReactionsOnPostsPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.ONE_CLICK_REACTIONS_ENABLED,\n            value: this.state.oneClickReactionsOnPosts,\n        };\n        const clickToReplyPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.CLICK_TO_REPLY,\n            value: this.state.clickToReply,\n        };\n\n        this.setState({isSaving: true});\n\n        const preferences = [\n            timePreference,\n            channelDisplayModePreference,\n            messageDisplayPreference,\n            collapsedReplyThreadsPreference,\n            clickToReplyPreference,\n            collapseDisplayPreference,\n            linkPreviewDisplayPreference,\n            teammateNameDisplayPreference,\n            availabilityStatusOnPostsPreference,\n            oneClickReactionsOnPostsPreference,\n        ];\n\n        this.trackChangeIfNecessary(collapsedReplyThreadsPreference, this.props.collapsedReplyThreads);\n\n        await this.props.actions.savePreferences(userId, preferences);\n\n        this.updateSection('');\n    }\n\n    handleClockRadio = (militaryTime: string) => {\n        this.setState({militaryTime});\n    }\n\n    handleTeammateNameDisplayRadio = (teammateNameDisplay: string) => {\n        this.setState({teammateNameDisplay});\n    }\n\n    handleAvailabilityStatusRadio = (availabilityStatusOnPosts: string) => {\n        this.setState({availabilityStatusOnPosts});\n    }\n\n    handleChannelDisplayModeRadio(channelDisplayMode: string) {\n        this.setState({channelDisplayMode});\n    }\n\n    handlemessageDisplayRadio(messageDisplay: string) {\n        this.setState({messageDisplay});\n    }\n\n    handleCollapseRadio(collapseDisplay: string) {\n        this.setState({collapseDisplay});\n    }\n\n    handleCollapseReplyThreadsRadio(collapsedReplyThreads: string) {\n        this.setState({collapsedReplyThreads});\n    }\n\n    handleLinkPreviewRadio(linkPreviewDisplay: string) {\n        this.setState({linkPreviewDisplay});\n    }\n\n    handleOneClickReactionsRadio = (oneClickReactionsOnPosts: string) => {\n        this.setState({oneClickReactionsOnPosts});\n    }\n\n    handleClickToReplyRadio = (clickToReply: string) => {\n        this.setState({clickToReply});\n    }\n\n    handleOnChange(display: {[key: string]: any}) {\n        this.setState({...display});\n    }\n\n    updateSection = (section: string) => {\n        this.updateState();\n        this.props.updateSection(section);\n    }\n\n    updateState = () => {\n        const newState = getDisplayStateFromProps(this.props);\n        if (!deepEqual(newState, this.state)) {\n            this.setState(newState);\n        }\n\n        this.setState({isSaving: false});\n    }\n\n    createSection(props: SectionProps) {\n        const {\n            section,\n            display,\n            value,\n            title,\n            firstOption,\n            secondOption,\n            thirdOption,\n            description,\n            disabled,\n        } = props;\n        let extraInfo = null;\n        let submit: (() => Promise<void>) | null = this.handleSubmit;\n\n        const firstMessage = (\n            <FormattedMessage\n                id={firstOption.radionButtonText.id}\n                defaultMessage={firstOption.radionButtonText.message}\n            />\n        );\n\n        let moreColon;\n        let firstMessageMore;\n        if (firstOption.radionButtonText.moreId) {\n            moreColon = ': ';\n            firstMessageMore = (\n                <span className='font-weight--normal'>\n                    <FormattedMessage\n                        id={firstOption.radionButtonText.moreId}\n                        defaultMessage={firstOption.radionButtonText.moreMessage}\n                    />\n                </span>\n            );\n        }\n\n        const secondMessage = (\n            <FormattedMessage\n                id={secondOption.radionButtonText.id}\n                defaultMessage={secondOption.radionButtonText.message}\n            />\n        );\n\n        let secondMessageMore;\n        if (secondOption.radionButtonText.moreId) {\n            secondMessageMore = (\n                <span className='font-weight--normal'>\n                    <FormattedMessage\n                        id={secondOption.radionButtonText.moreId}\n                        defaultMessage={secondOption.radionButtonText.moreMessage}\n                    />\n                </span>\n            );\n        }\n\n        let thirdMessage;\n        if (thirdOption) {\n            thirdMessage = (\n                <FormattedMessage\n                    id={thirdOption.radionButtonText.id}\n                    defaultMessage={thirdOption.radionButtonText.message}\n                />\n            );\n        }\n\n        const messageTitle = (\n            <FormattedMessage\n                id={title.id}\n                defaultMessage={title.message}\n            />\n        );\n\n        const messageDesc = (\n            <FormattedMarkdownMessage\n                id={description.id}\n                defaultMessage={description.message}\n            />\n        );\n\n        if (this.props.activeSection === section) {\n            const format = [false, false, false];\n            if (value === firstOption.value) {\n                format[0] = true;\n            } else if (value === secondOption.value) {\n                format[1] = true;\n            } else {\n                format[2] = true;\n            }\n\n            const name = section + 'Format';\n            const key = section + 'UserDisplay';\n\n            const firstDisplay = {\n                [display]: firstOption.value,\n            };\n\n            const secondDisplay = {\n                [display]: secondOption.value,\n            };\n\n            let thirdSection;\n            if (thirdOption && thirdMessage) {\n                const thirdDisplay = {\n                    [display]: thirdOption.value,\n                };\n\n                thirdSection = (\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'C'}\n                                type='radio'\n                                name={name}\n                                checked={format[2]}\n                                onChange={() => this.handleOnChange(thirdDisplay)}\n                            />\n                            {thirdMessage}\n                        </label>\n                        <br/>\n                    </div>\n                );\n            }\n\n            let inputs = [\n                <fieldset key={key}>\n                    <legend className='form-legend hidden-label'>\n                        {messageTitle}\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'A'}\n                                type='radio'\n                                name={name}\n                                checked={format[0]}\n                                onChange={() => this.handleOnChange(firstDisplay)}\n                            />\n                            {firstMessage}\n                            {moreColon}\n                            {firstMessageMore}\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'B'}\n                                type='radio'\n                                name={name}\n                                checked={format[1]}\n                                onChange={() => this.handleOnChange(secondDisplay)}\n                            />\n                            {secondMessage}\n                            {moreColon}\n                            {secondMessageMore}\n                        </label>\n                        <br/>\n                    </div>\n                    {thirdSection}\n                    <div>\n                        <br/>\n                        {messageDesc}\n                    </div>\n                </fieldset>,\n            ];\n\n            if (display === 'teammateNameDisplay' && disabled) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.display.teammateNameDisplay'\n                            defaultMessage='This field is handled through your System Administrator. If you want to change it, you need to do so through your System Administrator.'\n                        />\n                    </span>\n                );\n                submit = null;\n                inputs = [];\n            }\n            return (\n                <div>\n                    <SettingItemMax\n                        title={messageTitle}\n                        inputs={inputs}\n                        submit={submit}\n                        saving={this.state.isSaving}\n                        server_error={this.state.serverError}\n                        updateSection={this.updateSection}\n                        extraInfo={extraInfo}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        let describe;\n        if (value === firstOption.value) {\n            describe = firstMessage;\n        } else if (value === secondOption.value) {\n            describe = secondMessage;\n        } else {\n            describe = thirdMessage;\n        }\n\n        return (\n            <div>\n                <SettingItemMin\n                    title={messageTitle}\n                    describe={describe}\n                    section={section}\n                    updateSection={this.updateSection}\n                />\n                <div className='divider-dark'/>\n            </div>\n        );\n    }\n\n    render() {\n        const collapseSection = this.createSection({\n            section: 'collapse',\n            display: 'collapseDisplay',\n            value: this.state.collapseDisplay,\n            defaultDisplay: 'false',\n            title: {\n                id: t('user.settings.display.collapseDisplay'),\n                message: 'Default Appearance of Image Previews',\n            },\n            firstOption: {\n                value: 'false',\n                radionButtonText: {\n                    id: t('user.settings.display.collapseOn'),\n                    message: 'On',\n                },\n            },\n            secondOption: {\n                value: 'true',\n                radionButtonText: {\n                    id: t('user.settings.display.collapseOff'),\n                    message: 'Off',\n                },\n            },\n            description: {\n                id: t('user.settings.display.collapseDesc'),\n                message: 'Set whether previews of image links and image attachment thumbnails show as expanded or collapsed by default. This setting can also be controlled using the slash commands /expand and /collapse.',\n            },\n        });\n\n        let linkPreviewSection = null;\n\n        if (this.props.enableLinkPreviews) {\n            linkPreviewSection = this.createSection({\n                section: 'linkpreview',\n                display: 'linkPreviewDisplay',\n                value: this.state.linkPreviewDisplay,\n                defaultDisplay: 'true',\n                title: {\n                    id: t('user.settings.display.linkPreviewDisplay'),\n                    message: 'Website Link Previews',\n                },\n                firstOption: {\n                    value: 'true',\n                    radionButtonText: {\n                        id: t('user.settings.display.linkPreviewOn'),\n                        message: 'On',\n                    },\n                },\n                secondOption: {\n                    value: 'false',\n                    radionButtonText: {\n                        id: t('user.settings.display.linkPreviewOff'),\n                        message: 'Off',\n                    },\n                },\n                description: {\n                    id: t('user.settings.display.linkPreviewDesc'),\n                    message: 'When available, the first web link in a message will show a preview of the website content below the message.',\n                },\n            });\n            this.prevSections.message_display = 'linkpreview';\n        } else {\n            this.prevSections.message_display = this.prevSections.linkpreview;\n        }\n\n        const clockSection = this.createSection({\n            section: 'clock',\n            display: 'militaryTime',\n            value: this.state.militaryTime,\n            defaultDisplay: 'false',\n            title: {\n                id: t('user.settings.display.clockDisplay'),\n                message: 'Clock Display',\n            },\n            firstOption: {\n                value: 'false',\n                radionButtonText: {\n                    id: t('user.settings.display.normalClock'),\n                    message: '12-hour clock (example: 4:00 PM)',\n                },\n            },\n            secondOption: {\n                value: 'true',\n                radionButtonText: {\n                    id: t('user.settings.display.militaryClock'),\n                    message: '24-hour clock (example: 16:00)',\n                },\n            },\n            description: {\n                id: t('user.settings.display.preferTime'),\n                message: 'Select how you prefer time displayed.',\n            },\n        });\n\n        const teammateNameDisplaySection = this.createSection({\n            section: Preferences.NAME_NAME_FORMAT,\n            display: 'teammateNameDisplay',\n            value: this.props.lockTeammateNameDisplay ? this.props.configTeammateNameDisplay : this.state.teammateNameDisplay,\n            defaultDisplay: this.props.configTeammateNameDisplay,\n            title: {\n                id: t('user.settings.display.teammateNameDisplayTitle'),\n                message: 'Teammate Name Display',\n            },\n            firstOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_USERNAME,\n                radionButtonText: {\n                    id: t('user.settings.display.teammateNameDisplayUsername'),\n                    message: 'Show username',\n                },\n            },\n            secondOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_NICKNAME_FULLNAME,\n                radionButtonText: {\n                    id: t('user.settings.display.teammateNameDisplayNicknameFullname'),\n                    message: 'Show nickname if one exists, otherwise show first and last name',\n                },\n            },\n            thirdOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_FULLNAME,\n                radionButtonText: {\n                    id: t('user.settings.display.teammateNameDisplayFullname'),\n                    message: 'Show first and last name',\n                },\n            },\n            description: {\n                id: t('user.settings.display.teammateNameDisplayDescription'),\n                message: 'Set how to display other user\\'s names in posts and the Direct Messages list.',\n            },\n            disabled: this.props.lockTeammateNameDisplay,\n        });\n\n        const availabilityStatusOnPostsSection = this.createSection({\n            section: 'availabilityStatus',\n            display: 'availabilityStatusOnPosts',\n            value: this.state.availabilityStatusOnPosts,\n            defaultDisplay: 'true',\n            title: {\n                id: t('user.settings.display.availabilityStatusOnPostsTitle'),\n                message: 'Show user availability on posts',\n            },\n            firstOption: {\n                value: 'true',\n                radionButtonText: {\n                    id: t('user.settings.sidebar.on'),\n                    message: 'On',\n                },\n            },\n            secondOption: {\n                value: 'false',\n                radionButtonText: {\n                    id: t('user.settings.sidebar.off'),\n                    message: 'Off',\n                },\n            },\n            description: {\n                id: t('user.settings.display.availabilityStatusOnPostsDescription'),\n                message: 'When enabled, online availability is displayed on profile images in the message list.',\n            },\n        });\n\n        let timezoneSelection;\n        if (this.props.enableTimezone && !this.props.shouldAutoUpdateTimezone) {\n            const userTimezone = this.props.userTimezone;\n            if (this.props.activeSection === 'timezone') {\n                timezoneSelection = (\n                    <div>\n                        <ManageTimezones\n                            user={this.props.user}\n                            useAutomaticTimezone={Boolean(userTimezone.useAutomaticTimezone)}\n                            automaticTimezone={userTimezone.automaticTimezone}\n                            manualTimezone={userTimezone.manualTimezone}\n                            updateSection={this.updateSection}\n                        />\n                        <div className='divider-dark'/>\n                    </div>\n                );\n            } else {\n                timezoneSelection = (\n                    <div>\n                        <SettingItemMin\n                            title={\n                                <FormattedMessage\n                                    id='user.settings.display.timezone'\n                                    defaultMessage='Timezone'\n                                />\n                            }\n                            describe={this.props.timezoneLabel}\n                            section={'timezone'}\n                            updateSection={this.updateSection}\n                        />\n                        <div className='divider-dark'/>\n                    </div>\n                );\n            }\n        }\n\n        const messageDisplaySection = this.createSection({\n            section: Preferences.MESSAGE_DISPLAY,\n            display: 'messageDisplay',\n            value: this.state.messageDisplay,\n            defaultDisplay: Preferences.MESSAGE_DISPLAY_CLEAN,\n            title: {\n                id: t('user.settings.display.messageDisplayTitle'),\n                message: 'Message Display',\n            },\n            firstOption: {\n                value: Preferences.MESSAGE_DISPLAY_CLEAN,\n                radionButtonText: {\n                    id: t('user.settings.display.messageDisplayClean'),\n                    message: 'Standard',\n                    moreId: t('user.settings.display.messageDisplayCleanDes'),\n                    moreMessage: 'Easy to scan and read.',\n                },\n            },\n            secondOption: {\n                value: Preferences.MESSAGE_DISPLAY_COMPACT,\n                radionButtonText: {\n                    id: t('user.settings.display.messageDisplayCompact'),\n                    message: 'Compact',\n                    moreId: t('user.settings.display.messageDisplayCompactDes'),\n                    moreMessage: 'Fit as many messages on the screen as we can.',\n                },\n            },\n            description: {\n                id: t('user.settings.display.messageDisplayDescription'),\n                message: 'Select how messages in a channel should be displayed.',\n            },\n        });\n\n        let collapsedReplyThreads;\n\n        if (this.props.collapsedReplyThreadsAllowUserPreference) {\n            collapsedReplyThreads = this.createSection({\n                section: Preferences.COLLAPSED_REPLY_THREADS,\n                display: 'collapsedReplyThreads',\n                value: this.state.collapsedReplyThreads,\n                defaultDisplay: Preferences.COLLAPSED_REPLY_THREADS_FALLBACK_DEFAULT,\n                title: {\n                    id: t('user.settings.display.collapsedReplyThreadsTitle'),\n                    message: 'Collapsed Reply Threads',\n                },\n                firstOption: {\n                    value: Preferences.COLLAPSED_REPLY_THREADS_ON,\n                    radionButtonText: {\n                        id: t('user.settings.display.collapsedReplyThreadsOn'),\n                        message: 'On',\n                    },\n                },\n                secondOption: {\n                    value: Preferences.COLLAPSED_REPLY_THREADS_OFF,\n                    radionButtonText: {\n                        id: t('user.settings.display.collapsedReplyThreadsOff'),\n                        message: 'Off',\n                    },\n                },\n                description: {\n                    id: t('user.settings.display.collapsedReplyThreadsDescription'),\n                    message: 'When enabled, reply messages are not shown in the channel and you\\'ll be notified about threads you\\'re following in the \"Threads\" view.',\n                },\n            });\n        }\n\n        const clickToReply = this.createSection({\n            section: Preferences.CLICK_TO_REPLY,\n            display: 'clickToReply',\n            value: this.state.clickToReply,\n            defaultDisplay: 'true',\n            title: {\n                id: t('user.settings.display.clickToReply'),\n                message: 'Click to open threads',\n            },\n            firstOption: {\n                value: 'true',\n                radionButtonText: {\n                    id: t('user.settings.sidebar.on'),\n                    message: 'On',\n                },\n            },\n            secondOption: {\n                value: 'false',\n                radionButtonText: {\n                    id: t('user.settings.sidebar.off'),\n                    message: 'Off',\n                },\n            },\n            description: {\n                id: t('user.settings.display.clickToReplyDescription'),\n                message: 'When enabled, click anywhere on a message to open the reply thread.',\n            },\n        });\n\n        const channelDisplayModeSection = this.createSection({\n            section: Preferences.CHANNEL_DISPLAY_MODE,\n            display: 'channelDisplayMode',\n            value: this.state.channelDisplayMode,\n            defaultDisplay: Preferences.CHANNEL_DISPLAY_MODE_FULL_SCREEN,\n            title: {\n                id: t('user.settings.display.channelDisplayTitle'),\n                message: 'Channel Display',\n            },\n            firstOption: {\n                value: Preferences.CHANNEL_DISPLAY_MODE_FULL_SCREEN,\n                radionButtonText: {\n                    id: t('user.settings.display.fullScreen'),\n                    message: 'Full width',\n                },\n            },\n            secondOption: {\n                value: Preferences.CHANNEL_DISPLAY_MODE_CENTERED,\n                radionButtonText: {\n                    id: t('user.settings.display.fixedWidthCentered'),\n                    message: 'Fixed width, centered',\n                },\n            },\n            description: {\n                id: t('user.settings.display.channeldisplaymode'),\n                message: 'Select the width of the center channel.',\n            },\n        });\n\n        let languagesSection;\n        let userLocale = this.props.user.locale;\n        if (this.props.activeSection === 'languages') {\n            if (!I18n.isLanguageAvailable(userLocale)) {\n                userLocale = this.props.defaultClientLocale;\n            }\n            languagesSection = (\n                <div>\n                    <ManageLanguages\n                        user={this.props.user}\n                        locale={userLocale}\n                        updateSection={this.updateSection}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        } else {\n            let locale;\n            if (I18n.isLanguageAvailable(userLocale)) {\n                locale = I18n.getLanguageInfo(userLocale).name;\n            } else {\n                locale = I18n.getLanguageInfo(this.props.defaultClientLocale).name;\n            }\n\n            languagesSection = (\n                <div>\n                    <SettingItemMin\n                        title={\n                            <FormattedMessage\n                                id='user.settings.display.language'\n                                defaultMessage='Language'\n                            />\n                        }\n                        describe={locale}\n                        section={'languages'}\n                        updateSection={this.updateSection}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        if (Object.keys(I18n.getLanguages()).length === 1) {\n            languagesSection = null;\n        }\n\n        let themeSection;\n        if (this.props.enableThemeSelection) {\n            themeSection = (\n                <div>\n                    <ThemeSetting\n                        selected={this.props.activeSection === 'theme'}\n                        updateSection={this.updateSection}\n                        setRequireConfirm={this.props.setRequireConfirm}\n                        setEnforceFocus={this.props.setEnforceFocus}\n                        allowCustomThemes={this.props.allowCustomThemes}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        let oneClickReactionsOnPostsSection;\n        if (this.props.emojiPickerEnabled) {\n            oneClickReactionsOnPostsSection = this.createSection({\n                section: Preferences.ONE_CLICK_REACTIONS_ENABLED,\n                display: 'oneClickReactionsOnPosts',\n                value: this.state.oneClickReactionsOnPosts,\n                defaultDisplay: 'true',\n                title: {\n                    id: t('user.settings.display.oneClickReactionsOnPostsTitle'),\n                    message: 'Quick reactions on messages',\n                },\n                firstOption: {\n                    value: 'true',\n                    radionButtonText: {\n                        id: t('user.settings.sidebar.on'),\n                        message: 'On',\n                    },\n                },\n                secondOption: {\n                    value: 'false',\n                    radionButtonText: {\n                        id: t('user.settings.sidebar.off'),\n                        message: 'Off',\n                    },\n                },\n                description: {\n                    id: t('user.settings.display.oneClickReactionsOnPostsDescription'),\n                    message: 'When enabled, you can react in one-click with recently used reactions when hovering over a message.',\n                },\n            });\n        }\n\n        return (\n            <div id='displaySettings'>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label='Close'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <span onClick={this.props.collapseModal}>\n                                <BackIcon/>\n                            </span>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.display.title'\n                            defaultMessage='Display Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3\n                        id='displaySettingsTitle'\n                        className='tab-header'\n                    >\n                        <FormattedMessage\n                            id='user.settings.display.title'\n                            defaultMessage='Display Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {themeSection}\n                    {collapsedReplyThreads}\n                    {clockSection}\n                    {teammateNameDisplaySection}\n                    {availabilityStatusOnPostsSection}\n                    {timezoneSelection}\n                    {linkPreviewSection}\n                    {collapseSection}\n                    {messageDisplaySection}\n                    {clickToReply}\n                    {channelDisplayModeSection}\n                    {oneClickReactionsOnPostsSection}\n                    {languagesSection}\n                </div>\n            </div>\n        );\n    }\n}\n/* eslint-enable react/no-string-refs */\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {bindActionCreators, Dispatch} from 'redux';\n\nimport timezones from 'timezones.json';\n\nimport {GenericAction} from 'mattermost-redux/types/actions';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {autoUpdateTimezone} from 'mattermost-redux/actions/timezone';\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {get, isCollapsedThreadsAllowed, getCollapsedThreadsPreference} from 'mattermost-redux/selectors/entities/preferences';\nimport {getTimezoneLabel, makeGetUserTimezone} from 'mattermost-redux/selectors/entities/timezone';\nimport {getUserCurrentTimezone} from 'mattermost-redux/utils/timezone_utils';\n\nimport {GlobalState} from 'types/store';\nimport {Preferences} from 'utils/constants';\n\nimport {CollapsedThreads} from '@mattermost/types/config';\n\nimport UserSettingsDisplay from './user_settings_display';\n\nexport function makeMapStateToProps() {\n    const getUserTimezone = makeGetUserTimezone();\n\n    return (state: GlobalState) => {\n        const config = getConfig(state);\n        const currentUserId = getCurrentUserId(state);\n        const userTimezone = getUserTimezone(state, currentUserId);\n        const automaticTimezoneNotSet = userTimezone && userTimezone.useAutomaticTimezone && !userTimezone.automaticTimezone;\n        const shouldAutoUpdateTimezone = !userTimezone || automaticTimezoneNotSet;\n        const timezoneLabel = getTimezoneLabel(state, currentUserId);\n        const allowCustomThemes = config.AllowCustomThemes === 'true';\n        const enableLinkPreviews = config.EnableLinkPreviews === 'true';\n        const defaultClientLocale = config.DefaultClientLocale as string;\n        const enableThemeSelection = config.EnableThemeSelection === 'true';\n        const enableTimezone = config.ExperimentalTimezone === 'true';\n        const lockTeammateNameDisplay = getLicense(state).LockTeammateNameDisplay === 'true' && config.LockTeammateNameDisplay === 'true';\n        const configTeammateNameDisplay = config.TeammateNameDisplay as string;\n        const emojiPickerEnabled = config.EnableEmojiPicker === 'true';\n\n        return {\n            lockTeammateNameDisplay,\n            allowCustomThemes,\n            configTeammateNameDisplay,\n            enableLinkPreviews,\n            defaultClientLocale,\n            enableThemeSelection,\n            enableTimezone,\n            timezones,\n            timezoneLabel,\n            userTimezone,\n            shouldAutoUpdateTimezone,\n            currentUserTimezone: getUserCurrentTimezone(userTimezone) as string,\n            availabilityStatusOnPosts: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.AVAILABILITY_STATUS_ON_POSTS, Preferences.AVAILABILITY_STATUS_ON_POSTS_DEFAULT),\n            militaryTime: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.USE_MILITARY_TIME, Preferences.USE_MILITARY_TIME_DEFAULT),\n            teammateNameDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.NAME_NAME_FORMAT, configTeammateNameDisplay),\n            channelDisplayMode: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.CHANNEL_DISPLAY_MODE, Preferences.CHANNEL_DISPLAY_MODE_DEFAULT),\n            messageDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.MESSAGE_DISPLAY, Preferences.MESSAGE_DISPLAY_DEFAULT),\n            collapseDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.COLLAPSE_DISPLAY, Preferences.COLLAPSE_DISPLAY_DEFAULT),\n            collapsedReplyThreadsAllowUserPreference: isCollapsedThreadsAllowed(state) && getConfig(state).CollapsedThreads !== CollapsedThreads.ALWAYS_ON,\n            collapsedReplyThreads: getCollapsedThreadsPreference(state),\n            clickToReply: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.CLICK_TO_REPLY, Preferences.CLICK_TO_REPLY_DEFAULT),\n            linkPreviewDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.LINK_PREVIEW_DISPLAY, Preferences.LINK_PREVIEW_DISPLAY_DEFAULT),\n            oneClickReactionsOnPosts: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.ONE_CLICK_REACTIONS_ENABLED, Preferences.ONE_CLICK_REACTIONS_ENABLED_DEFAULT),\n            emojiPickerEnabled,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators({\n            autoUpdateTimezone,\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(UserSettingsDisplay);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n/* eslint-disable react/no-string-refs */\n\nimport React from 'react';\nimport {defineMessages, FormattedDate, FormattedMessage, injectIntl, IntlShape} from 'react-intl';\n\nimport {isEmail} from 'mattermost-redux/utils/helpers';\nimport {UserProfile} from '@mattermost/types/users';\n\nimport {trackEvent} from 'actions/telemetry_actions.jsx';\nimport * as Utils from 'utils/utils';\nimport {t} from 'utils/i18n';\n\nimport LocalizedIcon from 'components/localized_icon';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport SettingPicture from 'components/setting_picture.jsx';\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper';\nimport {AnnouncementBarMessages, AnnouncementBarTypes, AcceptedProfileImageTypes, Constants, ValidationErrors} from 'utils/constants';\n\nconst holders = defineMessages({\n    usernameReserved: {\n        id: t('user.settings.general.usernameReserved'),\n        defaultMessage: 'This username is reserved, please choose a new one.',\n    },\n    usernameGroupNameUniqueness: {\n        id: t('user.settings.general.usernameGroupNameUniqueness'),\n        defaultMessage: 'This username conflicts with an existing group name.',\n    },\n    usernameRestrictions: {\n        id: t('user.settings.general.usernameRestrictions'),\n        defaultMessage: \"Username must begin with a letter, and contain between {min} to {max} lowercase characters made up of numbers, letters, and the symbols '.', '-', and '_'.\",\n    },\n    validEmail: {\n        id: t('user.settings.general.validEmail'),\n        defaultMessage: 'Please enter a valid email address.',\n    },\n    emailMatch: {\n        id: t('user.settings.general.emailMatch'),\n        defaultMessage: 'The new emails you entered do not match.',\n    },\n    incorrectPassword: {\n        id: t('user.settings.general.incorrectPassword'),\n        defaultMessage: 'Your password is incorrect.',\n    },\n    emptyPassword: {\n        id: t('user.settings.general.emptyPassword'),\n        defaultMessage: 'Please enter your current password.',\n    },\n    validImage: {\n        id: t('user.settings.general.validImage'),\n        defaultMessage: 'Only BMP, JPG, JPEG, or PNG images may be used for profile pictures',\n    },\n    imageTooLarge: {\n        id: t('user.settings.general.imageTooLarge'),\n        defaultMessage: 'Unable to upload profile image. File is too large.',\n    },\n    uploadImage: {\n        id: t('user.settings.general.uploadImage'),\n        defaultMessage: \"Click 'Edit' to upload an image.\",\n    },\n    uploadImageMobile: {\n        id: t('user.settings.general.mobile.uploadImage'),\n        defaultMessage: 'Click to upload an image',\n    },\n    fullName: {\n        id: t('user.settings.general.fullName'),\n        defaultMessage: 'Full Name',\n    },\n    nickname: {\n        id: t('user.settings.general.nickname'),\n        defaultMessage: 'Nickname',\n    },\n    username: {\n        id: t('user.settings.general.username'),\n        defaultMessage: 'Username',\n    },\n    profilePicture: {\n        id: t('user.settings.general.profilePicture'),\n        defaultMessage: 'Profile Picture',\n    },\n    close: {\n        id: t('user.settings.general.close'),\n        defaultMessage: 'Close',\n    },\n    position: {\n        id: t('user.settings.general.position'),\n        defaultMessage: 'Position',\n    },\n});\n\nexport type Props = {\n    intl: IntlShape;\n    user: UserProfile;\n    updateSection: (section: string) => void;\n    updateTab: (notifications: string) => void;\n    activeSection?: string;\n    closeModal: () => void;\n    collapseModal: () => void;\n    maxFileSize: number;\n    actions: {\n        logError: ({message, type}: {message: any; type: string}, status: boolean) => void;\n        clearErrors: () => void;\n        updateMe: (user: UserProfile) => Promise<{\n            data: boolean;\n            error?: {\n                server_error_id: string;\n                message: string;\n            };\n        }>;\n        sendVerificationEmail: (email: string) => Promise<{\n            data: boolean;\n            error?: {\n                err: string;\n            };\n        }>;\n        setDefaultProfileImage: (id: string) => void;\n        uploadProfileImage: (id: string, file: File) => Promise<{\n            data: boolean;\n            error?: {\n                message: string;\n            };\n        }>;\n    };\n    requireEmailVerification?: boolean;\n    ldapFirstNameAttributeSet?: boolean;\n    ldapLastNameAttributeSet?: boolean;\n    samlFirstNameAttributeSet?: boolean;\n    samlLastNameAttributeSet?: boolean;\n    ldapNicknameAttributeSet?: boolean;\n    samlNicknameAttributeSet?: boolean;\n    ldapPositionAttributeSet?: boolean;\n    samlPositionAttributeSet?: boolean;\n    ldapPictureAttributeSet?: boolean;\n}\n\ntype State = {\n    username: string;\n    firstName: string;\n    lastName: string;\n    nickname: string;\n    position: string;\n    originalEmail: string;\n    email: string;\n    confirmEmail: string;\n    currentPassword: string;\n    pictureFile: File | null;\n    loadingPicture: boolean;\n    sectionIsSaving: boolean;\n    showSpinner: boolean;\n    resendStatus?: string;\n    clientError?: string | null;\n    serverError?: string | {server_error_id: string; message: string};\n    emailError?: string;\n}\n\nexport class UserSettingsGeneralTab extends React.Component<Props, State> {\n    public submitActive = false;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = this.setupInitialState(props);\n    }\n\n    handleEmailResend = (email: string) => {\n        this.setState({resendStatus: 'sending', showSpinner: true});\n        this.props.actions.sendVerificationEmail(email).then(({data, error: err}) => {\n            if (data) {\n                this.setState({resendStatus: 'success'});\n            } else if (err) {\n                this.setState({resendStatus: 'failure'});\n            }\n        });\n    }\n\n    createEmailResendLink = (email: string) => {\n        return (\n            <span className='resend-verification-wrapper'>\n                <LoadingWrapper\n                    loading={this.state.showSpinner}\n                    text={Utils.localizeMessage('user.settings.general.sending', 'Sending')}\n                >\n                    <a\n                        onClick={() => {\n                            this.handleEmailResend(email);\n                            setTimeout(() => {\n                                this.setState({\n                                    showSpinner: false,\n                                });\n                            }, 500);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.general.sendAgain'\n                            defaultMessage='Send again'\n                        />\n                    </a>\n                </LoadingWrapper>\n            </span>\n        );\n    }\n\n    submitUsername = () => {\n        const user = Object.assign({}, this.props.user);\n        const username = this.state.username.trim().toLowerCase();\n\n        const {formatMessage} = this.props.intl;\n        const usernameError = Utils.isValidUsername(username);\n        if (usernameError) {\n            let errObj;\n            if (usernameError.id === ValidationErrors.RESERVED_NAME) {\n                errObj = {clientError: formatMessage(holders.usernameReserved), serverError: ''};\n            } else {\n                errObj = {clientError: formatMessage(holders.usernameRestrictions, {min: Constants.MIN_USERNAME_LENGTH, max: Constants.MAX_USERNAME_LENGTH}), serverError: ''};\n            }\n            this.setState(errObj);\n            return;\n        }\n\n        if (user.username === username) {\n            this.updateSection('');\n            return;\n        }\n\n        user.username = username;\n\n        trackEvent('settings', 'user_settings_update', {field: 'username'});\n\n        this.submitUser(user, false);\n    }\n\n    submitNickname = () => {\n        const user = Object.assign({}, this.props.user);\n        const nickname = this.state.nickname.trim();\n\n        if (user.nickname === nickname) {\n            this.updateSection('');\n            return;\n        }\n\n        user.nickname = nickname;\n\n        trackEvent('settings', 'user_settings_update', {field: 'nickname'});\n\n        this.submitUser(user, false);\n    }\n\n    submitName = () => {\n        const user = Object.assign({}, this.props.user);\n        const firstName = this.state.firstName.trim();\n        const lastName = this.state.lastName.trim();\n\n        if (user.first_name === firstName && user.last_name === lastName) {\n            this.updateSection('');\n            return;\n        }\n\n        user.first_name = firstName;\n        user.last_name = lastName;\n\n        trackEvent('settings', 'user_settings_update', {field: 'fullname'});\n\n        this.submitUser(user, false);\n    }\n\n    submitEmail = () => {\n        const user = Object.assign({}, this.props.user);\n        const email = this.state.email.trim().toLowerCase();\n        const confirmEmail = this.state.confirmEmail.trim().toLowerCase();\n        const currentPassword = this.state.currentPassword;\n\n        const {formatMessage} = this.props.intl;\n\n        if (email === user.email && (confirmEmail === '' || confirmEmail === user.email)) {\n            this.updateSection('');\n            return;\n        }\n\n        if (email === '' || !isEmail(email)) {\n            this.setState({emailError: formatMessage(holders.validEmail), clientError: '', serverError: ''});\n            return;\n        }\n\n        if (email !== confirmEmail) {\n            this.setState({emailError: formatMessage(holders.emailMatch), clientError: '', serverError: ''});\n            return;\n        }\n\n        if (currentPassword === '') {\n            this.setState({emailError: formatMessage(holders.emptyPassword), clientError: '', serverError: ''});\n            return;\n        }\n\n        user.email = email;\n        user.password = currentPassword;\n        trackEvent('settings', 'user_settings_update', {field: 'email'});\n        this.submitUser(user, true);\n    }\n\n    submitUser = (user: UserProfile, emailUpdated: boolean) => {\n        const {formatMessage} = this.props.intl;\n        this.setState({sectionIsSaving: true});\n\n        this.props.actions.updateMe(user).\n            then(({data, error: err}) => {\n                if (data) {\n                    this.updateSection('');\n\n                    const verificationEnabled = this.props.requireEmailVerification && emailUpdated;\n                    if (verificationEnabled) {\n                        this.props.actions.clearErrors();\n                        this.props.actions.logError({\n                            message: AnnouncementBarMessages.EMAIL_VERIFICATION_REQUIRED,\n                            type: AnnouncementBarTypes.SUCCESS,\n                        }, true);\n                    }\n                } else if (err) {\n                    let serverError;\n                    if (err.server_error_id &&\n                        err.server_error_id === 'api.user.check_user_password.invalid.app_error') {\n                        serverError = formatMessage(holders.incorrectPassword);\n                    } else if (err.server_error_id === 'app.user.group_name_conflict') {\n                        serverError = formatMessage(holders.usernameGroupNameUniqueness);\n                    } else if (err.message) {\n                        serverError = err.message;\n                    } else {\n                        serverError = err;\n                    }\n                    this.setState({serverError, emailError: '', clientError: '', sectionIsSaving: false});\n                }\n            });\n    }\n\n    setDefaultProfilePicture = async () => {\n        try {\n            await this.props.actions.setDefaultProfileImage(this.props.user.id);\n            this.updateSection('');\n            this.submitActive = false;\n        } catch (err) {\n            let serverError;\n            if (err.message) {\n                serverError = err.message;\n            } else {\n                serverError = err;\n            }\n            this.setState({serverError, emailError: '', clientError: '', sectionIsSaving: false});\n        }\n    }\n\n    submitPicture = () => {\n        if (!this.state.pictureFile) {\n            return;\n        }\n\n        if (!this.submitActive) {\n            return;\n        }\n\n        trackEvent('settings', 'user_settings_update', {field: 'picture'});\n\n        const {formatMessage} = this.props.intl;\n        const file = this.state.pictureFile;\n\n        if (!AcceptedProfileImageTypes.includes(file.type)) {\n            this.setState({clientError: formatMessage(holders.validImage), serverError: ''});\n            return;\n        } else if (file.size > this.props.maxFileSize) {\n            this.setState({clientError: formatMessage(holders.imageTooLarge), serverError: ''});\n            return;\n        }\n\n        this.setState({loadingPicture: true});\n\n        this.props.actions.uploadProfileImage(this.props.user.id, file).\n            then(({data, error: err}) => {\n                if (data) {\n                    this.updateSection('');\n                    this.submitActive = false;\n                } else if (err) {\n                    const state = this.setupInitialState(this.props);\n                    state.serverError = err.message;\n                    this.setState(state);\n                }\n            });\n    }\n\n    submitPosition = () => {\n        const user = Object.assign({}, this.props.user);\n        const position = this.state.position.trim();\n\n        if (user.position === position) {\n            this.updateSection('');\n            return;\n        }\n\n        user.position = position;\n\n        trackEvent('settings', 'user_settings_update', {field: 'position'});\n\n        this.submitUser(user, false);\n    }\n\n    updateUsername = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({username: e.target.value});\n    }\n\n    updateFirstName = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({firstName: e.target.value});\n    }\n\n    updateLastName = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({lastName: e.target.value});\n    }\n\n    updateNickname = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({nickname: e.target.value});\n    }\n\n    updatePosition = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({position: e.target.value});\n    }\n\n    updateEmail = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({email: e.target.value});\n    }\n\n    updateConfirmEmail = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({confirmEmail: e.target.value});\n    }\n\n    updateCurrentPassword = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({currentPassword: e.target.value});\n    }\n\n    updatePicture = (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files && e.target.files[0]) {\n            this.setState({pictureFile: e.target.files[0]});\n\n            this.submitActive = true;\n            this.setState({clientError: null});\n        } else {\n            this.setState({pictureFile: null});\n        }\n    }\n\n    updateSection = (section: string) => {\n        this.setState(Object.assign({}, this.setupInitialState(this.props), {clientError: '', serverError: '', emailError: '', sectionIsSaving: false}));\n        this.submitActive = false;\n        this.props.updateSection(section);\n    }\n\n    setupInitialState(props: Props) {\n        const user = props.user;\n\n        return {\n            username: user.username,\n            firstName: user.first_name,\n            lastName: user.last_name,\n            nickname: user.nickname,\n            position: user.position,\n            originalEmail: user.email,\n            email: '',\n            confirmEmail: '',\n            currentPassword: '',\n            pictureFile: null,\n            loadingPicture: false,\n            sectionIsSaving: false,\n            showSpinner: false,\n            serverError: '',\n        };\n    }\n\n    createEmailSection() {\n        const {formatMessage} = this.props.intl;\n\n        let emailSection;\n        if (this.props.activeSection === 'email') {\n            const emailVerificationEnabled = this.props.requireEmailVerification;\n            const inputs = [];\n\n            let helpText = (\n                <FormattedMessage\n                    id='user.settings.general.emailHelp1'\n                    defaultMessage='Email is used for sign-in, notifications, and password reset. Email requires verification if changed.'\n                />\n            );\n\n            if (!emailVerificationEnabled) {\n                helpText = (\n                    <FormattedMessage\n                        id='user.settings.general.emailHelp3'\n                        defaultMessage='Email is used for sign-in, notifications, and password reset.'\n                    />\n                );\n            }\n\n            let submit = null;\n\n            if (this.props.user.auth_service === '') {\n                inputs.push(\n                    <div key='currentEmailSetting'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.currentEmail'\n                                    defaultMessage='Current Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <label className='control-label word-break--all text-left'>{this.state.originalEmail}</label>\n                            </div>\n                        </div>\n                    </div>,\n                );\n\n                inputs.push(\n                    <div key='emailSetting'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.newEmail'\n                                    defaultMessage='New Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <input\n                                    autoFocus={true}\n                                    id='primaryEmail'\n                                    className='form-control'\n                                    type='email'\n                                    onChange={this.updateEmail}\n                                    maxLength={Constants.MAX_EMAIL_LENGTH}\n                                    value={this.state.email}\n                                    aria-label={formatMessage({id: 'user.settings.general.newEmail', defaultMessage: 'New Email'})}\n                                />\n                            </div>\n                        </div>\n                    </div>,\n                );\n\n                inputs.push(\n                    <div key='confirmEmailSetting'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.confirmEmail'\n                                    defaultMessage='Confirm Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <input\n                                    id='confirmEmail'\n                                    className='form-control'\n                                    type='email'\n                                    onChange={this.updateConfirmEmail}\n                                    maxLength={Constants.MAX_EMAIL_LENGTH}\n                                    value={this.state.confirmEmail}\n                                    aria-label={formatMessage({id: 'user.settings.general.confirmEmail', defaultMessage: 'Confirm Email'})}\n                                />\n                            </div>\n                        </div>\n                    </div>,\n                );\n\n                inputs.push(\n                    <div key='currentPassword'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.currentPassword'\n                                    defaultMessage='Current Password'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <input\n                                    id='currentPassword'\n                                    className='form-control'\n                                    type='password'\n                                    onChange={this.updateCurrentPassword}\n                                    value={this.state.currentPassword}\n                                    aria-label={formatMessage({id: 'user.settings.general.currentPassword', defaultMessage: 'Current Password'})}\n                                />\n                            </div>\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n\n                submit = this.submitEmail;\n            } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailGitlabCantUpdate'\n                                defaultMessage='Login occurs through GitLab. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n            } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailGoogleCantUpdate'\n                                defaultMessage='Login occurs through Google Apps. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n            } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailOffice365CantUpdate'\n                                defaultMessage='Login occurs through Office 365. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n            } else if (this.props.user.auth_service === Constants.OPENID_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailOpenIdCantUpdate'\n                                defaultMessage='Login occurs through OpenID Connect. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n            } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='pb-2'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailLdapCantUpdate'\n                                defaultMessage='Login occurs through AD/LDAP. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='pb-2'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailSamlCantUpdate'\n                                defaultMessage='Login occurs through SAML. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n            }\n\n            emailSection = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.general.email'\n                            defaultMessage='Email'\n                        />\n                    }\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={this.state.serverError}\n                    clientError={this.state.emailError}\n                    updateSection={this.updateSection}\n                />\n            );\n        } else {\n            let describe: JSX.Element|string = '';\n            if (this.props.user.auth_service === '') {\n                describe = this.props.user.email;\n            } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginGitlab'\n                        defaultMessage='Login done through GitLab ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginGoogle'\n                        defaultMessage='Login done through Google Apps ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginOffice365'\n                        defaultMessage='Login done through Office 365 ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginLdap'\n                        defaultMessage='Login done through AD/LDAP ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginSaml'\n                        defaultMessage='Login done through SAML ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            }\n\n            emailSection = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.general.email'\n                            defaultMessage='Email'\n                        />\n                    }\n                    describe={describe}\n                    section={'email'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return emailSection;\n    }\n\n    render() {\n        const user = this.props.user;\n        const {formatMessage} = this.props.intl;\n\n        let clientError = null;\n        if (this.state.clientError) {\n            clientError = this.state.clientError;\n        }\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = this.state.serverError;\n        }\n\n        let nameSection;\n        const inputs = [];\n\n        if (this.props.activeSection === 'name') {\n            let extraInfo;\n            let submit = null;\n            if (\n                (this.props.user.auth_service === Constants.LDAP_SERVICE &&\n                    (this.props.ldapFirstNameAttributeSet || this.props.ldapLastNameAttributeSet)) ||\n                (this.props.user.auth_service === Constants.SAML_SERVICE &&\n                    (this.props.samlFirstNameAttributeSet || this.props.samlLastNameAttributeSet)) ||\n                (Constants.OAUTH_SERVICES.includes(this.props.user.auth_service) && false)\n            ) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                inputs.push(\n                    <div\n                        key='firstNameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.general.firstName'\n                                defaultMessage='First Name'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='firstName'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateFirstName}\n                                maxLength={Constants.MAX_FIRSTNAME_LENGTH}\n                                value={this.state.firstName}\n                                onFocus={Utils.moveCursorToEnd}\n                                aria-label={formatMessage({id: 'user.settings.general.firstName', defaultMessage: 'First Name'})}\n                            />\n                        </div>\n                    </div>,\n                );\n\n                inputs.push(\n                    <div\n                        key='lastNameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.general.lastName'\n                                defaultMessage='Last Name'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='lastName'\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateLastName}\n                                maxLength={Constants.MAX_LASTNAME_LENGTH}\n                                value={this.state.lastName}\n                                aria-label={formatMessage({id: 'user.settings.general.lastName', defaultMessage: 'Last Name'})}\n                            />\n                        </div>\n                    </div>,\n                );\n\n                const notifClick = (e: React.MouseEvent<HTMLAnchorElement>) => {\n                    e.preventDefault();\n                    this.updateSection('');\n                    this.props.updateTab('notifications');\n                };\n\n                const notifLink = (\n                    <a\n                        href='#'\n                        onClick={notifClick.bind(this)}\n                    >\n                        <FormattedMessage\n                            id='user.settings.general.notificationsLink'\n                            defaultMessage='Notifications'\n                        />\n                    </a>\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.notificationsExtra'\n                            defaultMessage='By default, you will receive mention notifications when someone types your first name. Go to {notify} settings to change this default.'\n                            values={{\n                                notify: (notifLink),\n                            }}\n                        />\n                    </span>\n                );\n\n                submit = this.submitName;\n            }\n\n            nameSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.fullName)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let describe: JSX.Element|string = '';\n\n            if (user.first_name && user.last_name) {\n                describe = user.first_name + ' ' + user.last_name;\n            } else if (user.first_name) {\n                describe = user.first_name;\n            } else if (user.last_name) {\n                describe = user.last_name;\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.emptyName'\n                        defaultMessage=\"Click 'Edit' to add your full name\"\n                    />\n                );\n                if (Utils.isMobile()) {\n                    describe = (\n                        <FormattedMessage\n                            id='user.settings.general.mobile.emptyName'\n                            defaultMessage='Click to add your full name'\n                        />\n                    );\n                }\n            }\n\n            nameSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.fullName)}\n                    describe={describe}\n                    section={'name'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        let nicknameSection;\n        if (this.props.activeSection === 'nickname') {\n            let extraInfo;\n            let submit = null;\n            if ((this.props.user.auth_service === 'ldap' && this.props.ldapNicknameAttributeSet) || (this.props.user.auth_service === Constants.SAML_SERVICE && this.props.samlNicknameAttributeSet)) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                let nicknameLabel: JSX.Element|string = (\n                    <FormattedMessage\n                        id='user.settings.general.nickname'\n                        defaultMessage='Nickname'\n                    />\n                );\n                if (Utils.isMobile()) {\n                    nicknameLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='nicknameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{nicknameLabel}</label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='nickname'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateNickname}\n                                value={this.state.nickname}\n                                maxLength={Constants.MAX_NICKNAME_LENGTH}\n                                autoCapitalize='off'\n                                aria-label={formatMessage({id: 'user.settings.general.nickname', defaultMessage: 'Nickname'})}\n                            />\n                        </div>\n                    </div>,\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.nicknameExtra'\n                            defaultMessage='Use Nickname for a name you might be called that is different from your first name and username. This is most often used when two or more people have similar sounding names and usernames.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitNickname;\n            }\n\n            nicknameSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.nickname)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let describe: JSX.Element|string = '';\n            if (user.nickname) {\n                describe = user.nickname;\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.emptyNickname'\n                        defaultMessage=\"Click 'Edit' to add a nickname\"\n                    />\n                );\n                if (Utils.isMobile()) {\n                    describe = (\n                        <FormattedMessage\n                            id='user.settings.general.mobile.emptyNickname'\n                            defaultMessage='Click to add a nickname'\n                        />\n                    );\n                }\n            }\n\n            nicknameSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.nickname)}\n                    describe={describe}\n                    section={'nickname'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        let usernameSection;\n        if (this.props.activeSection === 'username') {\n            let extraInfo;\n            let submit = null;\n            if (this.props.user.auth_service === '' || this.props.user.auth_service !== '') {\n                let usernameLabel: JSX.Element | string = (\n                    <FormattedMessage\n                        id='user.settings.general.username'\n                        defaultMessage='Username'\n                    />\n                );\n                if (Utils.isMobile()) {\n                    usernameLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='usernameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{usernameLabel}</label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='username'\n                                autoFocus={true}\n                                maxLength={Constants.MAX_USERNAME_LENGTH}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateUsername}\n                                value={this.state.username}\n                                autoCapitalize='off'\n                                onFocus={Utils.moveCursorToEnd}\n                                aria-label={formatMessage({id: 'user.settings.general.username', defaultMessage: 'Username'})}\n                            />\n                        </div>\n                    </div>,\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.usernameInfo'\n                            defaultMessage='Pick something easy for teammates to recognize and recall.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitUsername;\n            } else {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            }\n\n            usernameSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.username)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            usernameSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.username)}\n                    describe={this.props.user.username}\n                    section={'username'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        let positionSection;\n        if (this.props.activeSection === 'position') {\n            let extraInfo: JSX.Element|string;\n            let submit = null;\n            if ((this.props.user.auth_service === Constants.LDAP_SERVICE && this.props.ldapPositionAttributeSet) || (this.props.user.auth_service === Constants.SAML_SERVICE && this.props.samlPositionAttributeSet)) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                let positionLabel: JSX.Element | string = (\n                    <FormattedMessage\n                        id='user.settings.general.position'\n                        defaultMessage='Position'\n                    />\n                );\n                if (Utils.isMobile()) {\n                    positionLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='positionSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{positionLabel}</label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='position'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updatePosition}\n                                value={this.state.position}\n                                maxLength={Constants.MAX_POSITION_LENGTH}\n                                autoCapitalize='off'\n                                onFocus={Utils.moveCursorToEnd}\n                                aria-label={formatMessage({id: 'user.settings.general.position', defaultMessage: 'Position'})}\n                            />\n                        </div>\n                    </div>,\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.positionExtra'\n                            defaultMessage='Use Position for your role or job title. This will be shown in your profile popover.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitPosition;\n            }\n\n            positionSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.position)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let describe: JSX.Element|string = '';\n            if (user.position) {\n                describe = user.position;\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.emptyPosition'\n                        defaultMessage=\"Click 'Edit' to add your job title / position\"\n                    />\n                );\n                if (Utils.isMobile()) {\n                    describe = (\n                        <FormattedMessage\n                            id='user.settings.general.mobile.emptyPosition'\n                            defaultMessage='Click to add your job title / position'\n                        />\n                    );\n                }\n            }\n\n            positionSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.position)}\n                    describe={describe}\n                    section={'position'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        const emailSection = this.createEmailSection();\n\n        let pictureSection;\n        if (this.props.activeSection === 'picture') {\n            let submit = null;\n            let setDefault = null;\n            let helpText = null;\n            let imgSrc = null;\n\n            if ((this.props.user.auth_service === Constants.LDAP_SERVICE || this.props.user.auth_service === Constants.SAML_SERVICE) && this.props.ldapPictureAttributeSet) {\n                helpText = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                submit = this.submitPicture;\n                setDefault = user.last_picture_update > 0 ? this.setDefaultProfilePicture : null;\n                imgSrc = Utils.imageURLForUser(user.id, user.last_picture_update);\n                helpText = (\n                    <FormattedMessage\n                        id={'setting_picture.help.profile'}\n                        defaultMessage='Upload a picture in BMP, JPG, JPEG, or PNG format. Maximum file size: {max}'\n                        values={{max: Utils.fileSizeToString(this.props.maxFileSize)}}\n                    />\n                );\n            }\n\n            pictureSection = (\n                <SettingPicture\n                    title={formatMessage(holders.profilePicture)}\n                    onSubmit={submit}\n                    onSetDefault={setDefault}\n                    src={imgSrc}\n                    defaultImageSrc={Utils.defaultImageURLForUser(user.id)}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={(e: MouseEvent) => {\n                        this.updateSection('');\n                        e.preventDefault();\n                    }}\n                    file={this.state.pictureFile}\n                    onFileChange={this.updatePicture}\n                    submitActive={this.submitActive}\n                    loadingPicture={this.state.loadingPicture}\n                    maxFileSize={this.props.maxFileSize}\n                    helpText={helpText}\n                />\n            );\n        } else {\n            let minMessage: JSX.Element|string = formatMessage(holders.uploadImage);\n            if (Utils.isMobile()) {\n                minMessage = formatMessage(holders.uploadImageMobile);\n            }\n            if (user.last_picture_update) {\n                minMessage = (\n                    <FormattedMessage\n                        id='user.settings.general.imageUpdated'\n                        defaultMessage='Image last updated {date}'\n                        values={{\n                            date: (\n                                <FormattedDate\n                                    value={new Date(user.last_picture_update)}\n                                    day='2-digit'\n                                    month='short'\n                                    year='numeric'\n                                />\n                            ),\n                        }}\n                    />\n                );\n            }\n            pictureSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.profilePicture)}\n                    describe={minMessage}\n                    section={'picture'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <div id='generalSettings'>\n                <div className='modal-header'>\n                    <button\n                        id='closeUserSettings'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label={formatMessage(holders.close)}\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <LocalizedIcon\n                                className='fa fa-angle-left'\n                                title={{id: t('generic_icons.collapse'), defaultMessage: 'Collapse Icon'}}\n                                onClick={this.props.collapseModal}\n                            />\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.modal.profile'\n                            defaultMessage='Profile'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3\n                        id='generalSettingsTitle'\n                        className='tab-header'\n                    >\n                        <FormattedMessage\n                            id='user.settings.modal.profile'\n                            defaultMessage='Profile'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {nameSection}\n                    <div className='divider-light'/>\n                    {usernameSection}\n                    <div className='divider-light'/>\n                    {nicknameSection}\n                    <div className='divider-light'/>\n                    {positionSection}\n                    <div className='divider-light'/>\n                    {emailSection}\n                    <div className='divider-light'/>\n                    {pictureSection}\n                    <div className='divider-dark'/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(UserSettingsGeneralTab);\n/* eslint-enable react/no-string-refs */\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\n\nimport {\n    updateMe,\n    sendVerificationEmail,\n    setDefaultProfileImage,\n    uploadProfileImage,\n} from 'mattermost-redux/actions/users';\nimport {clearErrors, logError} from 'mattermost-redux/actions/errors';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {GlobalState} from '@mattermost/types/store';\nimport {ActionFunc} from 'mattermost-redux/types/actions';\n\nimport UserSettingsGeneralTab, {Props} from './user_settings_general';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n\n    const requireEmailVerification = config.RequireEmailVerification === 'true';\n    const maxFileSize = parseInt(config.MaxFileSize!, 10);\n    const ldapFirstNameAttributeSet = config.LdapFirstNameAttributeSet === 'true';\n    const ldapLastNameAttributeSet = config.LdapLastNameAttributeSet === 'true';\n    const samlFirstNameAttributeSet = config.SamlFirstNameAttributeSet === 'true';\n    const samlLastNameAttributeSet = config.SamlLastNameAttributeSet === 'true';\n    const ldapNicknameAttributeSet = config.LdapNicknameAttributeSet === 'true';\n    const samlNicknameAttributeSet = config.SamlNicknameAttributeSet === 'true';\n    const samlPositionAttributeSet = config.SamlPositionAttributeSet === 'true';\n    const ldapPositionAttributeSet = config.LdapPositionAttributeSet === 'true';\n    const ldapPictureAttributeSet = config.LdapPictureAttributeSet === 'true';\n\n    return {\n        requireEmailVerification,\n        maxFileSize,\n        ldapFirstNameAttributeSet,\n        ldapLastNameAttributeSet,\n        samlFirstNameAttributeSet,\n        samlLastNameAttributeSet,\n        ldapNicknameAttributeSet,\n        samlNicknameAttributeSet,\n        samlPositionAttributeSet,\n        ldapPositionAttributeSet,\n        ldapPictureAttributeSet,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Props['actions']>({\n            logError,\n            clearErrors,\n            updateMe,\n            sendVerificationEmail,\n            setDefaultProfileImage,\n            uploadProfileImage,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsGeneralTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactSelect from 'react-select';\nimport {FormattedMessage} from 'react-intl';\n\nimport semver from 'semver';\n\nimport {NotificationLevels} from 'utils/constants';\nimport * as Utils from 'utils/utils';\nimport {t} from 'utils/i18n';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport {isDesktopApp} from 'utils/user_agent';\n\nexport default class DesktopNotificationSettings extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        const selectedOption = {value: props.selectedSound, label: props.selectedSound};\n        this.state = {\n            selectedOption,\n            blurDropdown: false,\n        };\n        this.dropdownSoundRef = React.createRef();\n    }\n\n    handleMinUpdateSection = (section) => {\n        this.props.updateSection(section);\n\n        this.props.cancel();\n    }\n\n    handleMaxUpdateSection = (section) => {\n        this.props.updateSection(section);\n    }\n\n    handleOnChange = (e) => {\n        const key = e.currentTarget.getAttribute('data-key');\n        const value = e.currentTarget.getAttribute('data-value');\n        this.props.setParentState(key, value);\n    }\n\n    handleThreadsOnChange = (e) => {\n        const value = e.target.checked ? NotificationLevels.ALL : NotificationLevels.MENTION;\n        this.props.setParentState('desktopThreads', value);\n    }\n\n    setDesktopNotificationSound = (selectedOption) => {\n        this.props.setParentState('desktopNotificationSound', selectedOption.value);\n        this.setState({selectedOption});\n        Utils.tryNotificationSound(selectedOption.value);\n    }\n\n    blurDropdown() {\n        if (!this.state.blurDropdown) {\n            this.setState({blurDropdown: true});\n            if (this.dropdownSoundRef.current) {\n                this.dropdownSoundRef.current.blur();\n            }\n        }\n    }\n\n    buildMaximizedSetting = () => {\n        const inputs = [];\n\n        const activityRadio = [false, false, false];\n        if (this.props.activity === NotificationLevels.MENTION) {\n            activityRadio[1] = true;\n        } else if (this.props.activity === NotificationLevels.NONE) {\n            activityRadio[2] = true;\n        } else {\n            activityRadio[0] = true;\n        }\n\n        let soundSection;\n        let notificationSelection;\n        let threadsNotificationSelection;\n        if (this.props.activity !== NotificationLevels.NONE) {\n            const soundRadio = [false, false];\n            if (this.props.sound === 'false') {\n                soundRadio[1] = true;\n            } else {\n                soundRadio[0] = true;\n            }\n\n            if (this.props.sound === 'true') {\n                const sounds = Array.from(Utils.notificationSounds.keys());\n                const options = sounds.map((sound) => {\n                    return {value: sound, label: sound};\n                });\n\n                if (!isDesktopApp() || (window.desktop && semver.gte(window.desktop.version, '4.6.0'))) {\n                    notificationSelection = (<div className='pt-2'>\n                        <ReactSelect\n                            className='react-select notification-sound-dropdown'\n                            classNamePrefix='react-select'\n                            id='displaySoundNotification'\n                            options={options}\n                            clearable={false}\n                            onChange={this.setDesktopNotificationSound}\n                            value={this.state.selectedOption}\n                            isSearchable={false}\n                            ref={this.dropdownSoundRef}\n                        /></div>);\n                }\n            }\n\n            if (Utils.hasSoundOptions()) {\n                soundSection = (\n                    <fieldset>\n                        <legend className='form-legend'>\n                            <FormattedMessage\n                                id='user.settings.notifications.desktop.sound'\n                                defaultMessage='Notification sound'\n                            />\n                        </legend>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='soundOn'\n                                    type='radio'\n                                    name='notificationSounds'\n                                    checked={soundRadio[0]}\n                                    data-key={'desktopSound'}\n                                    data-value={'true'}\n                                    onChange={this.handleOnChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.on'\n                                    defaultMessage='On'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='soundOff'\n                                    type='radio'\n                                    name='notificationSounds'\n                                    checked={soundRadio[1]}\n                                    data-key={'desktopSound'}\n                                    data-value={'false'}\n                                    onChange={this.handleOnChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.off'\n                                    defaultMessage='Off'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        {notificationSelection}\n                        <div className='mt-5'>\n                            <FormattedMessage\n                                id='user.settings.notifications.sounds_info'\n                                defaultMessage='Notification sounds are available on Firefox, Edge, Safari, Chrome and Mattermost Desktop Apps.'\n                            />\n                        </div>\n                    </fieldset>\n                );\n            } else {\n                soundSection = (\n                    <fieldset>\n                        <legend className='form-legend'>\n                            <FormattedMessage\n                                id='user.settings.notifications.desktop.sound'\n                                defaultMessage='Notification sound'\n                            />\n                        </legend>\n                        <br/>\n                        <FormattedMessage\n                            id='user.settings.notifications.soundConfig'\n                            defaultMessage='Please configure notification sounds in your browser settings'\n                        />\n                    </fieldset>\n                );\n            }\n        }\n\n        if (this.props.isCollapsedThreadsEnabled && NotificationLevels.MENTION === this.props.activity) {\n            threadsNotificationSelection = (\n                <>\n                    <fieldset>\n                        <legend className='form-legend'>\n                            <FormattedMessage\n                                id='user.settings.notifications.threads.desktop'\n                                defaultMessage='Thread reply notifications'\n                            />\n                        </legend>\n                        <div className='checkbox'>\n                            <label>\n                                <input\n                                    id='desktopThreadsNotificationAllActivity'\n                                    type='checkbox'\n                                    name='desktopThreadsNotificationLevel'\n                                    checked={this.props.threads === NotificationLevels.ALL}\n                                    onChange={this.handleThreadsOnChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.threads.allActivity'\n                                    defaultMessage={'Notify me about threads I\\'m following'}\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='mt-5'>\n                            <FormattedMessage\n                                id='user.settings.notifications.threads'\n                                defaultMessage={'When enabled, any reply to a thread you\\'re following will send a desktop notification.'}\n                            />\n                        </div>\n                    </fieldset>\n                    <hr/>\n                </>\n            );\n        }\n\n        inputs.push(\n            <div key='userNotificationLevelOption'>\n                <fieldset>\n                    <legend className='form-legend'>\n                        <FormattedMessage\n                            id='user.settings.notifications.desktop'\n                            defaultMessage='Send desktop notifications'\n                        />\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='desktopNotificationAllActivity'\n                                type='radio'\n                                name='desktopNotificationLevel'\n                                checked={activityRadio[0]}\n                                data-key={'desktopActivity'}\n                                data-value={NotificationLevels.ALL}\n                                onChange={this.handleOnChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.allActivity'\n                                defaultMessage='For all activity'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='desktopNotificationMentions'\n                                type='radio'\n                                name='desktopNotificationLevel'\n                                checked={activityRadio[1]}\n                                data-key={'desktopActivity'}\n                                data-value={NotificationLevels.MENTION}\n                                onChange={this.handleOnChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.onlyMentions'\n                                defaultMessage='Only for mentions and direct messages'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='desktopNotificationNever'\n                                type='radio'\n                                name='desktopNotificationLevel'\n                                checked={activityRadio[2]}\n                                data-key={'desktopActivity'}\n                                data-value={NotificationLevels.NONE}\n                                onChange={this.handleOnChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.never'\n                                defaultMessage='Never'\n                            />\n                        </label>\n                    </div>\n                    <div className='mt-5'>\n                        <FormattedMessage\n                            id='user.settings.notifications.info'\n                            defaultMessage='Desktop notifications are available on Edge, Firefox, Safari, Chrome and Mattermost Desktop Apps.'\n                        />\n                    </div>\n                </fieldset>\n                <hr/>\n                {threadsNotificationSelection}\n                {soundSection}\n            </div>,\n        );\n\n        return (\n            <SettingItemMax\n                title={Utils.localizeMessage('user.settings.notifications.desktop.title', 'Desktop Notifications')}\n                inputs={inputs}\n                submit={this.props.submit}\n                saving={this.props.saving}\n                server_error={this.props.error}\n                updateSection={this.handleMaxUpdateSection}\n            />\n        );\n    }\n\n    buildMinimizedSetting = () => {\n        let formattedMessageProps;\n        const hasSoundOption = Utils.hasSoundOptions();\n        if (this.props.activity === NotificationLevels.MENTION) {\n            if (hasSoundOption && this.props.sound !== 'false') {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.mentionsSound'),\n                    defaultMessage: 'For mentions and direct messages, with sound',\n                };\n            } else if (hasSoundOption && this.props.sound === 'false') {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.mentionsNoSound'),\n                    defaultMessage: 'For mentions and direct messages, without sound',\n                };\n            } else {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.mentionsSoundHidden'),\n                    defaultMessage: 'For mentions and direct messages',\n                };\n            }\n        } else if (this.props.activity === NotificationLevels.NONE) {\n            formattedMessageProps = {\n                id: t('user.settings.notifications.off'),\n                defaultMessage: 'Off',\n            };\n        } else {\n            if (hasSoundOption && this.props.sound !== 'false') { //eslint-disable-line no-lonely-if\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.allSound'),\n                    defaultMessage: 'For all activity, with sound',\n                };\n            } else if (hasSoundOption && this.props.sound === 'false') {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.allNoSound'),\n                    defaultMessage: 'For all activity, without sound',\n                };\n            } else {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.allSoundHidden'),\n                    defaultMessage: 'For all activity',\n                };\n            }\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.notifications.desktop.title', 'Desktop Notifications')}\n                describe={<FormattedMessage {...formattedMessageProps}/>}\n                focused={this.props.focused}\n                section={'desktop'}\n                updateSection={this.handleMinUpdateSection}\n            />\n        );\n    }\n\n    componentDidUpdate() {\n        this.blurDropdown();\n    }\n\n    render() {\n        if (this.props.active) {\n            return this.buildMaximizedSetting();\n        }\n\n        return this.buildMinimizedSetting();\n    }\n}\n\nDesktopNotificationSettings.propTypes = {\n    activity: PropTypes.string.isRequired,\n    threads: PropTypes.string.isRequired,\n    sound: PropTypes.string.isRequired,\n    updateSection: PropTypes.func,\n    setParentState: PropTypes.func,\n    submit: PropTypes.func,\n    cancel: PropTypes.func,\n    error: PropTypes.string,\n    active: PropTypes.bool,\n    saving: PropTypes.bool,\n    focused: PropTypes.bool,\n    selectedSound: PropTypes.string,\n    isCollapsedThreadsEnabled: PropTypes.bool.isRequired,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {Preferences} from '../constants';\nexport function getEmailInterval(enableEmailNotification: boolean, enableEmailBatching: boolean, emailIntervalPreference: number): number {\n    const {\n        INTERVAL_NEVER,\n        INTERVAL_IMMEDIATE,\n        INTERVAL_FIFTEEN_MINUTES,\n        INTERVAL_HOUR,\n    } = Preferences;\n\n    const validValuesWithEmailBatching = [INTERVAL_IMMEDIATE, INTERVAL_NEVER, INTERVAL_FIFTEEN_MINUTES, INTERVAL_HOUR];\n    const validValuesWithoutEmailBatching = [INTERVAL_IMMEDIATE, INTERVAL_NEVER];\n\n    if (!enableEmailNotification) {\n        return INTERVAL_NEVER;\n    } else if (enableEmailBatching && validValuesWithEmailBatching.indexOf(emailIntervalPreference) === -1) {\n        // When email batching is enabled, the default interval is 15 minutes\n        return INTERVAL_FIFTEEN_MINUTES;\n    } else if (!enableEmailBatching && validValuesWithoutEmailBatching.indexOf(emailIntervalPreference) === -1) {\n        // When email batching is not enabled, the default interval is immediately\n        return INTERVAL_IMMEDIATE;\n    } else if (enableEmailNotification && emailIntervalPreference === INTERVAL_NEVER) {\n        // When email notification is enabled, the default interval is immediately\n        return INTERVAL_IMMEDIATE;\n    }\n\n    return emailIntervalPreference;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {getEmailInterval} from 'mattermost-redux/utils/notify_props';\nimport {PreferenceType} from '@mattermost/types/preferences';\n\nimport {Preferences, NotificationLevels} from 'utils/constants';\nimport {localizeMessage} from 'utils/utils';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nconst SECONDS_PER_MINUTE = 60;\n\ntype Props = {\n    currentUserId: string;\n    activeSection: string;\n    updateSection: (section: string) => void;\n    enableEmail: boolean;\n    emailInterval: number;\n    onSubmit: () => void;\n    onCancel: () => void;\n    onChange: (enableEmail: string) => void;\n    serverError?: string;\n    saving?: boolean;\n    sendEmailNotifications: boolean;\n    enableEmailBatching: boolean;\n    actions: {\n        savePreferences: (currentUserId: string, emailIntervalPreference: PreferenceType[]) =>\n        Promise<{data: boolean}>;\n    };\n    isCollapsedThreadsEnabled: boolean;\n    threads: string;\n    setParentState: (key: string, value: any) => void;\n};\n\ntype State = {\n    activeSection: string;\n    emailInterval: number;\n    enableEmail: boolean;\n    enableEmailBatching: boolean;\n    sendEmailNotifications: boolean;\n    newInterval: number;\n};\n\nexport default class EmailNotificationSetting extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        const {\n            emailInterval,\n            enableEmail,\n            enableEmailBatching,\n            sendEmailNotifications,\n            activeSection,\n        } = props;\n\n        this.state = {\n            activeSection,\n            emailInterval,\n            enableEmail,\n            enableEmailBatching,\n            sendEmailNotifications,\n            newInterval: getEmailInterval(enableEmail && sendEmailNotifications, enableEmailBatching, emailInterval),\n        };\n    }\n\n    static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n        const {\n            emailInterval,\n            enableEmail,\n            enableEmailBatching,\n            sendEmailNotifications,\n            activeSection,\n        } = nextProps;\n\n        // If we're re-opening this section, reset to defaults from props\n        if (activeSection === 'email' && prevState.activeSection !== 'email') {\n            return {\n                activeSection,\n                emailInterval,\n                enableEmail,\n                enableEmailBatching,\n                sendEmailNotifications,\n                newInterval: getEmailInterval(enableEmail && sendEmailNotifications, enableEmailBatching, emailInterval),\n            };\n        }\n\n        if (sendEmailNotifications !== prevState.sendEmailNotifications ||\n            enableEmailBatching !== prevState.enableEmailBatching ||\n            emailInterval !== prevState.emailInterval ||\n            activeSection !== prevState.activeSection\n        ) {\n            return {\n                activeSection,\n                emailInterval,\n                enableEmail,\n                enableEmailBatching,\n                sendEmailNotifications,\n                newInterval: getEmailInterval(enableEmail && sendEmailNotifications, enableEmailBatching, emailInterval),\n            };\n        }\n\n        return null;\n    }\n\n    handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const enableEmail = e.currentTarget.getAttribute('data-enable-email')!;\n        const newInterval = parseInt(e.currentTarget.getAttribute('data-email-interval')!, 10);\n\n        this.setState({\n            enableEmail: enableEmail === 'true',\n            newInterval,\n        });\n\n        this.props.onChange(enableEmail);\n    }\n\n    handleThreadsOnChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const value = e.target.checked ? NotificationLevels.ALL : NotificationLevels.MENTION;\n        this.props.setParentState('emailThreads', value);\n    }\n\n    handleSubmit = async () => {\n        const {newInterval} = this.state;\n        if (this.props.emailInterval === newInterval && this.props.enableEmail === this.state.enableEmail) {\n            this.props.updateSection('');\n        } else {\n            // until the rest of the notification settings are moved to preferences, we have to do this separately\n            const {currentUserId, actions} = this.props;\n            const emailIntervalPreference = {\n                user_id: currentUserId,\n                category: Preferences.CATEGORY_NOTIFICATIONS,\n                name: Preferences.EMAIL_INTERVAL,\n                value: newInterval.toString(),\n            };\n\n            await actions.savePreferences(currentUserId, [emailIntervalPreference]);\n        }\n\n        this.props.onSubmit();\n    }\n\n    handleUpdateSection = (section?: string) => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            this.props.updateSection('');\n\n            this.setState({\n                enableEmail: this.props.enableEmail,\n                newInterval: this.props.emailInterval,\n            });\n            this.props.onCancel();\n        }\n    }\n\n    renderMinSettingView = () => {\n        const {\n            enableEmail,\n            sendEmailNotifications,\n        } = this.props;\n\n        const {newInterval} = this.state;\n\n        let description;\n        if (!sendEmailNotifications) {\n            description = (\n                <FormattedMessage\n                    id='user.settings.notifications.email.disabled'\n                    defaultMessage='Email notifications are not enabled'\n                />\n            );\n        } else if (enableEmail) {\n            switch (newInterval) {\n            case Preferences.INTERVAL_IMMEDIATE:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.immediately'\n                        defaultMessage='Immediately'\n                    />\n                );\n                break;\n            case Preferences.INTERVAL_HOUR:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.everyHour'\n                        defaultMessage='Every hour'\n                    />\n                );\n                break;\n            case Preferences.INTERVAL_FIFTEEN_MINUTES:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.everyXMinutes'\n                        defaultMessage='Every {count, plural, one {minute} other {{count, number} minutes}}'\n                        values={{count: newInterval / SECONDS_PER_MINUTE}}\n                    />\n                );\n                break;\n            default:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.never'\n                        defaultMessage='Never'\n                    />\n                );\n            }\n        } else {\n            description = (\n                <FormattedMessage\n                    id='user.settings.notifications.email.never'\n                    defaultMessage='Never'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={localizeMessage('user.settings.notifications.emailNotifications', 'Email Notifications')}\n                describe={description}\n                section={'email'}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    renderMaxSettingView = () => {\n        if (!this.props.sendEmailNotifications) {\n            return (\n                <SettingItemMax\n                    title={localizeMessage('user.settings.notifications.emailNotifications', 'Email Notifications')}\n                    inputs={[\n                        <div\n                            key='oauthEmailInfo'\n                            className='pt-2'\n                        >\n                            <FormattedMessage\n                                id='user.settings.notifications.email.disabled_long'\n                                defaultMessage='Email notifications have not been enabled by your System Administrator.'\n                            />\n                        </div>,\n                    ]}\n                    server_error={this.props.serverError}\n                    section={'email'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        const {newInterval} = this.state;\n        let batchingOptions = null;\n        let batchingInfo = null;\n        if (this.props.enableEmailBatching) {\n            batchingOptions = (\n                <fieldset>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='emailNotificationMinutes'\n                                type='radio'\n                                name='emailNotifications'\n                                checked={newInterval === Preferences.INTERVAL_FIFTEEN_MINUTES}\n                                data-enable-email={'true'}\n                                data-email-interval={Preferences.INTERVAL_FIFTEEN_MINUTES}\n                                onChange={this.handleChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.email.everyXMinutes'\n                                defaultMessage='Every {count} minutes'\n                                values={{count: Preferences.INTERVAL_FIFTEEN_MINUTES / SECONDS_PER_MINUTE}}\n                            />\n                        </label>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='emailNotificationHour'\n                                type='radio'\n                                name='emailNotifications'\n                                checked={newInterval === Preferences.INTERVAL_HOUR}\n                                data-enable-email={'true'}\n                                data-email-interval={Preferences.INTERVAL_HOUR}\n                                onChange={this.handleChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.email.everyHour'\n                                defaultMessage='Every hour'\n                            />\n                        </label>\n                    </div>\n                </fieldset>\n            );\n\n            batchingInfo = (\n                <FormattedMessage\n                    id='user.settings.notifications.emailBatchingInfo'\n                    defaultMessage='Notifications received over the time period selected are combined and sent in a single email.'\n                />\n            );\n        }\n\n        let threadsNotificationSelection = null;\n        if (this.props.isCollapsedThreadsEnabled && this.props.enableEmail) {\n            threadsNotificationSelection = (\n                <React.Fragment key='userNotificationEmailThreadsOptions'>\n                    <hr/>\n                    <fieldset>\n                        <legend className='form-legend'>\n                            <FormattedMessage\n                                id='user.settings.notifications.threads.desktop'\n                                defaultMessage='Thread reply notifications'\n                            />\n                        </legend>\n                        <div className='checkbox'>\n                            <label>\n                                <input\n                                    id='desktopThreadsNotificationAllActivity'\n                                    type='checkbox'\n                                    name='desktopThreadsNotificationLevel'\n                                    checked={this.props.threads === NotificationLevels.ALL}\n                                    onChange={this.handleThreadsOnChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.threads.allActivity'\n                                    defaultMessage={'Notify me about threads I\\'m following'}\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='mt-5'>\n                            <FormattedMessage\n                                id='user.settings.notifications.email_threads'\n                                defaultMessage={'When enabled, any reply to a thread you\\'re following will send an email notification.'}\n                            />\n                        </div>\n                    </fieldset>\n                </React.Fragment>\n            );\n        }\n\n        return (\n            <SettingItemMax\n                title={localizeMessage('user.settings.notifications.emailNotifications', 'Email Notifications')}\n                inputs={[\n                    <fieldset key='userNotificationEmailOptions'>\n                        <legend className='form-legend'>\n                            <FormattedMessage\n                                id='user.settings.notifications.email.send'\n                                defaultMessage='Send email notifications'\n                            />\n                        </legend>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='emailNotificationImmediately'\n                                    type='radio'\n                                    name='emailNotifications'\n                                    checked={newInterval === Preferences.INTERVAL_IMMEDIATE}\n                                    data-enable-email={'true'}\n                                    data-email-interval={Preferences.INTERVAL_IMMEDIATE}\n                                    onChange={this.handleChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.email.immediately'\n                                    defaultMessage='Immediately'\n                                />\n                            </label>\n                        </div>\n                        {batchingOptions}\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='emailNotificationNever'\n                                    type='radio'\n                                    name='emailNotifications'\n                                    checked={newInterval === Preferences.INTERVAL_NEVER}\n                                    data-enable-email={'false'}\n                                    data-email-interval={Preferences.INTERVAL_NEVER}\n                                    onChange={this.handleChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.email.never'\n                                    defaultMessage='Never'\n                                />\n                            </label>\n                        </div>\n                        <div className='mt-3'>\n                            <FormattedMessage\n                                id='user.settings.notifications.emailInfo'\n                                defaultMessage='Email notifications are sent for mentions and direct messages when you are offline or away for more than 5 minutes.'\n                            />\n                            {' '}\n                            {batchingInfo}\n                        </div>\n                    </fieldset>,\n                    threadsNotificationSelection,\n                ]}\n                submit={this.handleSubmit}\n                saving={this.props.saving}\n                server_error={this.props.serverError}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    render() {\n        if (this.props.activeSection !== 'email') {\n            return this.renderMinSettingView();\n        }\n\n        return this.renderMaxSettingView();\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\n\nimport {Preferences} from 'mattermost-redux/constants';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {PreferenceType} from '@mattermost/types/preferences';\n\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/common';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {get as getPreference} from 'mattermost-redux/selectors/entities/preferences';\nimport {GlobalState} from '@mattermost/types/store';\nimport {ActionFunc} from 'mattermost-redux/types/actions';\n\nimport EmailNotificationSetting from './email_notification_setting';\n\ntype Actions = {\n    savePreferences: (currentUserId: string, emailIntervalPreference: PreferenceType[]) =>\n    Promise<{data: boolean}>;\n}\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n    const emailInterval = parseInt(getPreference(\n        state,\n        Preferences.CATEGORY_NOTIFICATIONS,\n        Preferences.EMAIL_INTERVAL,\n        Preferences.INTERVAL_NOT_SET.toString(),\n    ), 10);\n\n    return {\n        currentUserId: getCurrentUserId(state),\n        emailInterval,\n        enableEmailBatching: config.EnableEmailBatching === 'true',\n        sendEmailNotifications: config.SendEmailNotifications === 'true',\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EmailNotificationSetting);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport {localizeMessage} from 'utils/utils';\n\nconst MESSAGE_MAX_LENGTH = 200;\n\nexport default class ManageAutoResponder extends React.PureComponent {\n    static propTypes = {\n        autoResponderActive: PropTypes.bool.isRequired,\n        autoResponderMessage: PropTypes.string.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        setParentState: PropTypes.func.isRequired,\n        submit: PropTypes.func.isRequired,\n        saving: PropTypes.bool.isRequired,\n        error: PropTypes.string,\n    };\n\n    handleAutoResponderChecked = (e) => {\n        this.props.setParentState('autoResponderActive', e.target.checked);\n    };\n\n    onMessageChanged = (e) => {\n        this.props.setParentState('autoResponderMessage', e.target.value);\n    };\n\n    render() {\n        const {\n            autoResponderActive,\n            autoResponderMessage,\n        } = this.props;\n\n        let serverError;\n        if (this.props.error) {\n            serverError = <label className='has-error'>{this.props.error}</label>;\n        }\n\n        const inputs = [];\n\n        const activeToggle = (\n            <div\n                id='autoResponderCheckbox'\n                key='autoResponderCheckbox'\n                className='checkbox'\n            >\n                <label>\n                    <input\n                        id='autoResponderActive'\n                        type='checkbox'\n                        checked={autoResponderActive}\n                        onChange={this.handleAutoResponderChecked}\n                    />\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponderEnabled'\n                        defaultMessage='Enabled'\n                    />\n                </label>\n            </div>\n        );\n\n        const message = (\n            <div\n                id='autoResponderMessage'\n                key='autoResponderMessage'\n            >\n                <div className='pt-2'>\n                    <textarea\n                        style={{resize: 'none'}}\n                        id='autoResponderMessageInput'\n                        className='form-control'\n                        rows='5'\n                        placeholder={localizeMessage('user.settings.notifications.autoResponderPlaceholder', 'Message')}\n                        value={autoResponderMessage}\n                        maxLength={MESSAGE_MAX_LENGTH}\n                        onChange={this.onMessageChanged}\n                    />\n                    {serverError}\n                </div>\n            </div>\n        );\n\n        inputs.push(activeToggle);\n        if (autoResponderActive) {\n            inputs.push(message);\n        }\n        inputs.push((\n            <div\n                key='autoResponderHint'\n                className='mt-5'\n            >\n                <FormattedMessage\n                    id='user.settings.notifications.autoResponderHint'\n                    defaultMessage='Set a custom message that will be automatically sent in response to Direct Messages. Mentions in Public and Private Channels will not trigger the automated reply. Enabling Automatic Replies sets your status to Out of Office and disables email and push notifications.'\n                />\n            </div>\n        ));\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponder'\n                        defaultMessage='Automatic Direct Message Replies'\n                    />\n                }\n                width='medium'\n                shiftEnter={true}\n                submit={this.props.submit}\n                saving={this.props.saving}\n                inputs={inputs}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n/* eslint-disable max-lines */\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport semver from 'semver';\n\nimport Constants, {NotificationLevels} from 'utils/constants';\nimport * as Utils from 'utils/utils';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nimport {isDesktopApp} from 'utils/user_agent';\n\nimport DesktopNotificationSettings from './desktop_notification_settings.jsx';\nimport EmailNotificationSetting from './email_notification_setting';\nimport ManageAutoResponder from './manage_auto_responder.jsx';\n\nfunction getNotificationsStateFromProps(props) {\n    const user = props.user;\n\n    let desktop = NotificationLevels.MENTION;\n    let desktopThreads = NotificationLevels.ALL;\n    let pushThreads = NotificationLevels.ALL;\n    let emailThreads = NotificationLevels.ALL;\n    let sound = 'true';\n    let desktopNotificationSound = 'Bing';\n    let comments = 'never';\n    let enableEmail = 'true';\n    let pushActivity = NotificationLevels.MENTION;\n    let pushStatus = Constants.UserStatuses.AWAY;\n    let autoResponderActive = false;\n    let autoResponderMessage = Utils.localizeMessage(\n        'user.settings.notifications.autoResponderDefault',\n        'Hello, I am out of office and unable to respond to messages.',\n    );\n\n    if (user.notify_props) {\n        if (user.notify_props.desktop) {\n            desktop = user.notify_props.desktop;\n        }\n        if (user.notify_props.desktop_threads) {\n            desktopThreads = user.notify_props.desktop_threads;\n        }\n        if (user.notify_props.push_threads) {\n            pushThreads = user.notify_props.push_threads;\n        }\n        if (user.notify_props.email_threads) {\n            emailThreads = user.notify_props.email_threads;\n        }\n        if (user.notify_props.desktop_sound) {\n            sound = user.notify_props.desktop_sound;\n        }\n        if (user.notify_props.desktop_notification_sound) {\n            desktopNotificationSound = user.notify_props.desktop_notification_sound;\n        }\n        if (user.notify_props.comments) {\n            comments = user.notify_props.comments;\n        }\n        if (user.notify_props.email) {\n            enableEmail = user.notify_props.email;\n        }\n        if (user.notify_props.push) {\n            pushActivity = user.notify_props.push;\n        }\n        if (user.notify_props.push_status) {\n            pushStatus = user.notify_props.push_status;\n        }\n\n        if (user.notify_props.auto_responder_active) {\n            autoResponderActive = user.notify_props.auto_responder_active === 'true';\n        }\n\n        if (user.notify_props.auto_responder_message) {\n            autoResponderMessage = user.notify_props.auto_responder_message;\n        }\n    }\n\n    let usernameKey = false;\n    let customKeys = '';\n    let firstNameKey = false;\n    let channelKey = false;\n\n    if (user.notify_props) {\n        if (user.notify_props.mention_keys) {\n            const keys = user.notify_props.mention_keys.split(',');\n\n            if (keys.indexOf(user.username) === -1) {\n                usernameKey = false;\n            } else {\n                usernameKey = true;\n                keys.splice(keys.indexOf(user.username), 1);\n                if (keys.indexOf(`@${user.username}`) !== -1) {\n                    keys.splice(keys.indexOf(`@${user.username}`), 1);\n                }\n            }\n\n            customKeys = keys.join(',');\n        }\n\n        if (user.notify_props.first_name) {\n            firstNameKey = user.notify_props.first_name === 'true';\n        }\n\n        if (user.notify_props.channel) {\n            channelKey = user.notify_props.channel === 'true';\n        }\n    }\n\n    return {\n        desktopActivity: desktop,\n        desktopThreads,\n        pushThreads,\n        emailThreads,\n        enableEmail,\n        pushActivity,\n        pushStatus,\n        desktopSound: sound,\n        desktopNotificationSound,\n        usernameKey,\n        customKeys,\n        customKeysChecked: customKeys.length > 0,\n        firstNameKey,\n        channelKey,\n        autoResponderActive,\n        autoResponderMessage,\n        notifyCommentsLevel: comments,\n        isSaving: false,\n    };\n}\n\nexport default class NotificationsTab extends React.PureComponent {\n    static propTypes = {\n        user: PropTypes.object,\n        updateSection: PropTypes.func,\n        activeSection: PropTypes.string,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        sendPushNotifications: PropTypes.bool,\n        enableAutoResponder: PropTypes.bool,\n        actions: PropTypes.shape({\n            updateMe: PropTypes.func.isRequired,\n        }).isRequired,\n        isCollapsedThreadsEnabled: PropTypes.bool.isRequired,\n    }\n\n    static defaultProps = {\n        user: null,\n        activeSection: '',\n        activeTab: '',\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = getNotificationsStateFromProps(props);\n        this.customCheckRef = React.createRef();\n        this.customMentionsRef = React.createRef();\n        this.drawerRef = React.createRef();\n        this.wrapperRef = React.createRef();\n    }\n\n    handleSubmit = () => {\n        const data = {};\n        data.email = this.state.enableEmail;\n        data.desktop_sound = this.state.desktopSound;\n        if (!isDesktopApp() || (window.desktop && semver.gte(window.desktop.version, '4.6.0'))) {\n            data.desktop_notification_sound = this.state.desktopNotificationSound;\n        }\n        data.desktop = this.state.desktopActivity;\n        data.desktop_threads = this.state.desktopThreads;\n        data.email_threads = this.state.emailThreads;\n        data.push_threads = this.state.pushThreads;\n        data.push = this.state.pushActivity;\n        data.push_status = this.state.pushStatus;\n        data.comments = this.state.notifyCommentsLevel;\n        data.auto_responder_active = this.state.autoResponderActive.toString();\n        data.auto_responder_message = this.state.autoResponderMessage;\n\n        if (!data.auto_responder_message || data.auto_responder_message === '') {\n            data.auto_responder_message = Utils.localizeMessage(\n                'user.settings.notifications.autoResponderDefault',\n                'Hello, I am out of office and unable to respond to messages.',\n            );\n        }\n\n        const mentionKeys = [];\n        if (this.state.usernameKey) {\n            mentionKeys.push(this.props.user.username);\n        }\n\n        let stringKeys = mentionKeys.join(',');\n        if (this.state.customKeys.length > 0 && this.state.customKeysChecked) {\n            stringKeys += ',' + this.state.customKeys;\n        }\n\n        data.mention_keys = stringKeys;\n        data.first_name = this.state.firstNameKey.toString();\n        data.channel = this.state.channelKey.toString();\n\n        this.setState({isSaving: true});\n\n        this.props.actions.updateMe({notify_props: data}).\n            then(({data: result, error: err}) => {\n                if (result) {\n                    this.handleUpdateSection('');\n                    this.setState(getNotificationsStateFromProps(this.props));\n                } else if (err) {\n                    this.setState({serverError: err.message, isSaving: false});\n                }\n            });\n    }\n\n    handleCancel = (e) => {\n        if (e) {\n            e.preventDefault();\n        }\n        this.setState(getNotificationsStateFromProps(this.props));\n    }\n\n    handleUpdateSection = (section) => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            this.props.updateSection('');\n        }\n        this.setState({isSaving: false});\n        this.handleCancel();\n    };\n\n    setStateValue = (key, value) => {\n        const data = {};\n        data[key] = value;\n        this.setState(data);\n    }\n\n    handleNotifyPushThread = (e) => {\n        const pushThreads = e.target.checked ? NotificationLevels.ALL : NotificationLevels.MENTION;\n        this.setState({pushThreads});\n    }\n\n    handleNotifyCommentsRadio(notifyCommentsLevel) {\n        this.setState({notifyCommentsLevel});\n    }\n\n    handlePushRadio(pushActivity) {\n        this.setState({pushActivity});\n    }\n\n    handlePushStatusRadio(pushStatus) {\n        this.setState({pushStatus});\n    }\n\n    handleEmailRadio = (enableEmail) => {\n        this.setState({enableEmail});\n    }\n\n    updateUsernameKey = (val) => {\n        this.setState({usernameKey: val});\n    }\n\n    updateFirstNameKey = (val) => {\n        this.setState({firstNameKey: val});\n    }\n\n    updateChannelKey = (val) => {\n        this.setState({channelKey: val});\n    }\n\n    updateCustomMentionKeys = () => {\n        const checked = this.customCheckRef.current.checked;\n\n        if (checked) {\n            const text = this.customMentionsRef.current.value;\n\n            // remove all spaces and split string into individual keys\n            this.setState({customKeys: text.replace(/ /g, ''), customKeysChecked: true});\n        } else {\n            this.setState({customKeys: '', customKeysChecked: false});\n        }\n    }\n\n    onCustomChange = () => {\n        this.customCheckRef.current.checked = true;\n        this.updateCustomMentionKeys();\n    }\n\n    createPushNotificationSection = () => {\n        if (this.props.activeSection === 'push') {\n            const inputs = [];\n            let submit = null;\n\n            if (this.props.sendPushNotifications) {\n                const pushActivityRadio = [false, false, false];\n                if (this.state.pushActivity === NotificationLevels.ALL) {\n                    pushActivityRadio[0] = true;\n                } else if (this.state.pushActivity === NotificationLevels.NONE) {\n                    pushActivityRadio[2] = true;\n                } else {\n                    pushActivityRadio[1] = true;\n                }\n\n                const pushStatusRadio = [false, false, false];\n                if (this.state.pushStatus === Constants.UserStatuses.ONLINE) {\n                    pushStatusRadio[0] = true;\n                } else if (this.state.pushStatus === Constants.UserStatuses.AWAY) {\n                    pushStatusRadio[1] = true;\n                } else {\n                    pushStatusRadio[2] = true;\n                }\n\n                let pushThreadsNotificationSelection = null;\n                if (this.props.isCollapsedThreadsEnabled && this.state.pushActivity === NotificationLevels.MENTION) {\n                    pushThreadsNotificationSelection = (\n                        <React.Fragment key='userNotificationPushThreadsOptions'>\n                            <hr/>\n                            <fieldset>\n                                <legend className='form-legend'>\n                                    <FormattedMessage\n                                        id='user.settings.notifications.threads.push'\n                                        defaultMessage='Thread reply notifications'\n                                    />\n                                </legend>\n                                <div className='checkbox'>\n                                    <label>\n                                        <input\n                                            id='pushThreadsNotificationAllActivity'\n                                            type='checkbox'\n                                            name='pushThreadsNotificationLevel'\n                                            checked={this.state.pushThreads === NotificationLevels.ALL}\n                                            onChange={this.handleNotifyPushThread}\n                                        />\n                                        <FormattedMessage\n                                            id='user.settings.notifications.push_threads.allActivity'\n                                            defaultMessage={'Notify me about threads I\\'m following'}\n                                        />\n                                    </label>\n                                    <br/>\n                                </div>\n                                <div className='mt-5'>\n                                    <FormattedMessage\n                                        id='user.settings.notifications.push_threads'\n                                        defaultMessage={'When enabled, any reply to a thread you\\'re following will send a mobile push notification.'}\n                                    />\n                                </div>\n                            </fieldset>\n                        </React.Fragment>\n                    );\n                }\n                let pushStatusSettings;\n                if (this.state.pushActivity !== NotificationLevels.NONE) {\n                    pushStatusSettings = (\n                        <React.Fragment key='userNotificationPushStatusOptions'>\n                            <hr/>\n                            <fieldset>\n                                <legend className='form-legend'>\n                                    <FormattedMessage\n                                        id='user.settings.notifications.push_notification.status'\n                                        defaultMessage='Trigger push notifications when'\n                                    />\n                                </legend>\n                                <div className='radio'>\n                                    <label>\n                                        <input\n                                            id='pushNotificationOnline'\n                                            type='radio'\n                                            name='pushNotificationStatus'\n                                            checked={pushStatusRadio[0]}\n                                            onChange={this.handlePushStatusRadio.bind(this, Constants.UserStatuses.ONLINE)}\n                                        />\n                                        <FormattedMessage\n                                            id='user.settings.push_notification.online'\n                                            defaultMessage='Online, away or offline'\n                                        />\n                                    </label>\n                                </div>\n                                <div className='radio'>\n                                    <label>\n                                        <input\n                                            id='pushNotificationAway'\n                                            type='radio'\n                                            name='pushNotificationStatus'\n                                            checked={pushStatusRadio[1]}\n                                            onChange={this.handlePushStatusRadio.bind(this, Constants.UserStatuses.AWAY)}\n                                        />\n                                        <FormattedMessage\n                                            id='user.settings.push_notification.away'\n                                            defaultMessage='Away or offline'\n                                        />\n                                    </label>\n                                </div>\n                                <div className='radio'>\n                                    <label>\n                                        <input\n                                            id='pushNotificationOffline'\n                                            type='radio'\n                                            name='pushNotificationStatus'\n                                            checked={pushStatusRadio[2]}\n                                            onChange={this.handlePushStatusRadio.bind(this, Constants.UserStatuses.OFFLINE)}\n                                        />\n                                        <FormattedMessage\n                                            id='user.settings.push_notification.offline'\n                                            defaultMessage='Offline'\n                                        />\n                                    </label>\n                                </div>\n                                <div className='mt-5'>\n                                    <span>\n                                        <FormattedMessage\n                                            id='user.settings.push_notification.status_info'\n                                            defaultMessage='Notification alerts are only pushed to your mobile device when your availability matches the selection above.'\n                                        />\n                                    </span>\n                                </div>\n                            </fieldset>\n                        </React.Fragment>\n                    );\n                }\n\n                inputs.push(\n                    <div>\n                        <fieldset key='userNotificationLevelOption'>\n                            <legend className='form-legend'>\n                                <FormattedMessage\n                                    id='user.settings.push_notification.send'\n                                    defaultMessage='Send mobile push notifications'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationAllActivity'\n                                        type='radio'\n                                        name='pushNotificationLevel'\n                                        checked={pushActivityRadio[0]}\n                                        onChange={this.handlePushRadio.bind(this, NotificationLevels.ALL)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.allActivity'\n                                        defaultMessage='For all activity'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationMentions'\n                                        type='radio'\n                                        name='pushNotificationLevel'\n                                        checked={pushActivityRadio[1]}\n                                        onChange={this.handlePushRadio.bind(this, NotificationLevels.MENTION)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.onlyMentions'\n                                        defaultMessage='For mentions and direct messages'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationNever'\n                                        type='radio'\n                                        name='pushNotificationLevel'\n                                        checked={pushActivityRadio[2]}\n                                        onChange={this.handlePushRadio.bind(this, NotificationLevels.NONE)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.notifications.never'\n                                        defaultMessage='Never'\n                                    />\n                                </label>\n                            </div>\n                            <div className='mt-5'>\n                                <FormattedMessage\n                                    id='user.settings.push_notification.info'\n                                    defaultMessage='Notification alerts are pushed to your mobile device when there is activity in Mattermost.'\n                                />\n                            </div>\n                        </fieldset>\n                    </div>,\n                    pushStatusSettings,\n                    pushThreadsNotificationSelection,\n                );\n\n                submit = this.handleSubmit;\n            } else {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='pt-2'\n                    >\n                        <FormattedMessage\n                            id='user.settings.push_notification.disabled_long'\n                            defaultMessage='Push notifications have not been enabled by your System Administrator.'\n                        />\n                    </div>,\n                );\n            }\n\n            return (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.notifications.push', 'Mobile Push Notifications')}\n                    inputs={inputs}\n                    submit={submit}\n                    server_error={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe = '';\n        if (this.state.pushActivity === NotificationLevels.ALL) {\n            if (this.state.pushStatus === Constants.UserStatuses.AWAY) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.allActivityAway'\n                        defaultMessage='For all activity when away or offline'\n                    />\n                );\n            } else if (this.state.pushStatus === Constants.UserStatuses.OFFLINE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.allActivityOffline'\n                        defaultMessage='For all activity when offline'\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.allActivityOnline'\n                        defaultMessage='For all activity when online, away or offline'\n                    />\n                );\n            }\n        } else if (this.state.pushActivity === NotificationLevels.NONE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.notifications.never'\n                    defaultMessage='Never'\n                />\n            );\n        } else if (this.props.sendPushNotifications) {\n            if (this.state.pushStatus === Constants.UserStatuses.AWAY) { //eslint-disable-line no-lonely-if\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.onlyMentionsAway'\n                        defaultMessage='For mentions and direct messages when away or offline'\n                    />\n                );\n            } else if (this.state.pushStatus === Constants.UserStatuses.OFFLINE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.onlyMentionsOffline'\n                        defaultMessage='For mentions and direct messages when offline'\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.onlyMentionsOnline'\n                        defaultMessage='For mentions and direct messages when online, away or offline'\n                    />\n                );\n            }\n        } else {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.push_notification.disabled'\n                    defaultMessage='Push notifications are not enabled'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.notifications.push', 'Mobile Push Notifications')}\n                describe={describe}\n                section={'push'}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    render() {\n        const serverError = this.state.serverError;\n        const user = this.props.user;\n\n        let keysSection;\n        if (this.props.activeSection === 'keys') {\n            const inputs = [];\n\n            if (user.first_name) {\n                const handleUpdateFirstNameKey = (e) => {\n                    this.updateFirstNameKey(e.target.checked);\n                };\n                inputs.push(\n                    <div key='userNotificationFirstNameOption'>\n                        <div className='checkbox'>\n                            <label>\n                                <input\n                                    id='notificationTriggerFirst'\n                                    type='checkbox'\n                                    checked={this.state.firstNameKey}\n                                    onChange={handleUpdateFirstNameKey}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.sensitiveName'\n                                    defaultMessage='Your case sensitive first name \"{first_name}\"'\n                                    values={{\n                                        first_name: user.first_name,\n                                    }}\n                                />\n                            </label>\n                        </div>\n                    </div>,\n                );\n            }\n\n            const handleUpdateUsernameKey = (e) => {\n                this.updateUsernameKey(e.target.checked);\n            };\n            inputs.push(\n                <div key='userNotificationUsernameOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerUsername'\n                                type='checkbox'\n                                checked={this.state.usernameKey}\n                                onChange={handleUpdateUsernameKey}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.sensitiveUsername'\n                                defaultMessage='Your non case-sensitive username \"{username}\"'\n                                values={{\n                                    username: user.username,\n                                }}\n                            />\n                        </label>\n                    </div>\n                </div>,\n            );\n\n            const handleUpdateChannelKey = (e) => {\n                this.updateChannelKey(e.target.checked);\n            };\n            inputs.push(\n                <div key='userNotificationChannelOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerShouts'\n                                type='checkbox'\n                                checked={this.state.channelKey}\n                                onChange={handleUpdateChannelKey}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.channelWide'\n                                defaultMessage='Channel-wide mentions \"@channel\", \"@all\", \"@here\"'\n                            />\n                        </label>\n                    </div>\n                </div>,\n            );\n\n            inputs.push(\n                <div key='userNotificationCustomOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerCustom'\n                                ref={this.customCheckRef}\n                                type='checkbox'\n                                checked={this.state.customKeysChecked}\n                                onChange={this.updateCustomMentionKeys}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.sensitiveWords'\n                                defaultMessage='Other non-case sensitive words, separated by commas:'\n                            />\n                        </label>\n                    </div>\n                    <input\n                        id='notificationTriggerCustomText'\n                        autoFocus={this.state.customKeysChecked}\n                        ref={this.customMentionsRef}\n                        className='form-control mentions-input'\n                        type='text'\n                        defaultValue={this.state.customKeys}\n                        onChange={this.onCustomChange}\n                        onFocus={Utils.moveCursorToEnd}\n                        aria-labelledby='notificationTriggerCustom'\n                    />\n                </div>,\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.notifications.mentionsInfo'\n                        defaultMessage='Mentions trigger when someone sends a message that includes your username (@{username}) or any of the options selected above.'\n                        values={{\n                            username: user.username,\n                        }}\n                    />\n                </span>\n            );\n\n            keysSection = (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.notifications.wordsTrigger', 'Words That Trigger Mentions')}\n                    inputs={inputs}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    updateSection={this.handleUpdateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let keys = ['@' + user.username];\n            if (this.state.firstNameKey) {\n                keys.push(user.first_name);\n            }\n            if (this.state.usernameKey) {\n                keys.push(user.username);\n            }\n\n            if (this.state.channelKey) {\n                keys.push('@channel');\n                keys.push('@all');\n                keys.push('@here');\n            }\n            if (this.state.customKeys.length > 0) {\n                keys = keys.concat(this.state.customKeys.split(','));\n            }\n\n            let describe = '';\n            for (let i = 0; i < keys.length; i++) {\n                if (keys[i] !== '') {\n                    describe += '\"' + keys[i] + '\", ';\n                }\n            }\n\n            if (describe.length > 0) {\n                describe = describe.substring(0, describe.length - 2);\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.noWords'\n                        defaultMessage='No words configured'\n                    />\n                );\n            }\n\n            keysSection = (\n                <SettingItemMin\n                    title={Utils.localizeMessage('user.settings.notifications.wordsTrigger', 'Words That Trigger Mentions')}\n                    describe={describe}\n                    section={'keys'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let commentsSection;\n        if (this.props.activeSection === 'comments') {\n            const commentsActive = [false, false, false];\n            if (this.state.notifyCommentsLevel === 'never') {\n                commentsActive[2] = true;\n            } else if (this.state.notifyCommentsLevel === 'root') {\n                commentsActive[1] = true;\n            } else {\n                commentsActive[0] = true;\n            }\n\n            const inputs = [];\n\n            inputs.push(\n                <fieldset key='userNotificationLevelOption'>\n                    <legend className='form-legend hidden-label'>\n                        {Utils.localizeMessage('user.settings.notifications.comments', 'Reply notifications')}\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsAny'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[0]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'any')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsAny'\n                                defaultMessage='Trigger notifications on messages in reply threads that I start or participate in'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsRoot'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[1]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'root')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsRoot'\n                                defaultMessage='Trigger notifications on messages in threads that I start'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsNever'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[2]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'never')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsNever'\n                                defaultMessage=\"Do not trigger notifications on messages in reply threads unless I'm mentioned\"\n                            />\n                        </label>\n                    </div>\n                </fieldset>,\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsInfo'\n                        defaultMessage=\"In addition to notifications for when you're mentioned, select if you would like to receive notifications on reply threads.\"\n                    />\n                </span>\n            );\n\n            commentsSection = (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.notifications.comments', 'Reply notifications')}\n                    extraInfo={extraInfo}\n                    inputs={inputs}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        } else {\n            let describe = '';\n            if (this.state.notifyCommentsLevel === 'never') {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsNever'\n                        defaultMessage=\"Do not trigger notifications on messages in reply threads unless I'm mentioned\"\n                    />\n                );\n            } else if (this.state.notifyCommentsLevel === 'root') {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsRoot'\n                        defaultMessage='Trigger notifications on messages in threads that I start'\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsAny'\n                        defaultMessage='Trigger notifications on messages in reply threads that I start or participate in'\n                    />\n                );\n            }\n\n            commentsSection = (\n                <SettingItemMin\n                    title={Utils.localizeMessage('user.settings.notifications.comments', 'Reply notifications')}\n                    describe={describe}\n                    section={'comments'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let autoResponderSection;\n        if (this.props.enableAutoResponder) {\n            if (this.props.activeSection === 'auto-responder') {\n                autoResponderSection = (\n                    <div>\n                        <ManageAutoResponder\n                            autoResponderActive={this.state.autoResponderActive}\n                            autoResponderMessage={this.state.autoResponderMessage}\n                            updateSection={this.handleUpdateSection}\n                            setParentState={this.setStateValue}\n                            submit={this.handleSubmit}\n                            error={this.state.serverError}\n                            saving={this.state.isSaving}\n                        />\n                        <div className='divider-dark'/>\n                    </div>\n                );\n            } else {\n                const describe = this.state.autoResponderActive ? (\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponderEnabled'\n                        defaultMessage='Enabled'\n                    />\n                ) : (\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponderDisabled'\n                        defaultMessage='Disabled'\n                    />\n                );\n\n                autoResponderSection = (\n                    <SettingItemMin\n                        title={\n                            <FormattedMessage\n                                id='user.settings.notifications.autoResponder'\n                                defaultMessage='Automatic Direct Message Replies'\n                            />\n                        }\n                        width='medium'\n                        describe={describe}\n                        section={'auto-responder'}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            }\n        }\n\n        const pushNotificationSection = this.createPushNotificationSection();\n\n        return (\n            <div id='notificationSettings'>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref={this.drawerRef}\n                    >\n                        <div className='modal-back'>\n                            <FormattedMessage\n                                id='generic_icons.collapse'\n                                defaultMessage='Collapse Icon'\n                            >\n                                {(title) => (\n                                    <i\n                                        className='fa fa-angle-left'\n                                        title={title}\n                                        onClick={this.props.collapseModal}\n                                    />\n                                )}\n                            </FormattedMessage>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.notifications.title'\n                            defaultMessage='Notification Settings'\n                        />\n                    </h4>\n                </div>\n                <div\n                    ref={this.wrapperRef}\n                    className='user-settings'\n                >\n                    <h3\n                        id='notificationSettingsTitle'\n                        className='tab-header'\n                    >\n                        <FormattedMessage\n                            id='user.settings.notifications.header'\n                            defaultMessage='Notifications'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    <DesktopNotificationSettings\n                        activity={this.state.desktopActivity}\n                        threads={this.state.desktopThreads}\n                        sound={this.state.desktopSound}\n                        updateSection={this.handleUpdateSection}\n                        setParentState={this.setStateValue}\n                        submit={this.handleSubmit}\n                        saving={this.state.isSaving}\n                        cancel={this.handleCancel}\n                        error={this.state.serverError}\n                        active={this.props.activeSection === 'desktop'}\n                        selectedSound={this.state.desktopNotificationSound}\n                        isCollapsedThreadsEnabled={this.props.isCollapsedThreadsEnabled}\n                    />\n                    <div className='divider-light'/>\n                    <EmailNotificationSetting\n                        activeSection={this.props.activeSection}\n                        updateSection={this.handleUpdateSection}\n                        enableEmail={this.state.enableEmail === 'true'}\n                        onSubmit={this.handleSubmit}\n                        onCancel={this.handleCancel}\n                        onChange={this.handleEmailRadio}\n                        saving={this.state.isSaving}\n                        serverError={this.state.serverError}\n                        isCollapsedThreadsEnabled={this.props.isCollapsedThreadsEnabled}\n                        setParentState={this.setStateValue}\n                        threads={this.state.emailThreads}\n                    />\n                    <div className='divider-light'/>\n                    {pushNotificationSection}\n                    <div className='divider-light'/>\n                    {keysSection}\n                    <div className='divider-light'/>\n                    {!this.props.isCollapsedThreadsEnabled && (\n                        <>\n                            {commentsSection}\n                            <div className='divider-light'/>\n                        </>\n                    )}\n                    {autoResponderSection}\n                    <div className='divider-dark'/>\n                </div>\n            </div>\n\n        );\n    }\n}\n/* eslint-enable react/no-string-refs */\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {updateMe} from 'mattermost-redux/actions/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {isCollapsedThreadsEnabled} from 'mattermost-redux/selectors/entities/preferences';\n\nimport UserSettingsNotifications from './user_settings_notifications.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const sendPushNotifications = config.SendPushNotifications === 'true';\n    const enableAutoResponder = config.ExperimentalEnableAutomaticReplies === 'true';\n\n    return {\n        sendPushNotifications,\n        enableAutoResponder,\n        isCollapsedThreadsEnabled: isCollapsedThreadsEnabled(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({updateMe}, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsNotifications);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport AuditTable from 'components/audit_table';\nimport LoadingScreen from 'components/loading_screen';\n\ntype Props = {\n    onHide: () => void;\n    actions: {\n        getUserAudits: (userId: string, page?: number, perPage?: number) => void;\n    };\n    userAudits: any[];\n    currentUserId: string;\n}\n\ntype State = {\n    show: boolean;\n}\n\nexport default class AccessHistoryModal extends React.PureComponent<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            show: true,\n        };\n    }\n\n    public onShow = () => { // public for testing\n        this.props.actions.getUserAudits(this.props.currentUserId, 0, 200);\n    }\n\n    public onHide = () => { // public for testing\n        this.setState({show: false});\n    }\n\n    public componentDidMount() {\n        this.onShow();\n    }\n\n    public render() {\n        let content;\n        if (this.props.userAudits.length === 0) {\n            content = (<LoadingScreen/>);\n        } else {\n            content = (\n                <AuditTable\n                    audits={this.props.userAudits}\n                    showIp={true}\n                    showSession={true}\n                />\n            );\n        }\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal modal--scroll'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={this.props.onHide}\n                bsSize='large'\n                role='dialog'\n                aria-labelledby='accessHistoryModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='accessHistoryModalLabel'\n                    >\n                        <FormattedMessage\n                            id='access_history.title'\n                            defaultMessage='Access History'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {content}\n                </Modal.Body>\n                <Modal.Footer className='modal-footer--invisible'>\n                    <button\n                        id='closeModalButton'\n                        type='button'\n                        className='btn btn-link'\n                    >\n                        <FormattedMessage\n                            id='general_button.close'\n                            defaultMessage='Close'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch} from 'redux';\n\nimport {getUserAudits} from 'mattermost-redux/actions/users';\nimport {getCurrentUserId, getUserAudits as getCurrentUserAudits} from 'mattermost-redux/selectors/entities/users';\nimport {GenericAction} from 'mattermost-redux/types/actions';\n\nimport {GlobalState} from 'types/store';\n\nimport AccessHistoryModal from './access_history_modal';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        currentUserId: getCurrentUserId(state),\n        userAudits: getCurrentUserAudits(state) || [],\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators({\n            getUserAudits,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AccessHistoryModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\n\nimport {Session} from '@mattermost/types/sessions';\n\nimport {getMonthLong} from 'utils/i18n';\n\ntype Props = {\n    locale: string;\n    currentSession: Session;\n    handleMoreInfo: () => void;\n    moreInfo: boolean;\n};\n\nexport default function MoreInfo(props: Props) {\n    const {locale, currentSession, handleMoreInfo, moreInfo} = props;\n\n    if (moreInfo) {\n        const firstAccessTime = new Date(currentSession.create_at);\n\n        return (\n            <div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.firstTime'\n                        defaultMessage='First time active: {date}, {time}'\n                        values={{\n                            date: (\n                                <FormattedDate\n                                    value={firstAccessTime}\n                                    day='2-digit'\n                                    month={getMonthLong(locale)}\n                                    year='numeric'\n                                />\n                            ),\n                            time: (\n                                <FormattedTime\n                                    value={firstAccessTime}\n                                    hour='2-digit'\n                                    minute='2-digit'\n                                />\n                            ),\n                        }}\n                    />\n                </div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.os'\n                        defaultMessage='OS: {os}'\n                        values={{\n                            os: currentSession.props.os,\n                        }}\n                    />\n                </div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.browser'\n                        defaultMessage='Browser: {browser}'\n                        values={{\n                            browser: currentSession.props.browser,\n                        }}\n                    />\n                </div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.sessionId'\n                        defaultMessage='Session ID: {id}'\n                        values={{\n                            id: currentSession.id,\n                        }}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <a\n            className='theme'\n            href='#'\n            onClick={handleMoreInfo}\n        >\n            <FormattedMessage\n                id='activity_log.moreInfo'\n                defaultMessage='More info'\n            />\n        </a>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\n\nimport {General} from 'mattermost-redux/constants';\nimport {Session} from '@mattermost/types/sessions';\n\nimport {localizeMessage} from 'utils/utils';\nimport {getMonthLong, t} from 'utils/i18n';\n\nimport MoreInfo from './more_info';\n\ntype Props = {\n\n    /**\n     * The index of this instance within the list\n     */\n    index: number;\n\n    /**\n     * The current locale of the user\n     */\n    locale: string;\n\n    /**\n     * The session that's to be displayed\n     */\n    currentSession: Session;\n\n    /**\n     * Function to revoke session\n     */\n    submitRevoke: (sessionId: string, event: React.MouseEvent) => void;\n};\n\ntype State = {\n    moreInfo: boolean;\n};\n\ntype MobileSessionInfo = {\n    devicePicture?: string;\n    deviceTitle?: string;\n    devicePlatform: JSX.Element;\n};\n\nexport default class ActivityLog extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            moreInfo: false,\n        };\n    }\n\n    handleMoreInfo = (): void => {\n        this.setState({moreInfo: true});\n    }\n\n    submitRevoke = (e: React.MouseEvent): void => {\n        this.props.submitRevoke(this.props.currentSession.id, e);\n    }\n\n    isMobileSession = (session: Session): boolean => {\n        return Boolean(session.device_id && (session.device_id.includes('apple') || session.device_id.includes('android')));\n    };\n\n    mobileSessionInfo = (session: Session): MobileSessionInfo => {\n        let deviceTypeId;\n        let deviceTypeMessage;\n        let devicePicture;\n        let deviceTitle;\n\n        if (session.device_id.includes('apple')) {\n            devicePicture = 'fa fa-apple';\n            deviceTitle = localizeMessage('device_icons.apple', 'Apple Icon');\n            deviceTypeId = t('activity_log_modal.iphoneNativeClassicApp');\n            deviceTypeMessage = 'iPhone Native Classic App';\n\n            if (session.device_id.includes(General.PUSH_NOTIFY_APPLE_REACT_NATIVE)) {\n                deviceTypeId = t('activity_log_modal.iphoneNativeApp');\n                deviceTypeMessage = 'iPhone Native App';\n            }\n        } else if (session.device_id.includes('android')) {\n            devicePicture = 'fa fa-android';\n            deviceTitle = localizeMessage('device_icons.android', 'Android Icon');\n            deviceTypeId = t('activity_log_modal.androidNativeClassicApp');\n            deviceTypeMessage = 'Android Native Classic App';\n\n            if (session.device_id.includes(General.PUSH_NOTIFY_ANDROID_REACT_NATIVE)) {\n                deviceTypeId = t('activity_log_modal.androidNativeApp');\n                deviceTypeMessage = 'Android Native App';\n            }\n        }\n\n        return {\n            devicePicture,\n            deviceTitle,\n            devicePlatform: (\n                <FormattedMessage\n                    id={deviceTypeId}\n                    defaultMessage={deviceTypeMessage}\n                />\n            ),\n        };\n    };\n\n    render(): React.ReactNode {\n        const {\n            index,\n            locale,\n            currentSession,\n        } = this.props;\n\n        const lastAccessTime = new Date(currentSession.last_activity_at);\n        let devicePlatform = currentSession.props.platform;\n        let devicePicture: string | undefined = '';\n        let deviceTitle = '';\n\n        if (currentSession.props.platform === 'Windows') {\n            devicePicture = 'fa fa-windows';\n            deviceTitle = localizeMessage('device_icons.windows', 'Windows Icon');\n        } else if (this.isMobileSession(currentSession)) {\n            const sessionInfo = this.mobileSessionInfo(currentSession);\n            devicePicture = sessionInfo.devicePicture;\n            devicePlatform = sessionInfo.devicePlatform;\n        } else if (currentSession.props.platform === 'Macintosh' ||\n            currentSession.props.platform === 'iPhone') {\n            devicePicture = 'fa fa-apple';\n            deviceTitle = localizeMessage('device_icons.apple', 'Apple Icon');\n        } else if (currentSession.props.platform === 'Linux') {\n            if (currentSession.props.os.indexOf('Android') >= 0) {\n                devicePlatform = (\n                    <FormattedMessage\n                        id='activity_log_modal.android'\n                        defaultMessage='Android'\n                    />\n                );\n                devicePicture = 'fa fa-android';\n                deviceTitle = localizeMessage('device_icons.android', 'Android Icon');\n            } else {\n                devicePicture = 'fa fa-linux';\n                deviceTitle = localizeMessage('device_icons.linux', 'Linux Icon');\n            }\n        } else if (currentSession.props.os.indexOf('Linux') !== -1) {\n            devicePicture = 'fa fa-linux';\n            deviceTitle = localizeMessage('device_icons.linux', 'Linux Icon');\n        }\n\n        if (currentSession.props.browser.indexOf('Desktop App') !== -1) {\n            devicePlatform = (\n                <FormattedMessage\n                    id='activity_log_modal.desktop'\n                    defaultMessage='Native Desktop App'\n                />\n            );\n        }\n\n        return (\n            <div\n                key={'activityLogEntryKey' + index}\n                className='activity-log__table'\n            >\n                <div className='activity-log__report'>\n                    <div className='report__platform'>\n                        <i\n                            className={devicePicture}\n                            title={deviceTitle}\n                        />{devicePlatform}\n                    </div>\n                    <div className='report__info'>\n                        <div>\n                            <FormattedMessage\n                                id='activity_log.lastActivity'\n                                defaultMessage='Last activity: {date}, {time}'\n                                values={{\n                                    date: (\n                                        <FormattedDate\n                                            value={lastAccessTime}\n                                            day='2-digit'\n                                            month={getMonthLong(locale)}\n                                            year='numeric'\n                                        />\n                                    ),\n                                    time: (\n                                        <FormattedTime\n                                            value={lastAccessTime}\n                                            hour='2-digit'\n                                            minute='2-digit'\n                                        />\n                                    ),\n                                }}\n                            />\n                        </div>\n                        <MoreInfo\n                            locale={locale}\n                            currentSession={currentSession}\n                            moreInfo={this.state.moreInfo}\n                            handleMoreInfo={this.handleMoreInfo}\n                        />\n                    </div>\n                </div>\n                <div className='activity-log__action'>\n                    <button\n                        onClick={this.submitRevoke}\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='activity_log.logout'\n                            defaultMessage='Log Out'\n                        />\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Session} from '@mattermost/types/sessions';\nimport {ActionFunc} from 'mattermost-redux/types/actions';\n\nimport ActivityLog from 'components/activity_log_modal/components/activity_log';\n\nexport type Props = {\n\n    /**\n     * The current user id\n     */\n    currentUserId: string;\n\n    /**\n     * Current user's sessions\n     */\n    sessions: Session[];\n\n    /**\n     * Current user's locale\n     */\n    locale: string;\n\n    /**\n     * Function that's called when user closes the modal\n     */\n    onHide: () => void;\n\n    actions: {\n\n        /**\n         * Function to refresh sessions from server\n         */\n        getSessions: (userId: string) => ActionFunc;\n\n        /**\n         * Function to revoke a particular session\n         */\n        revokeSession: (userId: string, sessionId: string) => Promise<{ data: boolean }>;\n    };\n}\n\ntype State = {\n    show: boolean;\n}\n\nexport default class ActivityLogModal extends React.PureComponent<Props, State> {\n    static propTypes = {\n\n    }\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            show: true,\n        };\n    }\n\n    submitRevoke = (altId: string, e: React.MouseEvent) => {\n        e.preventDefault();\n        const modalContent = (e.target as Element)?.closest('.modal-content');\n        modalContent?.classList.add('animation--highlight');\n        setTimeout(() => {\n            modalContent?.classList.remove('animation--highlight');\n        }, 1500);\n        this.props.actions.revokeSession(this.props.currentUserId, altId).then(() => {\n            this.props.actions.getSessions(this.props.currentUserId);\n        });\n    }\n\n    onShow = () => {\n        this.props.actions.getSessions(this.props.currentUserId);\n    }\n\n    onHide = () => {\n        this.setState({show: false});\n    }\n\n    componentDidMount() {\n        this.onShow();\n    }\n\n    render() {\n        const activityList = this.props.sessions.reduce((array: JSX.Element[], currentSession, index) => {\n            if (currentSession.props.type === 'UserAccessToken') {\n                return array;\n            }\n\n            array.push(\n                <ActivityLog\n                    key={currentSession.id}\n                    index={index}\n                    locale={this.props.locale}\n                    currentSession={currentSession}\n                    submitRevoke={this.submitRevoke}\n                />,\n            );\n            return array;\n        }, []);\n\n        const content = <form role='form'>{activityList}</form>;\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal modal--scroll'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={this.props.onHide}\n                bsSize='large'\n                role='dialog'\n                aria-labelledby='activityLogModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='activityLogModalLabel'\n                    >\n                        <FormattedMessage\n                            id='activity_log.activeSessions'\n                            defaultMessage='Active Sessions'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <p className='session-help-text'>\n                        <FormattedMessage\n                            id='activity_log.sessionsDescription'\n                            defaultMessage=\"Sessions are created when you log in through a new browser on a device. Sessions let you use Mattermost without having to log in again for a time period specified by the system administrator. To end the session sooner, use the 'Log Out' button.\"\n                        />\n                    </p>\n                    {content}\n                </Modal.Body>\n                <Modal.Footer className='modal-footer--invisible'>\n                    <button\n                        id='closeModalButton'\n                        type='button'\n                        className='btn btn-link'\n                    >\n                        <FormattedMessage\n                            id='general_button.close'\n                            defaultMessage='Close'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {ActionCreatorsMapObject, bindActionCreators, Dispatch} from 'redux';\n\nimport {getSessions, revokeSession} from 'mattermost-redux/actions/users';\nimport {getCurrentUserId, getUserSessions} from 'mattermost-redux/selectors/entities/users';\nimport {ActionFunc, GenericAction} from 'mattermost-redux/types/actions';\n\nimport {getCurrentLocale} from 'selectors/i18n';\nimport {GlobalState} from 'types/store';\n\nimport ActivityLogModal, {Props} from './activity_log_modal';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        currentUserId: getCurrentUserId(state),\n        sessions: getUserSessions(state),\n        locale: getCurrentLocale(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc| GenericAction>, Props['actions']>({\n            getSessions,\n            revokeSession,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ActivityLogModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\nimport {browserHistory} from 'utils/browser_history';\n\nconst SECTION_MFA = 'mfa';\n\ntype Props = {\n    active: boolean;\n\n    // Whether or not the current user has MFA enabled\n    mfaActive: boolean;\n\n    // Whether or not the current user can enable MFA based on their authentication type and the server's settings\n    mfaAvailable: boolean;\n\n    // Whether or not this server enforces that all users have MFA\n    mfaEnforced: boolean;\n\n    updateSection: (section: string) => void;\n    actions: {deactivateMfa: () => Promise<{error?: {message: string}}>};\n}\n\ntype State = {\n    serverError: string|null;\n}\n\nexport default class MfaSection extends React.PureComponent<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            serverError: null,\n        };\n    }\n\n    public setupMfa = (e: React.MouseEvent<HTMLElement>) => {\n        e.preventDefault();\n\n        browserHistory.push('/mfa/setup');\n    };\n\n    public removeMfa = async (e: React.MouseEvent<HTMLElement>) => {\n        e.preventDefault();\n\n        const {error} = await this.props.actions.deactivateMfa();\n\n        if (error) {\n            this.setState({\n                serverError: error.message,\n            });\n            return;\n        }\n\n        if (this.props.mfaEnforced) {\n            browserHistory.push('/mfa/setup');\n            return;\n        }\n\n        this.props.updateSection('');\n        this.setState({\n            serverError: null,\n        });\n    };\n\n    private renderTitle = () => {\n        return (\n            <FormattedMessage\n                id='user.settings.mfa.title'\n                defaultMessage='Multi-factor Authentication'\n            />\n        );\n    };\n\n    private renderDescription = () => {\n        if (this.props.mfaActive) {\n            return (\n                <FormattedMessage\n                    id='user.settings.security.active'\n                    defaultMessage='Active'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.security.inactive'\n                defaultMessage='Inactive'\n            />\n        );\n    };\n\n    private renderContent = () => {\n        let content;\n\n        if (this.props.mfaActive) {\n            let buttonText;\n\n            if (this.props.mfaEnforced) {\n                buttonText = (\n                    <FormattedMessage\n                        id='user.settings.mfa.reset'\n                        defaultMessage='Reset MFA on Account'\n                    />\n                );\n            } else {\n                buttonText = (\n                    <FormattedMessage\n                        id='user.settings.mfa.remove'\n                        defaultMessage='Remove MFA from Account'\n                    />\n                );\n            }\n\n            content = (\n                <a\n                    className='btn btn-primary'\n                    href='#'\n                    onClick={this.removeMfa}\n                >\n                    {buttonText}\n                </a>\n            );\n        } else {\n            content = (\n                <a\n                    className='btn btn-primary'\n                    href='#'\n                    onClick={this.setupMfa}\n                >\n                    <FormattedMessage\n                        id='user.settings.mfa.add'\n                        defaultMessage='Add MFA to Account'\n                    />\n                </a>\n            );\n        }\n\n        return (\n            <div className='pt-2'>\n                {content}\n                <br/>\n            </div>\n        );\n    };\n\n    private renderHelpText = () => {\n        if (this.props.mfaActive) {\n            if (this.props.mfaEnforced) {\n                return (\n                    <FormattedMessage\n                        id='user.settings.mfa.requiredHelp'\n                        defaultMessage='Multi-factor authentication is required on this server. Resetting is only recommended when you need to switch code generation to a new mobile device. You will be required to set it up again immediately.'\n                    />\n                );\n            }\n\n            return (\n                <FormattedMessage\n                    id='user.settings.mfa.removeHelp'\n                    defaultMessage='Removing multi-factor authentication means you will no longer require a phone-based passcode to sign-in to your account.'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.mfa.addHelp'\n                defaultMessage='Adding multi-factor authentication will make your account more secure by requiring a code from your mobile phone each time you sign in.'\n            />\n        );\n    };\n\n    public render() {\n        const title = this.renderTitle();\n\n        if (!this.props.mfaAvailable) {\n            return null;\n        }\n\n        if (!this.props.active) {\n            return (\n                <SettingItemMin\n                    title={title}\n                    describe={this.renderDescription()}\n                    section={SECTION_MFA}\n                    updateSection={this.props.updateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMax\n                title={title}\n                inputs={this.renderContent()}\n                extraInfo={this.renderHelpText()}\n                serverError={this.state.serverError}\n                updateSection={this.props.updateSection}\n                width='medium'\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\n\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {GlobalState} from '@mattermost/types/store';\nimport {UserProfile} from '@mattermost/types/users';\nimport {ActionFunc} from 'mattermost-redux/types/actions';\n\nimport {deactivateMfa} from 'actions/views/mfa';\nimport Constants from 'utils/constants';\n\nimport MfaSection from './mfa_section';\n\ntype Actions = {\n    deactivateMfa: () => Promise<{error?: {message: string}}>;\n}\n\nfunction mapStateToProps(state: GlobalState) {\n    const license = getLicense(state);\n    const config = getConfig(state);\n    const mfaLicensed = license && license.IsLicensed === 'true' && license.MFA === 'true';\n    const mfaEnabled = config.EnableMultifactorAuthentication === 'true';\n    const mfaEnforced = mfaLicensed && config.EnforceMultifactorAuthentication === 'true';\n    const user: UserProfile = getCurrentUser(state);\n    let mfaActive = false;\n    let mfaAvailable = false;\n    if (user) {\n        mfaActive = (user as any).mfa_active;\n        mfaAvailable = mfaEnabled && (user.auth_service === '' || user.auth_service === Constants.LDAP_SERVICE);\n    }\n    return {\n        mfaActive,\n        mfaAvailable,\n        mfaEnforced,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            deactivateMfa,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MfaSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\nimport {UserProfile} from '@mattermost/types/users';\n\nimport {trackEvent} from 'actions/telemetry_actions.jsx';\nimport Constants from 'utils/constants';\nimport {isMobile} from 'utils/user_agent';\nimport * as Utils from 'utils/utils';\nimport ConfirmModal from 'components/confirm_modal';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport SaveButton from 'components/save_button';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport WarningIcon from 'components/widgets/icons/fa_warning_icon';\n\nconst SECTION_TOKENS = 'tokens';\nconst TOKEN_CREATING = 'creating';\nconst TOKEN_CREATED = 'created';\nconst TOKEN_NOT_CREATING = 'not_creating';\n\ntype Props = {\n    user: UserProfile;\n    active?: boolean;\n    updateSection: (section: string) => void;\n    userAccessTokens: {[tokenId: string]: {description: string; id: string; is_active: boolean}};\n    setRequireConfirm: (isRequiredConfirm: boolean, confirmCopyToken: (confirmAction: () => void) => void) => void;\n    actions: {\n        getUserAccessTokensForUser: (userId: string, page: number, perPage: number) => void;\n        createUserAccessToken: (userId: string, description: string) => Promise<{\n            data: {token: string; description: string; id: string; is_active: boolean} | null;\n            error?: {\n                message: string;\n            };\n        }>;\n        revokeUserAccessToken: (tokenId: string) => Promise<{\n            data: string;\n            error?: {\n                message: string;\n            };\n        }>;\n        enableUserAccessToken: (tokenId: string) => Promise<{\n            data: string;\n            error?: {\n                message: string;\n            };\n        }>;\n        disableUserAccessToken: (tokenId: string) => Promise<{\n            data: string;\n            error?: {\n                message: string;\n            };\n        }>;\n        clearUserAccessTokens: () => void;\n    };\n}\n\ntype State = {\n    active?: boolean;\n    showConfirmModal: boolean;\n    newToken?: {token: string; description: string; id: string; is_active: boolean} | null;\n    tokenCreationState?: string;\n    tokenError?: string;\n    serverError?: string|null;\n    saving?: boolean;\n    confirmTitle?: React.ReactNode;\n    confirmMessage?: ((state: State) => JSX.Element)|null;\n    confirmButton?: React.ReactNode;\n    confirmComplete?: (() => void)|null;\n    confirmHideCancel?: boolean;\n}\n\nexport default class UserAccessTokenSection extends React.PureComponent<Props, State> {\n    private newtokendescriptionRef: React.RefObject<HTMLInputElement>;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            active: this.props.active,\n            showConfirmModal: false,\n            newToken: null,\n            tokenCreationState: TOKEN_NOT_CREATING,\n            tokenError: '',\n            serverError: null,\n            saving: false,\n        };\n        this.newtokendescriptionRef = React.createRef();\n    }\n\n    componentDidMount() {\n        this.props.actions.clearUserAccessTokens();\n        const userId = this.props.user ? this.props.user.id : '';\n        this.props.actions.getUserAccessTokensForUser(userId, 0, 200);\n    }\n\n    static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n        if (!nextProps.active && prevState.active) {\n            return {\n                active: nextProps.active,\n                showConfirmModal: false,\n                newToken: null,\n                tokenCreationState: TOKEN_NOT_CREATING,\n                tokenError: '',\n                serverError: null,\n                saving: false,\n            };\n        }\n        return {active: nextProps.active};\n    }\n\n    startCreatingToken = () => {\n        this.setState({tokenCreationState: TOKEN_CREATING});\n    }\n\n    stopCreatingToken = () => {\n        this.setState({tokenCreationState: TOKEN_NOT_CREATING, saving: false});\n    }\n\n    handleCreateToken = async () => {\n        this.handleCancelConfirm();\n\n        const description = this.newtokendescriptionRef ? this.newtokendescriptionRef.current!.value : '';\n\n        if (description === '') {\n            this.setState({tokenError: Utils.localizeMessage('user.settings.tokens.nameRequired', 'Please enter a description.')});\n            return;\n        }\n\n        this.setState({tokenError: '', saving: true});\n        this.props.setRequireConfirm(true, this.confirmCopyToken);\n\n        const userId = this.props.user ? this.props.user.id : '';\n        const {data, error} = await this.props.actions.createUserAccessToken(userId, description);\n\n        if (data && this.state.tokenCreationState === TOKEN_CREATING) {\n            this.setState({tokenCreationState: TOKEN_CREATED, newToken: data, saving: false});\n        } else if (error) {\n            this.setState({serverError: error.message, saving: false});\n        }\n    }\n\n    confirmCopyToken = (confirmAction: () => void) => {\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCopyTitle'\n                    defaultMessage='Copied Your Token?'\n                />\n            ),\n            confirmMessage: (state: State) => (\n                <div>\n                    <FormattedMessage\n                        id='user.settings.tokens.confirmCopyMessage'\n                        defaultMessage=\"Make sure you have copied and saved the access token below. You won't be able to see it again!\"\n                    />\n                    <br/>\n                    <br/>\n                    {state.tokenCreationState === TOKEN_CREATING ? (\n                        <div>\n                            <strong className='word-break--all'>\n                                <FormattedMessage\n                                    id='user.settings.tokens.token'\n                                    defaultMessage='Access Token: '\n                                />\n                            </strong>\n                            <FormattedMessage\n                                id='user.settings.tokens.tokenLoading'\n                                defaultMessage='Loading...'\n                            />\n                        </div>\n                    ) : (\n                        <strong className='word-break--all'>\n                            <FormattedMessage\n                                id='user.settings.tokens.token'\n                                defaultMessage='Access Token: '\n                            />\n                            {state.newToken!.token}\n                        </strong>\n                    )}\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCopyButton'\n                    defaultMessage='Yes, I have copied the token'\n                />\n            ),\n            confirmComplete: () => {\n                this.handleCancelConfirm();\n                confirmAction();\n            },\n            confirmHideCancel: true,\n        });\n    }\n\n    handleCancelConfirm = () => {\n        this.setState({\n            showConfirmModal: false,\n            confirmTitle: null,\n            confirmMessage: null,\n            confirmButton: null,\n            confirmComplete: null,\n            confirmHideCancel: false,\n        });\n    }\n\n    confirmCreateToken = () => {\n        if (!UserUtils.isSystemAdmin(this.props.user!.roles)) {\n            this.handleCreateToken();\n            return;\n        }\n\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCreateTitle'\n                    defaultMessage='Create System Admin Personal Access Token'\n                />\n            ),\n            confirmMessage: () => (\n                <div className='alert alert-danger'>\n                    <FormattedMessage\n                        id='user.settings.tokens.confirmCreateMessage'\n                        defaultMessage='You are generating a personal access token with System Admin permissions. Are you sure want to create this token?'\n                    />\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCreateButton'\n                    defaultMessage='Yes, Create'\n                />\n            ),\n            confirmComplete: () => {\n                this.handleCreateToken();\n                trackEvent('settings', 'system_admin_create_user_access_token');\n            },\n        });\n    }\n\n    saveTokenKeyPress = (e: React.KeyboardEvent) => {\n        if (Utils.isKeyPressed(e, Constants.KeyCodes.ENTER)) {\n            this.confirmCreateToken();\n        }\n    }\n\n    confirmRevokeToken = (tokenId: string) => {\n        const token = this.props.userAccessTokens[tokenId];\n\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmDeleteTitle'\n                    defaultMessage='Delete Token?'\n                />\n            ),\n            confirmMessage: () => (\n                <div className='alert alert-danger'>\n                    <FormattedMarkdownMessage\n                        id='user.settings.tokens.confirmDeleteMessage'\n                        defaultMessage='Any integrations using this token will no longer be able to access the Mattermost API. You cannot undo this action. \\n \\nAre you sure want to delete the **{description}** token?'\n                        values={{\n                            description: token.description,\n                        }}\n                    />\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmDeleteButton'\n                    defaultMessage='Yes, Delete'\n                />\n            ),\n            confirmComplete: () => {\n                this.revokeToken(tokenId);\n                trackEvent('settings', 'revoke_user_access_token');\n            },\n        });\n    }\n\n    revokeToken = async (tokenId: string) => {\n        const {error} = await this.props.actions.revokeUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        }\n        this.handleCancelConfirm();\n    }\n\n    activateToken = async (tokenId: string) => {\n        const {error} = await this.props.actions.enableUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        } else {\n            trackEvent('settings', 'activate_user_access_token');\n        }\n    }\n\n    deactivateToken = async (tokenId: string) => {\n        const {error} = await this.props.actions.disableUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        } else {\n            trackEvent('settings', 'deactivate_user_access_token');\n        }\n    }\n\n    render() {\n        let tokenListClass = '';\n\n        if (!this.props.active) {\n            const describe = Utils.localizeMessage('user.settings.tokens.clickToEdit', \"Click 'Edit' to manage your personal access tokens\");\n\n            return (\n                <SettingItemMin\n                    title={Utils.localizeMessage('user.settings.tokens.title', 'Personal Access Tokens')}\n                    describe={describe}\n                    section={SECTION_TOKENS}\n                    updateSection={this.props.updateSection}\n                />\n            );\n        }\n\n        const tokenList: JSX.Element[] = [];\n        Object.values(this.props.userAccessTokens).forEach((token) => {\n            if (this.state.newToken && this.state.newToken.id === token.id) {\n                return;\n            }\n\n            let activeLink: JSX.Element;\n            let activeStatus;\n\n            if (token.is_active) {\n                activeLink = (\n                    <a\n                        id={token.id + '_deactivate'}\n                        href='#'\n                        onClick={(e) => {\n                            e.preventDefault();\n                            this.deactivateToken(token.id);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.tokens.deactivate'\n                            defaultMessage='Disable'\n                        />\n                    </a>);\n            } else {\n                activeStatus = (\n                    <span className='has-error setting-box__inline-error'>\n                        <FormattedMessage\n                            id='user.settings.tokens.deactivatedWarning'\n                            defaultMessage='(Disabled)'\n                        />\n                    </span>\n                );\n                activeLink = (\n                    <a\n                        id={token.id + '_activate'}\n                        href='#'\n                        onClick={(e) => {\n                            e.preventDefault();\n                            this.activateToken(token.id);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.tokens.activate'\n                            defaultMessage='Enable'\n                        />\n                    </a>\n                );\n            }\n\n            tokenList.push(\n                <div\n                    key={token.id}\n                    className='setting-box__item'\n                >\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.tokenDesc'\n                            defaultMessage='Token Description: '\n                        />\n                        {token.description}\n                        {activeStatus}\n                    </div>\n                    <div className='setting-box__token-id whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.tokenId'\n                            defaultMessage='Token ID: '\n                        />\n                        {token.id}\n                    </div>\n                    <div>\n                        {activeLink}\n                        {' - '}\n                        <a\n                            id={token.id + '_delete'}\n                            href='#'\n                            onClick={(e) => {\n                                e.preventDefault();\n                                this.confirmRevokeToken(token.id);\n                            }}\n                        >\n                            <FormattedMessage\n                                id='user.settings.tokens.delete'\n                                defaultMessage='Delete'\n                            />\n                        </a>\n                    </div>\n                    <hr className='mb-3 mt-3'/>\n                </div>,\n            );\n        });\n\n        let noTokenText;\n        if (tokenList.length === 0) {\n            noTokenText = (\n                <FormattedMessage\n                    key='notokens'\n                    id='user.settings.tokens.userAccessTokensNone'\n                    defaultMessage='No personal access tokens.'\n                />\n            );\n        }\n\n        let extraInfo;\n        if (isMobile()) {\n            extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.tokens.description_mobile'\n                        defaultMessage='<linktokens>Personal access tokens</linktokens> function similarly to session tokens and can be used by integrations to <linkAPI>authenticate against the REST API</linkAPI>. Create new tokens on your desktop.'\n                        values={{\n                            linktokens: (msg: React.ReactNode) => (\n                                <a\n                                    href='https://developers.mattermost.com/integrate/admin-guide/admin-personal-access-token/'\n                                    target='_blank'\n                                    rel='noreferrer'\n                                >\n                                    {msg}\n                                </a>\n                            ),\n                            linkAPI: (msg: React.ReactNode) => (\n                                <a\n                                    href='https://api.mattermost.com/#tag/authentication'\n                                    target='_blank'\n                                    rel='noreferrer'\n                                >\n                                    {msg}\n                                </a>\n                            ),\n                        }}\n                    />\n                </span>\n            );\n        } else {\n            extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.tokens.description'\n                        defaultMessage='<linkTokens>Personal access tokens</linkTokens> function similarly to session tokens and can be used by integrations to <linkAPI>authenticate against the REST API</linkAPI>.'\n                        values={{\n                            linkTokens: (msg: React.ReactNode) => (\n                                <a\n                                    href='https://developers.mattermost.com/integrate/admin-guide/admin-personal-access-token/'\n                                    target='_blank'\n                                    rel='noreferrer'\n                                >\n                                    {msg}\n                                </a>\n                            ),\n                            linkApi: (msg: React.ReactNode) => (\n                                <a\n                                    href='https://api.mattermost.com/#tag/authentication'\n                                    target='_blank'\n                                    rel='noreferrer'\n                                >\n                                    {msg}\n                                </a>\n                            ),\n                        }}\n                    />\n                </span>\n            );\n        }\n\n        let newTokenSection;\n        if (this.state.tokenCreationState === TOKEN_CREATING) {\n            newTokenSection = (\n                <div className='pl-3'>\n                    <div className='row'>\n                        <label className='col-sm-auto control-label pr-3'>\n                            <FormattedMessage\n                                id='user.settings.tokens.name'\n                                defaultMessage='Token Description: '\n                            />\n                        </label>\n                        <div className='col-sm-5'>\n                            <input\n                                autoFocus={true}\n                                ref={this.newtokendescriptionRef}\n                                className='form-control'\n                                type='text'\n                                maxLength={64}\n                                onKeyPress={this.saveTokenKeyPress}\n                            />\n                        </div>\n                    </div>\n                    <div>\n                        <div className='pt-3'>\n                            <FormattedMessage\n                                id='user.settings.tokens.nameHelp'\n                                defaultMessage='Enter a description for your token to remember what it does.'\n                            />\n                        </div>\n                        <div>\n                            <label\n                                id='clientError'\n                                className='has-error mt-2 mb-2'\n                            >\n                                {this.state.tokenError}\n                            </label>\n                        </div>\n                        <SaveButton\n                            btnClass='btn-primary'\n                            savingMessage={\n                                <FormattedMessage\n                                    id='user.settings.tokens.save'\n                                    defaultMessage='Save'\n                                />\n                            }\n                            saving={this.state.saving}\n                            onClick={this.confirmCreateToken}\n                        />\n                        <button\n                            className='btn btn-link'\n                            onClick={this.stopCreatingToken}\n                        >\n                            <FormattedMessage\n                                id='user.settings.tokens.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </button>\n                    </div>\n                </div>\n            );\n        } else if (this.state.tokenCreationState === TOKEN_CREATED) {\n            if (tokenList.length === 0) {\n                tokenListClass = ' hidden';\n            }\n\n            newTokenSection = (\n                <div\n                    className='alert alert-warning'\n                >\n                    <WarningIcon additionalClassName='mr-2'/>\n                    <FormattedMessage\n                        id='user.settings.tokens.copy'\n                        defaultMessage=\"Please copy the access token below. You won't be able to see it again!\"\n                    />\n                    <br/>\n                    <br/>\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.name'\n                            defaultMessage='Token Description: '\n                        />\n                        {this.state.newToken!.description}\n                    </div>\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.id'\n                            defaultMessage='Token ID: '\n                        />\n                        {this.state.newToken!.id}\n                    </div>\n                    <strong className='word-break--all'>\n                        <FormattedMessage\n                            id='user.settings.tokens.token'\n                            defaultMessage='Access Token: '\n                        />\n                        {this.state.newToken!.token}\n                    </strong>\n                </div>\n            );\n        } else {\n            newTokenSection = (\n                <a\n                    className='btn btn-primary'\n                    href='#'\n                    onClick={this.startCreatingToken}\n                >\n                    <FormattedMessage\n                        id='user.settings.tokens.create'\n                        defaultMessage='Create Token'\n                    />\n                </a>\n            );\n        }\n\n        const inputs = [];\n        inputs.push(\n            <div\n                key='tokensSetting'\n                className='pt-2'\n            >\n                <div key='tokenList'>\n                    <div className={'alert alert-transparent' + tokenListClass}>\n                        {tokenList}\n                        {noTokenText}\n                    </div>\n                    {newTokenSection}\n                </div>\n            </div>,\n        );\n\n        return (\n            <div>\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.tokens.title', 'Personal Access Tokens')}\n                    inputs={inputs}\n                    extraInfo={extraInfo}\n                    infoPosition='top'\n                    serverError={this.state.serverError}\n                    updateSection={this.props.updateSection}\n                    width='full'\n                    saving={this.state.saving}\n                    cancelButtonText={\n                        <FormattedMessage\n                            id='user.settings.security.close'\n                            defaultMessage='Close'\n                        />\n                    }\n                />\n                <ConfirmModal\n                    title={this.state.confirmTitle}\n                    message={this.state.confirmMessage ? this.state.confirmMessage(this.state) : null}\n                    confirmButtonText={this.state.confirmButton}\n                    show={this.state.showConfirmModal}\n                    onConfirm={this.state.confirmComplete || (() => null)}\n                    onCancel={this.handleCancelConfirm}\n                    hideCancel={this.state.confirmHideCancel}\n                />\n            </div>\n        );\n    }\n}\n/* eslint-enable react/no-string-refs */\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\n\nimport {\n    clearUserAccessTokens,\n    createUserAccessToken,\n    getUserAccessTokensForUser,\n    revokeUserAccessToken,\n    enableUserAccessToken,\n    disableUserAccessToken,\n} from 'mattermost-redux/actions/users';\nimport {GlobalState} from '@mattermost/types/store';\nimport {ActionFunc} from 'mattermost-redux/types/actions';\n\nimport UserAccessTokenSection from './user_access_token_section';\n\ntype Actions = {\n    getUserAccessTokensForUser: (userId: string, page: number, perPage: number) => void;\n    createUserAccessToken: (userId: string, description: string) => Promise<{\n        data: {token: string; description: string; id: string; is_active: boolean} | null;\n        error?: {\n            message: string;\n        };\n    }>;\n    revokeUserAccessToken: (tokenId: string) => Promise<{\n        data: string;\n        error?: {\n            message: string;\n        };\n    }>;\n    enableUserAccessToken: (tokenId: string) => Promise<{\n        data: string;\n        error?: {\n            message: string;\n        };\n    }>;\n    disableUserAccessToken: (tokenId: string) => Promise<{\n        data: string;\n        error?: {\n            message: string;\n        };\n    }>;\n    clearUserAccessTokens: () => void;\n}\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        userAccessTokens: state.entities.users.myUserAccessTokens,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            getUserAccessTokensForUser,\n            createUserAccessToken,\n            revokeUserAccessToken,\n            enableUserAccessToken,\n            disableUserAccessToken,\n            clearUserAccessTokens,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserAccessTokenSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {UserProfile} from '@mattermost/types/users';\nimport {ActionResult} from 'mattermost-redux/types/actions';\nimport {OAuthApp} from '@mattermost/types/integrations';\n\nimport Constants from 'utils/constants';\nimport {t} from 'utils/i18n';\nimport * as Utils from 'utils/utils';\nimport icon50 from 'images/icon50x50.png';\nimport AccessHistoryModal from 'components/access_history_modal';\nimport ActivityLogModal from 'components/activity_log_modal';\nimport LocalizedIcon from 'components/localized_icon';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport ToggleModalButton from 'components/toggle_modal_button';\n\nimport MfaSection from './mfa_section';\nimport UserAccessTokenSection from './user_access_token_section';\n\nconst SECTION_MFA = 'mfa';\nconst SECTION_PASSWORD = 'password';\nconst SECTION_SIGNIN = 'signin';\nconst SECTION_APPS = 'apps';\nconst SECTION_TOKENS = 'tokens';\n\ntype Actions = {\n    getMe: () => void;\n    updateUserPassword: (\n        userId: string,\n        currentPassword: string,\n        newPassword: string\n    ) => Promise<ActionResult>;\n    getAuthorizedOAuthApps: () => Promise<ActionResult>;\n    deauthorizeOAuthApp: (clientId: string) => Promise<ActionResult>;\n};\n\ntype Props = {\n    user: UserProfile;\n    activeSection?: string;\n    updateSection: (section: string) => void;\n    closeModal: () => void;\n    collapseModal: () => void;\n    setRequireConfirm: () => void;\n    canUseAccessTokens: boolean;\n    enableOAuthServiceProvider: boolean;\n    enableSignUpWithEmail: boolean;\n    enableSignUpWithFacebook: boolean;\n    enableSignUpWithGitHub: boolean;\n    enableSignUpWithGitLab: boolean;\n    enableSignUpWithGoogle: boolean;\n    enableSignUpWithLinkedIn: boolean;\n    enableSignUpWithOffice365: boolean;\n    enableSignUpWithOpenId: boolean;\n    enableLdap: boolean;\n    enableSaml: boolean;\n    experimentalEnableAuthenticationTransfer: boolean;\n    passwordConfig: ReturnType<typeof Utils.getPasswordConfig>;\n    militaryTime: boolean;\n    actions: Actions;\n};\n\ntype State = {\n    currentPassword: string;\n    newPassword: string;\n    confirmPassword: string;\n    passwordError: React.ReactNode;\n    serverError: string | null;\n    tokenError: string;\n    savingPassword: boolean;\n    authorizedApps: OAuthApp[];\n};\n\nexport default class SecurityTab extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = this.getDefaultState();\n    }\n\n    getDefaultState() {\n        return {\n            currentPassword: '',\n            newPassword: '',\n            confirmPassword: '',\n            passwordError: '',\n            serverError: '',\n            tokenError: '',\n            authService: this.props.user.auth_service,\n            savingPassword: false,\n            authorizedApps: [],\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.enableOAuthServiceProvider) {\n            this.loadAuthorizedOAuthApps();\n        }\n    }\n\n    loadAuthorizedOAuthApps = async () => {\n        const res = await this.props.actions.getAuthorizedOAuthApps();\n        if ('data' in res) {\n            const {data} = res;\n            this.setState({authorizedApps: data, serverError: null}); //eslint-disable-line react/no-did-mount-set-state\n        } else if ('error' in res) {\n            const {error} = res;\n            this.setState({serverError: error.message}); //eslint-disable-line react/no-did-mount-set-state\n        }\n    };\n\n    submitPassword = async () => {\n        const user = this.props.user;\n        const currentPassword = this.state.currentPassword;\n        const newPassword = this.state.newPassword;\n        const confirmPassword = this.state.confirmPassword;\n\n        if (currentPassword === '') {\n            this.setState({\n                passwordError: Utils.localizeMessage(\n                    'user.settings.security.currentPasswordError',\n                    'Please enter your current password.',\n                ),\n                serverError: '',\n            });\n            return;\n        }\n\n        const {valid, error} = Utils.isValidPassword(\n            newPassword,\n            this.props.passwordConfig,\n        );\n        if (!valid && error) {\n            this.setState({\n                passwordError: error,\n                serverError: '',\n            });\n            return;\n        }\n\n        if (newPassword !== confirmPassword) {\n            const defaultState = Object.assign(this.getDefaultState(), {\n                passwordError: Utils.localizeMessage(\n                    'user.settings.security.passwordMatchError',\n                    'The new passwords you entered do not match.',\n                ),\n                serverError: '',\n            });\n            this.setState(defaultState);\n            return;\n        }\n\n        this.setState({savingPassword: true});\n\n        const res = await this.props.actions.updateUserPassword(\n            user.id,\n            currentPassword,\n            newPassword,\n        );\n        if ('data' in res) {\n            this.props.updateSection('');\n            this.props.actions.getMe();\n            this.setState(this.getDefaultState());\n        } else if ('error' in res) {\n            const {error: err} = res;\n            const state = this.getDefaultState();\n            if (err.message) {\n                state.serverError = err.message;\n            } else {\n                state.serverError = err;\n            }\n            state.passwordError = '';\n            this.setState(state);\n        }\n    };\n\n    updateCurrentPassword = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({currentPassword: e.target.value});\n    };\n\n    updateNewPassword = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({newPassword: e.target.value});\n    };\n\n    updateConfirmPassword = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({confirmPassword: e.target.value});\n    };\n\n    deauthorizeApp = async (e: React.MouseEvent) => {\n        e.preventDefault();\n\n        const appId = e.currentTarget.getAttribute('data-app') as string;\n\n        const res = await this.props.actions.deauthorizeOAuthApp(appId);\n        if ('data' in res) {\n            const authorizedApps = this.state.authorizedApps.filter((app) => {\n                return app.id !== appId;\n            });\n            this.setState({authorizedApps, serverError: null});\n        } else if ('error' in res) {\n            const {error} = res;\n            this.setState({serverError: error.message});\n        }\n    };\n\n    handleUpdateSection = (section: string) => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            switch (this.props.activeSection) {\n            case SECTION_MFA:\n            case SECTION_SIGNIN:\n            case SECTION_TOKENS:\n            case SECTION_APPS:\n                this.setState({\n                    serverError: null,\n                });\n                break;\n            case SECTION_PASSWORD:\n                this.setState({\n                    currentPassword: '',\n                    newPassword: '',\n                    confirmPassword: '',\n                    serverError: null,\n                    passwordError: null,\n                });\n                break;\n            default:\n            }\n\n            this.props.updateSection('');\n        }\n    };\n\n    createPasswordSection = () => {\n        if (this.props.activeSection === SECTION_PASSWORD) {\n            const inputs = [];\n            let submit;\n\n            if (this.props.user.auth_service === '') {\n                submit = this.submitPassword;\n\n                inputs.push(\n                    <div\n                        key='currentPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.security.currentPassword'\n                                defaultMessage='Current Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='currentPassword'\n                                autoFocus={true}\n                                className='form-control'\n                                type='password'\n                                onChange={this.updateCurrentPassword}\n                                value={this.state.currentPassword}\n                                aria-label={Utils.localizeMessage(\n                                    'user.settings.security.currentPassword',\n                                    'Current Password',\n                                )}\n                            />\n                        </div>\n                    </div>,\n                );\n                inputs.push(\n                    <div\n                        key='newPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.security.newPassword'\n                                defaultMessage='New Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='newPassword'\n                                className='form-control'\n                                type='password'\n                                onChange={this.updateNewPassword}\n                                value={this.state.newPassword}\n                                aria-label={Utils.localizeMessage(\n                                    'user.settings.security.newPassword',\n                                    'New Password',\n                                )}\n                            />\n                        </div>\n                    </div>,\n                );\n                inputs.push(\n                    <div\n                        key='retypeNewPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.security.retypePassword'\n                                defaultMessage='Retype New Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='confirmPassword'\n                                className='form-control'\n                                type='password'\n                                onChange={this.updateConfirmPassword}\n                                value={this.state.confirmPassword}\n                                aria-label={Utils.localizeMessage(\n                                    'user.settings.security.retypePassword',\n                                    'Retype New Password',\n                                )}\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (\n                this.props.user.auth_service === Constants.GITLAB_SERVICE\n            ) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordGitlabCantUpdate'\n                                defaultMessage='Login occurs through GitLab. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (\n                this.props.user.auth_service === Constants.LDAP_SERVICE\n            ) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordLdapCantUpdate'\n                                defaultMessage='Login occurs through AD/LDAP. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (\n                this.props.user.auth_service === Constants.SAML_SERVICE\n            ) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordSamlCantUpdate'\n                                defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (\n                this.props.user.auth_service === Constants.GOOGLE_SERVICE\n            ) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordGoogleCantUpdate'\n                                defaultMessage='Login occurs through Google Apps. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (\n                this.props.user.auth_service === Constants.OFFICE365_SERVICE\n            ) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordOffice365CantUpdate'\n                                defaultMessage='Login occurs through Office 365. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>,\n                );\n            }\n\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.security.password'\n                            defaultMessage='Password'\n                        />\n                    }\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.savingPassword}\n                    serverError={this.state.serverError}\n                    clientError={this.state.passwordError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe;\n\n        if (this.props.user.auth_service === '') {\n            const d = new Date(this.props.user.last_password_update);\n\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.lastUpdated'\n                    defaultMessage='Last updated {date} at {time}'\n                    values={{\n                        date: (\n                            <FormattedDate\n                                value={d}\n                                day='2-digit'\n                                month='short'\n                                year='numeric'\n                            />\n                        ),\n                        time: (\n                            <FormattedTime\n                                value={d}\n                                hour12={!this.props.militaryTime}\n                                hour='2-digit'\n                                minute='2-digit'\n                            />\n                        ),\n                    }}\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginGitlab'\n                    defaultMessage='Login done through GitLab'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.FACEBOOK_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginFacebook'\n                    defaultMessage='Login done through Facebook'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.LINKEDIN_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginLinkedIn'\n                    defaultMessage='Login done through LinkedIn'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GITHUB_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginGitHub'\n                    defaultMessage='Login done through GitHub'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.TWITTER_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginTwitter'\n                    defaultMessage='Login done through Twitter'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginLdap'\n                    defaultMessage='Login done through AD/LDAP'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginSaml'\n                    defaultMessage='Login done through SAML'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginGoogle'\n                    defaultMessage='Login done through Google Apps'\n                />\n            );\n        } else if (\n            this.props.user.auth_service === Constants.OFFICE365_SERVICE\n        ) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginOffice365'\n                    defaultMessage='Login done through Office 365'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.security.password'\n                        defaultMessage='Password'\n                    />\n                }\n                describe={describe}\n                section={SECTION_PASSWORD}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    };\n\n    createSignInSection = () => {\n        const user = this.props.user;\n\n        if (this.props.activeSection === SECTION_SIGNIN) {\n            let emailOption;\n            let gitlabOption;\n            let facebookOption;\n            let linkedinOption;\n            let githubOption;\n            let googleOption;\n            let office365Option;\n            let openidOption;\n            let ldapOption;\n            let samlOption;\n\n            if (user.auth_service === '') {\n                if (this.props.enableSignUpWithGoogle) {\n                    googleOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={\n                                    '/claim/email_to_oauth?email=' +\n                                    encodeURIComponent(user.email) +\n                                    '&old_type=' +\n                                    user.auth_service +\n                                    '&new_type=' +\n                                    Constants.GOOGLE_SERVICE\n                                }\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchGoogle'\n                                    defaultMessage='Switch to Using Google SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSignUpWithOffice365) {\n                    office365Option = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={\n                                    '/claim/email_to_oauth?email=' +\n                                    encodeURIComponent(user.email) +\n                                    '&old_type=' +\n                                    user.auth_service +\n                                    '&new_type=' +\n                                    Constants.OFFICE365_SERVICE\n                                }\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchOffice365'\n                                    defaultMessage='Switch to Using Office 365 SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSignUpWithFacebook) {\n                    facebookOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={\n                                    '/claim/email_to_oauth?email=' +\n                                    encodeURIComponent(user.email) +\n                                    '&old_type=' +\n                                    user.auth_service +\n                                    '&new_type=' +\n                                    Constants.FACEBOOK_SERVICE\n                                }\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchFacebook'\n                                    defaultMessage='Switch to Using Facebook Login'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSignUpWithGitHub) {\n                    githubOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={\n                                    '/claim/email_to_oauth?email=' +\n                                    encodeURIComponent(user.email) +\n                                    '&old_type=' +\n                                    user.auth_service +\n                                    '&new_type=' +\n                                    Constants.GITHUB_SERVICE\n                                }\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchGitHub'\n                                    defaultMessage='Switch to Using a GitHub Account'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSignUpWithLinkedIn) {\n                    linkedinOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={\n                                    '/claim/email_to_oauth?email=' +\n                                    encodeURIComponent(user.email) +\n                                    '&old_type=' +\n                                    user.auth_service +\n                                    '&new_type=' +\n                                    Constants.LINKEDIN_SERVICE\n                                }\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchLinkedIn'\n                                    defaultMessage='Switch to Using a LinkedIn Account'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSignUpWithGitLab) {\n                    gitlabOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={\n                                    '/claim/email_to_oauth?email=' +\n                                    encodeURIComponent(user.email) +\n                                    '&old_type=' +\n                                    user.auth_service +\n                                    '&new_type=' +\n                                    Constants.GITLAB_SERVICE\n                                }\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchGitlab'\n                                    defaultMessage='Switch to Using GitLab SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSignUpWithOpenId) {\n                    openidOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={\n                                    '/claim/email_to_oauth?email=' +\n                                    encodeURIComponent(user.email) +\n                                    '&old_type=' +\n                                    user.auth_service +\n                                    '&new_type=' +\n                                    Constants.OPENID_SERVICE\n                                }\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchOpenId'\n                                    defaultMessage='Switch to Using OpenID SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableLdap) {\n                    ldapOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={\n                                    '/claim/email_to_ldap?email=' +\n                                    encodeURIComponent(user.email)\n                                }\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchLdap'\n                                    defaultMessage='Switch to Using AD/LDAP'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSaml) {\n                    samlOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={\n                                    '/claim/email_to_oauth?email=' +\n                                    encodeURIComponent(user.email) +\n                                    '&old_type=' +\n                                    user.auth_service +\n                                    '&new_type=' +\n                                    Constants.SAML_SERVICE\n                                }\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchSaml'\n                                    defaultMessage='Switch to Using SAML SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n            } else if (this.props.enableSignUpWithEmail) {\n                let link;\n                if (user.auth_service === Constants.LDAP_SERVICE) {\n                    link =\n                        '/claim/ldap_to_email?email=' +\n                        encodeURIComponent(user.email);\n                } else {\n                    link =\n                        '/claim/oauth_to_email?email=' +\n                        encodeURIComponent(user.email) +\n                        '&old_type=' +\n                        user.auth_service;\n                }\n\n                emailOption = (\n                    <div className='pb-3'>\n                        <Link\n                            className='btn btn-primary'\n                            to={link}\n                        >\n                            <FormattedMessage\n                                id='user.settings.security.switchEmail'\n                                defaultMessage='Switch to Using Email and Password'\n                            />\n                        </Link>\n                        <br/>\n                    </div>\n                );\n            }\n\n            const inputs = [];\n            inputs.push(\n                <div key='userSignInOption'>\n                    {emailOption}\n                    {googleOption}\n                    {office365Option}\n                    {facebookOption}\n                    {githubOption}\n                    {linkedinOption}\n                    {gitlabOption}\n                    {openidOption}\n                    {ldapOption}\n                    {samlOption}\n                </div>,\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.security.oneSignin'\n                        defaultMessage='You may only have one sign-in method at a time. Switching sign-in method will send an email notifying you if the change was successful.'\n                    />\n                </span>\n            );\n\n            return (\n                <SettingItemMax\n                    title={Utils.localizeMessage(\n                        'user.settings.security.method',\n                        'Sign-in Method',\n                    )}\n                    extraInfo={extraInfo}\n                    inputs={inputs}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe = (\n            <FormattedMessage\n                id='user.settings.security.emailPwd'\n                defaultMessage='Email and Password'\n            />\n        );\n        if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.gitlab'\n                    defaultMessage='GitLab'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.google'\n                    defaultMessage='Google'\n                />\n            );\n        } else if (\n            this.props.user.auth_service === Constants.OFFICE365_SERVICE\n        ) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.office365'\n                    defaultMessage='Office 365'\n                />\n            );\n        } else if (\n            this.props.user.auth_service === Constants.OPENID_SERVICE\n        ) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.openid'\n                    defaultMessage='OpenID'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.ldap'\n                    defaultMessage='AD/LDAP'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.saml'\n                    defaultMessage='SAML'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage(\n                    'user.settings.security.method',\n                    'Sign-in Method',\n                )}\n                describe={describe}\n                section={SECTION_SIGNIN}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    };\n\n    createOAuthAppsSection = () => {\n        if (this.props.activeSection === SECTION_APPS) {\n            let apps;\n            if (\n                this.state.authorizedApps &&\n                this.state.authorizedApps.length > 0\n            ) {\n                apps = this.state.authorizedApps.map((app) => {\n                    const homepage = (\n                        <a\n                            href={app.homepage}\n                            target='_blank'\n                            rel='noopener noreferrer'\n                        >\n                            {app.homepage}\n                        </a>\n                    );\n\n                    return (\n                        <div\n                            key={app.id}\n                            className='pb-3 authorized-app'\n                        >\n                            <div className='col-sm-10'>\n                                <div className='authorized-app__name'>\n                                    {app.name}\n                                    <span className='authorized-app__url'>\n                                        {' -'} {homepage}\n                                    </span>\n                                </div>\n                                <div className='authorized-app__description'>\n                                    {app.description}\n                                </div>\n                                <div className='authorized-app__deauthorize'>\n                                    <a\n                                        href='#'\n                                        data-app={app.id}\n                                        onClick={this.deauthorizeApp}\n                                    >\n                                        <FormattedMessage\n                                            id='user.settings.security.deauthorize'\n                                            defaultMessage='Deauthorize'\n                                        />\n                                    </a>\n                                </div>\n                            </div>\n                            <div className='col-sm-2 pull-right'>\n                                <img\n                                    alt={app.name}\n                                    src={app.icon_url || icon50}\n                                />\n                            </div>\n                            <br/>\n                        </div>\n                    );\n                });\n            } else {\n                apps = (\n                    <div className='pb-3 authorized-app'>\n                        <div className='setting-list__hint'>\n                            <FormattedMessage\n                                id='user.settings.security.noApps'\n                                defaultMessage='No OAuth 2.0 Applications are authorized.'\n                            />\n                        </div>\n                    </div>\n                );\n            }\n\n            const inputs = [];\n            let wrapperClass;\n            let helpText;\n            if (Array.isArray(apps)) {\n                wrapperClass = 'authorized-apps__wrapper';\n\n                helpText = (\n                    <div className='authorized-apps__help'>\n                        <FormattedMessage\n                            id='user.settings.security.oauthAppsHelp'\n                            defaultMessage='Applications act on your behalf to access your data based on the permissions you grant them.'\n                        />\n                    </div>\n                );\n            }\n\n            inputs.push(\n                <div\n                    className={wrapperClass}\n                    key='authorizedApps'\n                >\n                    {apps}\n                </div>,\n            );\n\n            const title = (\n                <div>\n                    <FormattedMessage\n                        id='user.settings.security.oauthApps'\n                        defaultMessage='OAuth 2.0 Applications'\n                    />\n                    {helpText}\n                </div>\n            );\n\n            return (\n                <SettingItemMax\n                    title={title}\n                    inputs={inputs}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                    width='full'\n                    cancelButtonText={\n                        <FormattedMessage\n                            id='user.settings.security.close'\n                            defaultMessage='Close'\n                        />\n                    }\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage(\n                    'user.settings.security.oauthApps',\n                    'OAuth 2.0 Applications',\n                )}\n                describe={\n                    <FormattedMessage\n                        id='user.settings.security.oauthAppsDescription'\n                        defaultMessage=\"Click 'Edit' to manage your OAuth 2.0 Applications\"\n                    />\n                }\n                section={SECTION_APPS}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    };\n\n    render() {\n        const user = this.props.user;\n\n        const passwordSection = this.createPasswordSection();\n\n        let numMethods = 0;\n        numMethods = this.props.enableSignUpWithGitLab ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSignUpWithGoogle ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSignUpWithOffice365 ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSignUpWithOpenId ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSignUpWithFacebook ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSignUpWithLinkedIn ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSignUpWithGitHub ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableLdap ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSaml ? numMethods + 1 : numMethods;\n\n        // If there are other sign-in methods and either email is enabled or the user's account is email, then allow switching\n        let signInSection;\n        if (\n            (this.props.enableSignUpWithEmail || user.auth_service === '') &&\n            numMethods > 0 &&\n            this.props.experimentalEnableAuthenticationTransfer\n        ) {\n            signInSection = this.createSignInSection();\n        }\n\n        let oauthSection;\n        if (this.props.enableOAuthServiceProvider) {\n            oauthSection = this.createOAuthAppsSection();\n        }\n\n        let tokensSection;\n        if (this.props.canUseAccessTokens) {\n            tokensSection = (\n                <UserAccessTokenSection\n                    user={this.props.user}\n                    active={this.props.activeSection === SECTION_TOKENS}\n                    updateSection={this.handleUpdateSection}\n                    setRequireConfirm={this.props.setRequireConfirm}\n                />\n            );\n        }\n\n        return (\n            <div>\n                <div className='modal-header'>\n                    <button\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label={Utils.localizeMessage('user.settings.security.close', 'Close')}\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                    >\n                        <div className='modal-back'>\n                            <LocalizedIcon\n                                className='fa fa-angle-left'\n                                title={{id: t('generic_icons.collapse'), defaultMessage: 'Collapse Icon'}}\n                                onClick={this.props.collapseModal}\n                            />\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.security.title'\n                            defaultMessage='Security Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3 className='tab-header'>\n                        <FormattedMessage\n                            id='user.settings.security.title'\n                            defaultMessage='Security Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {passwordSection}\n                    <div className='divider-light'/>\n                    <MfaSection\n                        active={this.props.activeSection === SECTION_MFA}\n                        updateSection={this.handleUpdateSection}\n                    />\n                    <div className='divider-light'/>\n                    {oauthSection}\n                    <div className='divider-light'/>\n                    {tokensSection}\n                    <div className='divider-light'/>\n                    {signInSection}\n                    <div className='divider-dark'/>\n                    <br/>\n                    <ToggleModalButton\n                        className='security-links color--link'\n                        modalId='access_history'\n                        dialogType={AccessHistoryModal}\n                        id='viewAccessHistory'\n                    >\n                        <LocalizedIcon\n                            className='fa fa-clock-o'\n                            title={{id: t('user.settings.security.viewHistory.icon'), defaultMessage: 'Access History Icon'}}\n                        />\n                        <FormattedMessage\n                            id='user.settings.security.viewHistory'\n                            defaultMessage='View Access History'\n                        />\n                    </ToggleModalButton>\n                    <ToggleModalButton\n                        className='security-links color--link mt-2'\n                        modalId='activity_log'\n                        dialogType={ActivityLogModal}\n                        id='viewAndLogOutOfActiveSessions'\n                    >\n                        <LocalizedIcon\n                            className='fa fa-clock-o'\n                            title={{id: t('user.settings.security.logoutActiveSessions.icon'), defaultMessage: 'Active Sessions Icon'}}\n                        />\n                        <FormattedMessage\n                            id='user.settings.security.logoutActiveSessions'\n                            defaultMessage='View and Log Out of Active Sessions'\n                        />\n                    </ToggleModalButton>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {ActionCreatorsMapObject, bindActionCreators, Dispatch} from 'redux';\n\nimport {getMe, updateUserPassword} from 'mattermost-redux/actions/users';\nimport {getAuthorizedOAuthApps, deauthorizeOAuthApp} from 'mattermost-redux/actions/integrations';\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getBool} from 'mattermost-redux/selectors/entities/preferences';\nimport {GlobalState} from '@mattermost/types/store';\nimport {UserProfile} from '@mattermost/types/users';\nimport {ActionFunc, ActionResult} from 'mattermost-redux/types/actions';\n\nimport {getPasswordConfig} from 'utils/utils';\nimport {Preferences} from 'utils/constants';\n\nimport SecurityTab from './user_settings_security';\n\ntype Actions = {\n    getMe: () => void;\n    updateUserPassword: (userId: string, currentPassword: string, newPassword: string) => Promise<ActionResult>;\n    getAuthorizedOAuthApps: () => Promise<ActionResult>;\n    deauthorizeOAuthApp: (clientId: string) => Promise<ActionResult>;\n};\n\ntype Props = {\n    user: UserProfile;\n    activeSection?: string;\n    updateSection: (section: string) => void;\n    closeModal: () => void;\n    collapseModal: () => void;\n    setRequireConfirm: () => void;\n};\n\nfunction mapStateToProps(state: GlobalState, ownProps: Props) {\n    const config = getConfig(state);\n\n    const tokensEnabled = config.EnableUserAccessTokens === 'true';\n    const userHasTokenRole = UserUtils.hasUserAccessTokenRole(ownProps.user.roles) || UserUtils.isSystemAdmin(ownProps.user.roles);\n\n    const enableOAuthServiceProvider = config.EnableOAuthServiceProvider === 'true';\n    const enableSignUpWithEmail = config.EnableSignUpWithEmail === 'true';\n    const enableSignUpWithGitLab = config.EnableSignUpWithGitLab === 'true';\n    const enableSignUpWithGoogle = config.EnableSignUpWithGoogle === 'true';\n    const enableSignUpWithOpenId = config.EnableSignUpWithOpenId === 'true';\n    const enableSignUpWithFacebook = config.EnableSignUpWithFacebook === 'true';\n    const enableSignUpWithLinkedIn = config.EnableSignUpWithLinkedIn === 'true';\n    const enableSignUpWithGitHub = config.EnableSignUpWithGitHub === 'true';\n    const enableLdap = config.EnableLdap === 'true';\n    const enableSaml = config.EnableSaml === 'true';\n    const enableSignUpWithOffice365 = config.EnableSignUpWithOffice365 === 'true';\n    const experimentalEnableAuthenticationTransfer = config.ExperimentalEnableAuthenticationTransfer === 'true';\n\n    return {\n        canUseAccessTokens: tokensEnabled && userHasTokenRole,\n        enableOAuthServiceProvider,\n        enableSignUpWithEmail,\n        enableSignUpWithGitLab,\n        enableSignUpWithGoogle,\n        enableSignUpWithOpenId,\n        enableSignUpWithFacebook,\n        enableSignUpWithLinkedIn,\n        enableSignUpWithGitHub,\n        enableLdap,\n        enableSaml,\n        enableSignUpWithOffice365,\n        experimentalEnableAuthenticationTransfer,\n        passwordConfig: getPasswordConfig(config),\n        militaryTime: getBool(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.USE_MILITARY_TIME, false),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            getMe,\n            updateUserPassword,\n            getAuthorizedOAuthApps,\n            deauthorizeOAuthApp,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SecurityTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Preferences} from 'mattermost-redux/constants';\nimport {PreferenceType} from '@mattermost/types/preferences';\n\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\n\ntype Props = {\n    active: boolean;\n    currentUserId: string;\n    savePreferences: (userId: string, preferences: PreferenceType[]) => Promise<{data: boolean}>;\n    showUnreadsCategory: boolean;\n    updateSection: (section: string) => void;\n}\n\ntype State = {\n    active: boolean;\n    checked: boolean;\n    isSaving: boolean;\n}\n\nexport default class ShowUnreadsCategory extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            active: false,\n            checked: false,\n            isSaving: false,\n        };\n    }\n\n    static getDerivedStateFromProps(props: Props, state: State) {\n        if (props.active !== state.active) {\n            if (props.active && !state.active) {\n                return {\n                    checked: props.showUnreadsCategory,\n                    active: props.active,\n                };\n            }\n\n            return {\n                active: props.active,\n            };\n        }\n\n        return null;\n    }\n\n    handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            checked: e.target.value === 'true',\n        });\n    }\n\n    handleSubmit = async () => {\n        this.setState({isSaving: true});\n\n        await this.props.savePreferences(this.props.currentUserId, [{\n            user_id: this.props.currentUserId,\n            category: Preferences.CATEGORY_SIDEBAR_SETTINGS,\n            name: Preferences.SHOW_UNREAD_SECTION,\n            value: this.state.checked.toString(),\n        }]);\n\n        this.setState({isSaving: false});\n\n        this.props.updateSection('');\n    }\n\n    renderDescription = () => {\n        if (this.props.showUnreadsCategory) {\n            return (\n                <FormattedMessage\n                    id='user.settings.sidebar.on'\n                    defaultMessage='On'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.sidebar.off'\n                defaultMessage='Off'\n            />\n        );\n    }\n\n    render() {\n        const title = (\n            <FormattedMessage\n                id='user.settings.sidebar.showUnreadsCategoryTitle'\n                defaultMessage='Group unread channels separately'\n            />\n        );\n\n        if (!this.props.active) {\n            return (\n                <SettingItemMin\n                    title={title}\n                    describe={this.renderDescription()}\n                    section='showUnreadsCategory'\n                    updateSection={this.props.updateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMax\n                title={title}\n                inputs={\n                    <fieldset>\n                        <legend className='form-legend hidden-label'>\n                            {title}\n                        </legend>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    data-testid='showUnreadsCategoryOn'\n                                    type='radio'\n                                    name='showUnreadsCategory'\n                                    checked={this.state.checked}\n                                    onChange={() => this.setState({checked: true})}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.sidebar.on'\n                                    defaultMessage='On'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    data-testid='showUnreadsCategoryOff'\n                                    type='radio'\n                                    name='showUnreadsCategory'\n                                    checked={!this.state.checked}\n                                    onChange={() => this.setState({checked: false})}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.sidebar.off'\n                                    defaultMessage='Off'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='mt-5'>\n                            <FormattedMessage\n                                id='user.settings.sidebar.showUnreadsCategoryDesc'\n                                defaultMessage='When enabled, all unread channels and direct messages will be grouped together in the sidebar.'\n                            />\n                        </div>\n                    </fieldset>\n                }\n                submit={this.handleSubmit}\n                saving={this.state.isSaving}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {shouldShowUnreadsCategory} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport {GlobalState} from 'types/store';\n\nimport ShowUnreadsCategory from './show_unreads_category';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        currentUserId: getCurrentUserId(state),\n        showUnreadsCategory: shouldShowUnreadsCategory(state),\n    };\n}\n\nconst mapDispatchToProps = {\n    savePreferences,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShowUnreadsCategory);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport ReactSelect, {ValueType} from 'react-select';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Preferences} from 'mattermost-redux/constants';\nimport {PreferenceType} from '@mattermost/types/preferences';\n\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\nimport {localizeMessage} from 'utils/utils';\n\ntype Limit = {\n    value: number;\n    label: string;\n};\n\ntype Props = {\n    active: boolean;\n    currentUserId: string;\n    savePreferences: (userId: string, preferences: PreferenceType[]) => Promise<{data: boolean}>;\n    dmGmLimit: number;\n    updateSection: (section: string) => void;\n}\n\ntype State = {\n    active: boolean;\n    limit: Limit;\n    isSaving: boolean;\n}\n\nconst limits: Limit[] = [\n    {value: 10000, label: localizeMessage('user.settings.sidebar.limitVisibleGMsDMs.allDirectMessages', 'All Direct Messages')},\n    {value: 10, label: '10'},\n    {value: 15, label: '15'},\n    {value: 20, label: '20'},\n    {value: 40, label: '40'},\n];\n\nexport default class LimitVisibleGMsDMs extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            active: false,\n            limit: {value: 20, label: '20'},\n            isSaving: false,\n        };\n    }\n\n    static getDerivedStateFromProps(props: Props, state: State) {\n        if (props.active !== state.active) {\n            if (props.active && !state.active) {\n                return {\n                    limit: limits.find((l) => l.value === props.dmGmLimit),\n                    active: props.active,\n                };\n            }\n\n            return {\n                active: props.active,\n            };\n        } else if (!props.active) {\n            return {\n                limit: limits.find((l) => l.value === props.dmGmLimit),\n            };\n        }\n\n        return null;\n    }\n\n    handleChange = (selected: ValueType<Limit>) => {\n        if (selected && 'value' in selected) {\n            this.setState({limit: selected});\n        }\n    }\n\n    handleSubmit = async () => {\n        this.setState({isSaving: true});\n\n        await this.props.savePreferences(this.props.currentUserId, [{\n            user_id: this.props.currentUserId,\n            category: Preferences.CATEGORY_SIDEBAR_SETTINGS,\n            name: Preferences.LIMIT_VISIBLE_DMS_GMS,\n            value: this.state.limit.value.toString(),\n        }]);\n\n        this.setState({isSaving: false});\n\n        this.props.updateSection('');\n    }\n\n    renderDescription = () => {\n        return (\n            <span>{this.state.limit.label}</span>\n        );\n    }\n\n    render() {\n        const title = (\n            <FormattedMessage\n                id='user.settings.sidebar.limitVisibleGMsDMsTitle'\n                defaultMessage='Number of direct messages to show'\n            />\n        );\n\n        if (!this.props.active) {\n            return (\n                <SettingItemMin\n                    title={title}\n                    describe={this.renderDescription()}\n                    section='limitVisibleGMsDMs'\n                    updateSection={this.props.updateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMax\n                title={title}\n                inputs={\n                    <fieldset>\n                        <legend className='form-legend hidden-label'>\n                            {title}\n                        </legend>\n                        <ReactSelect\n                            className='react-select'\n                            classNamePrefix='react-select'\n                            id='limitVisibleGMsDMs'\n                            options={limits}\n                            clearable={false}\n                            onChange={this.handleChange}\n                            value={this.state.limit}\n                            isSearchable={false}\n                            menuPortalTarget={document.body}\n                            styles={reactStyles}\n                        />\n                        <div className='mt-5'>\n                            <FormattedMessage\n                                id='user.settings.sidebar.limitVisibleGMsDMsDesc'\n                                defaultMessage='You can also change these settings in the direct messages sidebar menu.'\n                            />\n                        </div>\n                    </fieldset>\n                }\n                submit={this.handleSubmit}\n                saving={this.state.isSaving}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n\nconst reactStyles = {\n    menuPortal: (provided: React.CSSProperties) => ({\n        ...provided,\n        zIndex: 9999,\n    }),\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {getInt} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport {GlobalState} from 'types/store';\n\nimport LimitVisibleGMsDMs from './limit_visible_gms_dms';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        currentUserId: getCurrentUserId(state),\n        dmGmLimit: getInt(state, Preferences.CATEGORY_SIDEBAR_SETTINGS, Preferences.LIMIT_VISIBLE_DMS_GMS, 20),\n    };\n}\n\nconst mapDispatchToProps = {\n    savePreferences,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LimitVisibleGMsDMs);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport LocalizedIcon from 'components/localized_icon';\n\nimport {t} from 'utils/i18n';\n\nimport ShowUnreadsCategory from './show_unreads_category';\nimport LimitVisibleGMsDMs from './limit_visible_gms_dms';\n\nexport interface Props {\n    updateSection: (section: string) => void;\n    activeSection: string;\n    closeModal: () => void;\n    collapseModal: () => void;\n}\n\nexport default function UserSettingsSidebar(props: Props): JSX.Element {\n    return (\n        <div>\n            <div className='modal-header'>\n                <button\n                    id='closeButton'\n                    type='button'\n                    className='close'\n                    data-dismiss='modal'\n                    aria-label='Close'\n                    onClick={props.closeModal}\n                >\n                    <span aria-hidden='true'>{'×'}</span>\n                </button>\n                <h4 className='modal-title'>\n                    <div\n                        className='modal-back'\n                        onClick={props.collapseModal}\n                    >\n                        <LocalizedIcon\n                            className='fa fa-angle-left'\n                            title={{id: t('generic_icons.collapse'), defaultMessage: 'Collapse Icon'}}\n                        />\n                    </div>\n                    <FormattedMessage\n                        id='user.settings.sidebar.title'\n                        defaultMessage='Sidebar Settings'\n                    />\n                </h4>\n            </div>\n            <div\n                id='sidebarTitle'\n                className='user-settings'\n            >\n                <h3 className='tab-header'>\n                    <FormattedMessage\n                        id='user.settings.sidebar.title'\n                        defaultMessage='Sidebar Settings'\n                    />\n                </h3>\n                <div className='divider-dark first'/>\n                <ShowUnreadsCategory\n                    active={props.activeSection === 'showUnreadsCategory'}\n                    updateSection={props.updateSection}\n                />\n                <div className='divider-dark'/>\n                <LimitVisibleGMsDMs\n                    active={props.activeSection === 'limitVisibleGMsDMs'}\n                    updateSection={props.updateSection}\n                />\n                <div className='divider-dark'/>\n            </div>\n        </div>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport UserSettingsSidebar from './user_settings_sidebar';\n\nexport default UserSettingsSidebar;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {UserProfile} from '@mattermost/types/users';\n\nimport AdvancedTab from './advanced';\nimport DisplayTab from './display';\nimport GeneralTab from './general';\nimport NotificationsTab from './notifications';\nimport SecurityTab from './security';\nimport SidebarTab from './sidebar';\n\nexport type Props = {\n    user: UserProfile;\n    activeTab?: string;\n    activeSection: string;\n    updateSection: (section: string) => void;\n    updateTab: (notifications: string) => void;\n    closeModal: () => void;\n    collapseModal: () => void;\n    setEnforceFocus: () => void;\n    setRequireConfirm: () => void;\n};\n\nexport default class UserSettings extends React.PureComponent<Props> {\n    render() {\n        if (this.props.activeTab === 'profile') {\n            return (\n                <div>\n                    <GeneralTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        updateTab={this.props.updateTab}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'security') {\n            return (\n                <div>\n                    <SecurityTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                        setRequireConfirm={this.props.setRequireConfirm}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'notifications') {\n            return (\n                <div>\n                    <NotificationsTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'display') {\n            return (\n                <div>\n                    <DisplayTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                        setEnforceFocus={this.props.setEnforceFocus}\n                        setRequireConfirm={this.props.setRequireConfirm}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'sidebar') {\n            return (\n                <div>\n                    <SidebarTab\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'advanced') {\n            return (\n                <div>\n                    <AdvancedTab\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        }\n\n        return <div/>;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {GlobalState} from '@mattermost/types/store';\n\nimport UserSettings from './user_settings';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        user: getCurrentUser(state),\n    };\n}\n\nexport default connect(mapStateToProps)(UserSettings);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport LocalizedIcon from 'components/localized_icon';\n\nimport {t} from 'utils/i18n';\n\ntype Props = {\n    additionalClassName: string | null;\n}\n\nexport default class WarningIcon extends React.PureComponent<Props> {\n    public static defaultProps: Props = {\n        additionalClassName: null,\n    };\n\n    public render(): JSX.Element {\n        const className = 'fa fa-warning' + (this.props.additionalClassName ? ' ' + this.props.additionalClassName : '');\n        return (\n            <LocalizedIcon\n                className={className}\n                title={{id: t('generic_icons.warning'), defaultMessage: 'Warning Icon'}}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {makeGetUserTimezone} from 'mattermost-redux/selectors/entities/timezone';\n\nimport {DispatchFunc, GetStateFunc} from 'mattermost-redux/types/actions';\n\nimport {updateMe} from './users';\nexport function autoUpdateTimezone(deviceTimezone: string) {\n    return async (dispatch: DispatchFunc, getState: GetStateFunc) => {\n        const currentUser = getCurrentUser(getState());\n        const currentTimezone = makeGetUserTimezone()(getState(), currentUser.id);\n        const newTimezoneExists = currentTimezone.automaticTimezone !== deviceTimezone;\n\n        if (currentTimezone.useAutomaticTimezone && newTimezoneExists) {\n            const timezone = {\n                useAutomaticTimezone: 'true',\n                automaticTimezone: deviceTimezone,\n                manualTimezone: currentTimezone.manualTimezone,\n            };\n\n            const updatedUser = {\n                ...currentUser,\n                timezone,\n            };\n\n            updateMe(updatedUser)(dispatch, getState);\n        }\n    };\n}\n"],"names":["UserActions","getCurrentUserId","activateMfa","code","dispatch","getState","currentUserId","updateUserMfa","deactivateMfa","generateMfaSecret","React","defineMessages","FormattedDate","FormattedMessage","FormattedTime","injectIntl","t","toTitleCase","isSystemAdmin","holders","sessionRevoked","id","defaultMessage","channelCreated","establishedDM","nameUpdated","headerUpdated","channelDeleted","userAdded","userRemoved","attemptedRegisterApp","attemptedAllowOAuthAccess","successfullOAuthAccess","failedOAuthAccess","attemptedOAuthToken","successfullOAuthToken","oauthTokenFailed","attemptedLogin","authenticated","successfullLogin","failedLogin","updatePicture","updateGeneral","attemptedPassword","successfullPassword","failedPassword","updatedRol","member","accountActive","accountInactive","by","byAdmin","sentEmail","attemptedReset","successfullReset","updateGlobalNotifications","attemptedWebhookCreate","succcessfullWebhookCreate","failedWebhookCreate","attemptedWebhookDelete","successfullWebhookDelete","failedWebhookDelete","logout","verified","revokedAll","loginAttempt","loginFailure","attemptedLicenseAdd","successfullLicenseAdd","failedExpiredLicenseAdd","failedInvalidLicenseAdd","licenseRemoved","AuditTable","PureComponent","componentDidMount","ids","props","audits","map","audit","user_id","actions","getMissingProfilesByIds","render","showUserId","showIp","showSession","accessList","i","entries","auditInfo","formatAuditInfo","uContent","userId","iContent","ip","sContent","sessionId","descStyle","desc","toLowerCase","indexOf","timestamp","userIdContent","ipContent","sessionContent","formatMessage","intl","actionURL","action","replace","auditDesc","channelInfo","extra_info","split","channelNameField","channelURL","channelObj","channelName","getByName","display_name","username","getDirectTeammate","userIdField","profile","getUser","test","url","oauthInfo","clientIdField","oauthTokenFailure","trim","token","userInfo","userRoles","updateType","updateField","actingUserInfo","actingUser","user","currentUser","roles","email","webhookInfo","licenseInfo","actionDesc","lastIndexOf","substring","extraInfoDesc","date","Date","create_at","auditProfile","ip_address","session_id","connect","bindActionCreators","getCurrentUser","getChannelByName","mapStateToProps","state","channelId","mapDispatchToProps","ChromePicker","tinycolor","ColorInput","constructor","e","colorPicker","current","contains","target","setState","isOpened","colorInput","focus","newColorData","onChange","hex","event","value","color","normalizedColor","toHex","isValid","focused","setSelectionRange","length","key","togglePicker","createRef","getDerivedStateFromProps","componentDidUpdate","prevProps","prevState","prevIsOpened","document","addEventListener","checkClick","removeEventListener","onBlur","onFocus","onKeyDown","isDisabled","backgroundColor","handleColorChange","Preferences","SettingItemMax","SettingItemMin","AdvancedSections","JoinLeaveSection","currentTarget","joinLeaveState","section","joinLeave","onUpdateSection","joinLeavePreference","category","CATEGORY_ADVANCED_SETTINGS","name","ADVANCED_FILTER_JOIN_LEAVE","savePreferences","activeSection","JOIN_LEAVE","handleOnChange","handleSubmit","isSaving","serverError","handleUpdateSection","renderOnOffLabel","get","getPreference","useCallback","useState","PerformanceDebuggingSection","performanceDebuggingEnabled","settings","PERFORMANCE_DEBUGGING","PerformanceDebuggingSectionCollapsed","settingsEnabled","disableClientPlugins","disableTelemetry","disableTypingMessages","description","count","PerformanceDebuggingSectionExpanded","setDisableClientPlugins","setDisableTelemetry","setDisableTypingMessages","preferences","push","CATEGORY_PERFORMANCE_DEBUGGING","NAME_DISABLE_CLIENT_PLUGINS","toString","NAME_DISABLE_TELEMETRY","NAME_DISABLE_TYPING_MESSAGES","checked","isPerformanceDebuggingEnabled","getBool","connector","PropTypes","emitUserLoggedOutEvent","Constants","Utils","ConfirmModal","BackIcon","PreReleaseFeatures","PRE_RELEASE_FEATURES","AdvancedSettingsDisplay","advancedSettings","advancedSettingsCategory","send_on_ctrl_enter","sendOnCtrlEnter","code_block_ctrl_enter","codeBlockOnCtrlEnter","formatting","join_leave","PreReleaseFeaturesLocal","JSON","parse","stringify","isAdvancedTextEditorEnabled","MARKDOWN_PREVIEW","preReleaseFeaturesKeys","Object","keys","enabledFeatures","as","feature","FeatureTogglePrefix","label","previewFeaturesEnabled","enablePreviewFeatures","showDeactivateAccountModal","preReleaseFeatures","setting","String","forEach","features","Array","isArray","updateUserActive","then","error","message","data","revokeAllSessionsForUser","getStateFromProps","updateSection","default","mac","title","isMac","ctrlSendTitle","ctrlSendDesc","updateSetting","bind","enabled","renderCtrlEnterLabel","ctrlEnter","codeBlockCtrlEnter","renderFeatureLabel","ctrlSendSection","getCtrlSendText","ctrlSendActive","inputs","formattingSection","renderFormattingSection","formattingSectionDivider","previewFeaturesSection","previewFeaturesSectionDivider","toggleFeature","saveEnabledFeatures","localizeMessage","deactivateAccountSection","makeConfirmationModal","auth_service","enableUserDeactivation","handleShowDeactivateAccountModal","confirmButtonClass","deactivateMemberButton","handleDeactivateAccountSubmit","handleHideDeactivateAccountModal","closeModal","collapseModal","object","isRequired","array","bool","string","func","shape","getConfig","getIsAdvancedTextEditorEnabled","makeGetCategory","makeMapStateToProps","getAdvancedSettingsCategory","config","EnablePreviewFeatures","EnableUserDeactivation","Modal","setThemeDefaults","ImportThemeModal","show","preventDefault","text","isInputValid","inputError","sidebarBg","sidebarHeaderBg","sidebarTextActiveBorder","sidebarTextActiveColor","sidebarTextHoverBg","sidebarText","onlineIndicator","mentionBg","theme","type","sidebarUnreadText","sidebarHeaderTextColor","callback","handleOnHide","colors","charAt","onExited","handleChange","ColorChooser","newColor","LocalizedIcon","OverlayTrigger","Popover","COPY_SUCCESS_INTERVAL","messages","sidebarTeamBarBg","awayIndicator","dndIndicator","mentionColor","centerChannelBg","centerChannelColor","newMessageSeparator","linkColor","buttonBg","buttonColor","errorTextColor","mentionHighlightBg","mentionHighlightLink","codeTheme","CustomThemeChooser","settingId","updateTheme","newTheme","mentionBj","copyTheme","setCopyTheme","window","clipboardData","getData","err","stopPropagation","textarea","refs","sidebarStylesHeader","classList","toggle","toggleSection","sidebarStyles","centerChannelStylesHeader","centerChannelStyles","linkAndButtonStylesHeader","linkAndButtonStyles","selectTheme","execCommand","showCopySuccess","copySuccess","querySelector","style","display","setTimeout","assign","image","node","ontransitionend","overflowY","sidebarElements","centerChannelElements","linkAndButtonElements","THEME_ELEMENTS","element","index","codeThemeOptions","codeThemeURL","themes","codeThemeIndex","iconURL","uiName","popoverContent","onCodeThemeChange","group","pasteBox","pasteBoxChange","onChangeHandle","toggleSidebarStyles","toggleCenterChannelStyles","toggleLinkAndButtonStyles","ThemeThumbnail","themeName","themeKey","fill","changeOpacity","PremadeThemeChooser","premadeThemes","allowedThemes","hasAllowedThemes","k","THEMES","hasOwnProperty","premadeTheme","activeClass","propTypes","arrayOf","defaultProps","AllowedThemes","ModalIdentifiers","ThemeSetting","teamId","applyToAllTeams","currentTeamId","saveTheme","deleteTeamSpecificThemes","setRequireConfirm","originalTheme","themeChanged","field","applyTheme","openModal","modalId","IMPORT_THEME_MODAL","dialogType","dialogProps","setEnforceFocus","selected","resetFields","componentWillUnmount","DEFAULT_CODE_THEME","showAllTeamsCheckbox","displayCustom","custom","premade","allowCustomThemes","themeUI","handleImportModal","allTeamsCheckbox","submitTheme","getTheme","getCurrentTeamId","getMyTeamsCount","UserSettingsTheme","getThemeCategory","CATEGORY_THEME","ReactSelect","getBrowserTimezone","getTimezoneLabel","ManageTimezones","selectedOption","manualTimezone","useAutomaticTimezone","automaticTimezone","oldUseAutomaticTimezone","oldAutomaticTimezone","oldManualTimezone","timezoneNotChanged","submitUser","timezone","updatedUser","updateMe","res","Error","timezoneLabel","selectedOptionValue","timezones","openMenu","timeOptions","timeObject","utc","reactStyles","menuPortal","provided","zIndex","noTimezonesFromServer","automaticTimezoneInput","handleAutomaticTimezone","manualTimezoneInput","body","changeTimezone","I18n","FormattedMarkdownMessage","isKeyPressed","ManageLanguage","modalBody","KeyCodes","ESCAPE","remove","ENTER","add","locale","locales","getLanguages","userLocale","reactSelectContainer","handleContainerKeyDown","options","languages","l","order","sort","a","b","lang","input","setLanguage","handleKeyDown","handleMenuClose","handleMenuOpen","changeLanguage","ManageLanguages","deepEqual","trackEvent","getDisplayStateFromProps","militaryTime","teammateNameDisplay","availabilityStatusOnPosts","channelDisplayMode","messageDisplay","collapseDisplay","collapsedReplyThreads","linkPreviewDisplay","oneClickReactionsOnPosts","clickToReply","UserSettingsDisplay","timePreference","CATEGORY_DISPLAY_SETTINGS","USE_MILITARY_TIME","availabilityStatusOnPostsPreference","AVAILABILITY_STATUS_ON_POSTS","teammateNameDisplayPreference","NAME_NAME_FORMAT","channelDisplayModePreference","CHANNEL_DISPLAY_MODE","messageDisplayPreference","MESSAGE_DISPLAY","collapseDisplayPreference","COLLAPSE_DISPLAY","collapsedReplyThreadsPreference","COLLAPSED_REPLY_THREADS","linkPreviewDisplayPreference","LINK_PREVIEW_DISPLAY","oneClickReactionsOnPostsPreference","ONE_CLICK_REACTIONS_ENABLED","clickToReplyPreference","CLICK_TO_REPLY","trackChangeIfNecessary","updateState","newState","prevSections","clock","linkpreview","message_display","channel_display_mode","enableTimezone","shouldAutoUpdateTimezone","autoUpdateTimezone","preference","oldValue","handleChannelDisplayModeRadio","handlemessageDisplayRadio","handleCollapseRadio","handleCollapseReplyThreadsRadio","handleLinkPreviewRadio","createSection","firstOption","secondOption","thirdOption","disabled","extraInfo","submit","firstMessage","radionButtonText","moreColon","firstMessageMore","moreId","moreMessage","secondMessage","secondMessageMore","thirdMessage","messageTitle","messageDesc","format","firstDisplay","secondDisplay","thirdSection","thirdDisplay","describe","collapseSection","defaultDisplay","linkPreviewSection","enableLinkPreviews","clockSection","teammateNameDisplaySection","lockTeammateNameDisplay","configTeammateNameDisplay","TEAMMATE_NAME_DISPLAY","SHOW_USERNAME","SHOW_NICKNAME_FULLNAME","SHOW_FULLNAME","availabilityStatusOnPostsSection","timezoneSelection","userTimezone","Boolean","messageDisplaySection","MESSAGE_DISPLAY_CLEAN","MESSAGE_DISPLAY_COMPACT","collapsedReplyThreadsAllowUserPreference","COLLAPSED_REPLY_THREADS_FALLBACK_DEFAULT","COLLAPSED_REPLY_THREADS_ON","COLLAPSED_REPLY_THREADS_OFF","channelDisplayModeSection","CHANNEL_DISPLAY_MODE_FULL_SCREEN","CHANNEL_DISPLAY_MODE_CENTERED","languagesSection","isLanguageAvailable","defaultClientLocale","getLanguageInfo","themeSection","enableThemeSelection","oneClickReactionsOnPostsSection","emojiPickerEnabled","currentUserTimezone","getLicense","isCollapsedThreadsAllowed","getCollapsedThreadsPreference","makeGetUserTimezone","getUserCurrentTimezone","CollapsedThreads","getUserTimezone","automaticTimezoneNotSet","AllowCustomThemes","EnableLinkPreviews","DefaultClientLocale","EnableThemeSelection","ExperimentalTimezone","LockTeammateNameDisplay","TeammateNameDisplay","EnableEmojiPicker","AVAILABILITY_STATUS_ON_POSTS_DEFAULT","USE_MILITARY_TIME_DEFAULT","CHANNEL_DISPLAY_MODE_DEFAULT","MESSAGE_DISPLAY_DEFAULT","COLLAPSE_DISPLAY_DEFAULT","ALWAYS_ON","CLICK_TO_REPLY_DEFAULT","LINK_PREVIEW_DISPLAY_DEFAULT","ONE_CLICK_REACTIONS_ENABLED_DEFAULT","isEmail","SettingPicture","LoadingWrapper","AnnouncementBarMessages","AnnouncementBarTypes","AcceptedProfileImageTypes","ValidationErrors","usernameReserved","usernameGroupNameUniqueness","usernameRestrictions","validEmail","emailMatch","incorrectPassword","emptyPassword","validImage","imageTooLarge","uploadImage","uploadImageMobile","fullName","nickname","profilePicture","close","position","UserSettingsGeneralTab","Component","resendStatus","showSpinner","sendVerificationEmail","handleEmailResend","usernameError","isValidUsername","errObj","RESERVED_NAME","clientError","min","MIN_USERNAME_LENGTH","max","MAX_USERNAME_LENGTH","firstName","lastName","first_name","last_name","confirmEmail","currentPassword","emailError","password","emailUpdated","sectionIsSaving","verificationEnabled","requireEmailVerification","clearErrors","logError","EMAIL_VERIFICATION_REQUIRED","SUCCESS","server_error_id","setDefaultProfileImage","submitActive","pictureFile","file","includes","size","maxFileSize","loadingPicture","uploadProfileImage","setupInitialState","files","originalEmail","createEmailSection","emailSection","emailVerificationEnabled","helpText","updateEmail","MAX_EMAIL_LENGTH","updateConfirmEmail","updateCurrentPassword","submitEmail","GITLAB_SERVICE","GOOGLE_SERVICE","OFFICE365_SERVICE","OPENID_SERVICE","LDAP_SERVICE","SAML_SERVICE","nameSection","ldapFirstNameAttributeSet","ldapLastNameAttributeSet","samlFirstNameAttributeSet","samlLastNameAttributeSet","OAUTH_SERVICES","updateFirstName","MAX_FIRSTNAME_LENGTH","moveCursorToEnd","updateLastName","MAX_LASTNAME_LENGTH","notifClick","updateTab","notifLink","notify","submitName","isMobile","nicknameSection","ldapNicknameAttributeSet","samlNicknameAttributeSet","nicknameLabel","updateNickname","MAX_NICKNAME_LENGTH","submitNickname","usernameSection","usernameLabel","updateUsername","submitUsername","positionSection","ldapPositionAttributeSet","samlPositionAttributeSet","positionLabel","updatePosition","MAX_POSITION_LENGTH","submitPosition","pictureSection","setDefault","imgSrc","ldapPictureAttributeSet","submitPicture","last_picture_update","setDefaultProfilePicture","imageURLForUser","fileSizeToString","defaultImageURLForUser","minMessage","RequireEmailVerification","parseInt","MaxFileSize","LdapFirstNameAttributeSet","LdapLastNameAttributeSet","SamlFirstNameAttributeSet","SamlLastNameAttributeSet","LdapNicknameAttributeSet","SamlNicknameAttributeSet","SamlPositionAttributeSet","LdapPositionAttributeSet","LdapPictureAttributeSet","semver","NotificationLevels","isDesktopApp","DesktopNotificationSettings","cancel","getAttribute","setParentState","ALL","MENTION","tryNotificationSound","activityRadio","activity","NONE","soundSection","notificationSelection","threadsNotificationSelection","soundRadio","sound","sounds","from","notificationSounds","desktop","gte","version","setDesktopNotificationSound","dropdownSoundRef","hasSoundOptions","isCollapsedThreadsEnabled","threads","handleThreadsOnChange","saving","handleMaxUpdateSection","formattedMessageProps","hasSoundOption","handleMinUpdateSection","selectedSound","blurDropdown","blur","active","buildMaximizedSetting","buildMinimizedSetting","getEmailInterval","enableEmailNotification","enableEmailBatching","emailIntervalPreference","INTERVAL_NEVER","INTERVAL_IMMEDIATE","INTERVAL_FIFTEEN_MINUTES","INTERVAL_HOUR","validValuesWithEmailBatching","validValuesWithoutEmailBatching","SECONDS_PER_MINUTE","EmailNotificationSetting","enableEmail","newInterval","emailInterval","CATEGORY_NOTIFICATIONS","EMAIL_INTERVAL","onSubmit","onCancel","sendEmailNotifications","batchingOptions","batchingInfo","nextProps","renderMinSettingView","renderMaxSettingView","INTERVAL_NOT_SET","EnableEmailBatching","SendEmailNotifications","MESSAGE_MAX_LENGTH","ManageAutoResponder","autoResponderActive","autoResponderMessage","activeToggle","handleAutoResponderChecked","resize","onMessageChanged","getNotificationsStateFromProps","desktopThreads","pushThreads","emailThreads","desktopNotificationSound","comments","pushActivity","pushStatus","UserStatuses","AWAY","notify_props","desktop_threads","push_threads","email_threads","desktop_sound","desktop_notification_sound","push_status","auto_responder_active","auto_responder_message","usernameKey","customKeys","firstNameKey","channelKey","mention_keys","splice","join","channel","desktopActivity","desktopSound","customKeysChecked","notifyCommentsLevel","NotificationsTab","mentionKeys","stringKeys","result","handleCancel","val","customCheckRef","customMentionsRef","updateCustomMentionKeys","sendPushNotifications","pushActivityRadio","pushStatusRadio","ONLINE","pushThreadsNotificationSelection","handleNotifyPushThread","pushStatusSettings","handlePushStatusRadio","OFFLINE","handlePushRadio","drawerRef","wrapperRef","handleNotifyCommentsRadio","keysSection","handleUpdateFirstNameKey","updateFirstNameKey","handleUpdateUsernameKey","updateUsernameKey","handleUpdateChannelKey","updateChannelKey","onCustomChange","concat","commentsSection","commentsActive","autoResponderSection","enableAutoResponder","setStateValue","pushNotificationSection","createPushNotificationSection","handleEmailRadio","activeTab","UserSettingsNotifications","SendPushNotifications","ExperimentalEnableAutomaticReplies","LoadingScreen","AccessHistoryModal","getUserAudits","onShow","content","userAudits","onHide","getCurrentUserAudits","getMonthLong","MoreInfo","currentSession","handleMoreInfo","moreInfo","firstAccessTime","time","os","browser","General","ActivityLog","submitRevoke","session","device_id","deviceTypeId","deviceTypeMessage","devicePicture","deviceTitle","PUSH_NOTIFY_APPLE_REACT_NATIVE","PUSH_NOTIFY_ANDROID_REACT_NATIVE","devicePlatform","lastAccessTime","last_activity_at","platform","isMobileSession","sessionInfo","mobileSessionInfo","ActivityLogModal","altId","modalContent","closest","revokeSession","getSessions","activityList","sessions","reduce","getUserSessions","getCurrentLocale","browserHistory","SECTION_MFA","MfaSection","mfaEnforced","mfaActive","buttonText","removeMfa","setupMfa","renderTitle","mfaAvailable","renderDescription","renderContent","renderHelpText","license","mfaLicensed","IsLicensed","MFA","mfaEnabled","EnableMultifactorAuthentication","EnforceMultifactorAuthentication","mfa_active","UserUtils","SaveButton","WarningIcon","SECTION_TOKENS","TOKEN_CREATING","TOKEN_CREATED","TOKEN_NOT_CREATING","UserAccessTokenSection","tokenCreationState","handleCancelConfirm","newtokendescriptionRef","tokenError","confirmCopyToken","createUserAccessToken","newToken","confirmAction","showConfirmModal","confirmTitle","confirmMessage","confirmButton","confirmComplete","confirmHideCancel","handleCreateToken","confirmCreateToken","tokenId","userAccessTokens","revokeToken","revokeUserAccessToken","enableUserAccessToken","disableUserAccessToken","clearUserAccessTokens","getUserAccessTokensForUser","tokenListClass","tokenList","values","activeLink","activeStatus","is_active","deactivateToken","activateToken","confirmRevokeToken","noTokenText","linktokens","msg","linkAPI","linkTokens","linkApi","newTokenSection","saveTokenKeyPress","stopCreatingToken","startCreatingToken","entities","users","myUserAccessTokens","Link","icon50","ToggleModalButton","SECTION_PASSWORD","SECTION_SIGNIN","SECTION_APPS","SecurityTab","getAuthorizedOAuthApps","authorizedApps","newPassword","confirmPassword","passwordError","valid","isValidPassword","passwordConfig","defaultState","getDefaultState","savingPassword","updateUserPassword","getMe","appId","deauthorizeOAuthApp","filter","app","submitPassword","updateNewPassword","updateConfirmPassword","d","last_password_update","FACEBOOK_SERVICE","LINKEDIN_SERVICE","GITHUB_SERVICE","TWITTER_SERVICE","emailOption","gitlabOption","facebookOption","linkedinOption","githubOption","googleOption","office365Option","openidOption","ldapOption","samlOption","enableSignUpWithGoogle","encodeURIComponent","enableSignUpWithOffice365","enableSignUpWithFacebook","enableSignUpWithGitHub","enableSignUpWithLinkedIn","enableSignUpWithGitLab","enableSignUpWithOpenId","enableLdap","enableSaml","enableSignUpWithEmail","link","apps","homepage","deauthorizeApp","icon_url","wrapperClass","authService","enableOAuthServiceProvider","loadAuthorizedOAuthApps","passwordSection","createPasswordSection","numMethods","signInSection","experimentalEnableAuthenticationTransfer","createSignInSection","oauthSection","createOAuthAppsSection","tokensSection","canUseAccessTokens","getPasswordConfig","ownProps","tokensEnabled","EnableUserAccessTokens","userHasTokenRole","hasUserAccessTokenRole","EnableOAuthServiceProvider","EnableSignUpWithEmail","EnableSignUpWithGitLab","EnableSignUpWithGoogle","EnableSignUpWithOpenId","EnableSignUpWithFacebook","EnableSignUpWithLinkedIn","EnableSignUpWithGitHub","EnableLdap","EnableSaml","EnableSignUpWithOffice365","ExperimentalEnableAuthenticationTransfer","ShowUnreadsCategory","CATEGORY_SIDEBAR_SETTINGS","SHOW_UNREAD_SECTION","showUnreadsCategory","shouldShowUnreadsCategory","limits","LimitVisibleGMsDMs","limit","LIMIT_VISIBLE_DMS_GMS","find","dmGmLimit","getInt","UserSettingsSidebar","AdvancedTab","DisplayTab","GeneralTab","SidebarTab","UserSettings","className","additionalClassName","deviceTimezone","currentTimezone","newTimezoneExists"],"sourceRoot":""}