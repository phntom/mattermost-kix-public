{"version":3,"file":"626.ade3a20940da1631e294.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAgCe,MAAMe,cAAN,SAA6Bf,mBAA7B,CAA2F;EAGtGiB,WAAW,CAACC,KAAD,EAA6B;IACpC,MAAMA,KAAN;;IADoC;;IAAA,2CAuBpB,YAA2B;MAC3C,KAAKC,QAAL,CAAc;QACVC,sBAAsB,EAAE,EADd;QAEVC,wBAAwB,EAAE,EAFhB;QAGVC,OAAO,EAAE;MAHC,CAAd;MAKA,MAAM;QAACC;MAAD,IAAS,MAAM,KAAKL,KAAL,CAAWM,OAAX,CAAmBC,iBAAnB,EAArB;;MACA,IAAIF,IAAJ,EAAU;QACN,KAAKJ,QAAL,CAAc;UACVC,sBAAsB,EAAEG,IAAI,CAACG,EADnB;UAEVL,wBAAwB,EAAEE,IAAI,CAACI,IAFrB;UAGVL,OAAO,EAAE;QAHC,CAAd;MAKH,CAND,MAMO;QACHjB,6CAAA,wBAAqDS,2DAArD;MACH;IACJ,CAvCuC;;IAAA,2CAyCnBgB,CAAD,IAA8D;MAC9EA,CAAC,CAACC,cAAF;MACA1B,6CAAA,CAAqC,QAArC;IACH,CA5CuC;;IAAA,2CA8CpB,MAAY;MAC5B,KAAKc,QAAL,CAAc;QACVa,YAAY,EAAE,IADJ;QAEVC,WAAW,EAAE;MAFH,CAAd;MAIA,KAAKC,kBAAL,CACI,IADJ,EAEI,MAAM;QACF,MAAMC,KAAK,GAAG,IAAIC,eAAJ,CAAoB,KAAKlB,KAAL,CAAWmB,QAAX,CAAoBC,MAAxC,CAAd;QACA,MAAMC,UAAU,GAAGJ,KAAK,CAACK,GAAN,CAAU,aAAV,CAAnB;;QACA,IAAID,UAAU,IAAIA,UAAU,CAACE,KAAX,CAAiB,aAAjB,CAAlB,EAAmD;UAC/C9B,+CAAA,CAAoB4B,UAApB;QACH,CAFD,MAEO,IAAI,KAAKrB,KAAL,CAAWyB,iBAAf,EAAkC;UACrC;UACA;UACA;UACA;UACAhC,+CAAA,CAAoB,GAApB;QACH,CANM,MAMA;UACHN,gDAAA;QACH;MACJ,CAhBL;IAkBH,CArEuC;;IAAA,2CAuEpB,MAAY;MAC5B,KAAKc,QAAL,CAAc;QACV0B,eAAe,EAAE,IADP;QAEVZ,WAAW,EAAE;MAFH,CAAd;MAIA,KAAKC,kBAAL,CACI,KADJ,EAEI,MAAM;QACF7B,6CAAA,wBAAqDS,yDAArD;MACH,CAJL;IAMH,CAlFuC;;IAAA,4CAoFnB,OAAOiC,QAAP,EAA0BC,OAA1B,KAA2G;MAC5H,MAAM;QAACzB;MAAD,IAAS,MAAM,KAAKL,KAAL,CAAWM,OAAX,CAAmByB,4BAAnB,CAAgD,KAAKC,KAAL,CAAW9B,sBAA3D,EAAmF2B,QAAnF,CAArB;;MACA,IAAIxB,IAAJ,EAAU;QACNyB,OAAO,CAACzB,IAAD,CAAP;MACH,CAFD,MAEO;QACH,KAAKJ,QAAL,CAAc;UACVa,YAAY,EAAE,KADJ;UAEVa,eAAe,EAAE,KAFP;UAGVZ,WAAW,eACP,oBAAC,sBAAD;YACI,EAAE,EAAC,4BADP;YAEI,cAAc,EAAC;UAFnB;QAJM,CAAd;MAUH;IACJ,CApGuC;;IAGpC,KAAKiB,KAAL,GAAa;MACT9B,sBAAsB,EAAE,EADf;MAETC,wBAAwB,EAAE,EAFjB;MAGTC,OAAO,EAAE,IAHA;MAITU,YAAY,EAAE,KAJL;MAKTa,eAAe,EAAE,KALR;MAMTZ,WAAW,EAAE;IANJ,CAAb;IASA,KAAKkB,aAAL,GAAqB/C,iCAAa,CAAEuB,IAAD,IAAkBd,sCAAU,CAACc,IAAD,EAAO,EAAP,EAAWT,KAAK,CAACkC,QAAjB,CAA7B,CAAlC;EACH;;EAEDC,iBAAiB,GAAS;IACtB,IAAI,KAAKnC,KAAL,CAAWoC,YAAf,EAA6B;MACzB,KAAK7B,iBAAL;IACH,CAFD,MAEO;MACHpB,gDAAA;IACH;EACJ;;EAiFDkD,MAAM,GAAgB;IAClB,IAAI,KAAKL,KAAL,CAAW5B,OAAf,EAAwB;MACpB,oBAAO,oBAAC,6BAAD,OAAP;IACH;;IAED,IAAIkC,oBAAoB,GAAG,4BAA3B;;IACA,IAAI,KAAKN,KAAL,CAAWjB,WAAf,EAA4B;MACxBuB,oBAAoB,IAAI,uCAAxB;IACH,CAFD,MAEO;MACHA,oBAAoB,IAAI,iCAAxB;IACH;;IACD,oBACI,8CACI,oBAAC,+BAAD,OADJ,eAEI;MAAK,SAAS,EAAC;IAAf,gBACI;MACI,IAAI,EAAC,GADT;MAEI,OAAO,EAAE,KAAKC;IAFlB,gBAII,oBAAC,6BAAD,OAJJ,eAKI,oBAAC,sBAAD;MACI,EAAE,EAAC,mBADP;MAEI,cAAc,EAAC;IAFnB,EALJ,CADJ,CAFJ,eAcI,8CACI;MAAK,SAAS,EAAC;IAAf,gBACI;MAAK,SAAS,EAAED;IAAhB,gBACI;MACI,SAAS,EAAC,eADd;MAEI,eAAY;IAFhB,GAIK5C,4CAAsB,CAAC,KAAKuC,aAAL,CAAmB,KAAKD,KAAL,CAAW7B,wBAA9B,CAAD,EAA0D,KAA1D,EAAiE;MAACqC,QAAQ,EAAE;IAAX,CAAjE,CAJ3B,CADJ,CADJ,eASI;MAAK,SAAS,EAAC;IAAf,gBACI,oBAAC,0BAAD;MAAa,SAAS,EAAC;IAAvB,gBACI,oBAAC,qBAAD;MACI,OAAO,EAAE,SADb;MAEI,QAAQ,EAAE,KAAKR,KAAL,CAAWlB,YAAX,IAA2B,KAAKkB,KAAL,CAAWL,eAFpD;MAGI,EAAE,EAAC,aAHP;MAII,OAAO,EAAE,KAAKc,iBAJlB;MAKI,IAAI,EAAC;IALT,GAOK,KAAKT,KAAL,CAAWlB,YAAX,iBAA2B,oBAAC,8BAAD,OAPhC,eAQI,oBAAC,sBAAD;MACI,EAAE,EAAC,8BADP;MAEI,cAAc,EAAE;IAFpB,EARJ,CADJ,eAcI,oBAAC,qBAAD;MACI,OAAO,EAAE,MADb;MAEI,QAAQ,EAAE,KAAKkB,KAAL,CAAWlB,YAAX,IAA2B,KAAKkB,KAAL,CAAWL,eAFpD;MAGI,EAAE,EAAC,aAHP;MAII,OAAO,EAAE,KAAKe,iBAJlB;MAKI,IAAI,EAAC;IALT,GAOK,KAAKV,KAAL,CAAWL,eAAX,iBAA8B,oBAAC,8BAAD,OAPnC,eAQI,oBAAC,sBAAD;MACI,EAAE,EAAC,iCADP;MAEI,cAAc,EAAE;IAFpB,EARJ,CAdJ,CADJ,EA6BKgB,OAAO,CAAC,KAAKX,KAAL,CAAWjB,WAAZ,CAAP,iBACG;MAAK,SAAS,EAAC;IAAf,gBACI,oBAAC,8BAAD,OADJ,EAEK,GAFL,EAGK,KAAKiB,KAAL,CAAWjB,WAHhB,CA9BR,CATJ,CADJ,CAdJ,CADJ;EAkEH;;AAtLqG;;gBAArFlB;EAtBjBsB;IAAWC;;EACXgB;EACA9B;IACIC;IACAwB;;EAMJN;;;ACxCJ;AACA;AAEA;AACA;AAEA;AACA;AACA;AAMA;AAEA;;AAUA,SAASwB,eAAT,CAAyBjB,KAAzB,EAA6C;EACzC,MAAMkB,MAAM,GAAGJ,6BAAS,CAACd,KAAD,CAAxB;EACA,MAAMP,iBAAiB,GAAGsB,4CAAoB,CAACf,KAAD,CAA9C;EACA,OAAO;IACHP,iBADG;IAEHW,YAAY,EAAEc,MAAM,CAACC,0BAAP,KAAsC,MAFjD;IAGHjB,QAAQ,EAAEc,8BAAW,CAAChB,KAAD;EAHlB,CAAP;AAKH;;AAED,SAASoB,kBAAT,CAA4BC,QAA5B,EAA+D;EAC3D,OAAO;IACH/C,OAAO,EAAEuC,4BAAkB,CAA+C;MACtEtC,iBADsE;MAEtEwB,4BAA4BA,EAAAA,0CAAAA;IAF0C,CAA/C,EAGxBsB,QAHwB;EADxB,CAAP;AAMH;;AAED,uDAAeT,cAAO,CAACK,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CvD,cAA7C,CAAf;;;;;;;;;;;;AC7CA;AACA;AAEA;AACA;AAEe,SAASN,UAAT,GAAsB;EACjC,MAAM;IAACgE;EAAD,IAAkBD,+DAAO,EAA/B;EACA,oBACI;IACI,SAAS,EAAC,wBADd;IAEI,KAAK,EAAEC,aAAa,CAAC;MAAC/C,EAAE,EAAE,sBAAL;MAA6BgD,cAAc,EAAE;IAA7C,CAAD;EAFxB,EADJ;AAMH;;;;;;;;;;;;;;;;;;;ACdD;AACA;AAEA;AAEA;AAEA;AAMe,MAAMhE,WAAN,SAA0BV,gDAA1B,CAAqD;EAKzDuD,MAAM,GAAgB;IACzB,MAAMsB,SAAS,GAAG,mBAAmB,KAAK3D,KAAL,CAAW4D,mBAAX,GAAiC,MAAM,KAAK5D,KAAL,CAAW4D,mBAAlD,GAAwE,EAA3F,CAAlB;IACA,oBACI,iDAAC,0EAAD;MACI,SAAS,EAAED,SADf;MAEI,KAAK,EAAE;QAACnD,EAAE,EAAEkD,6CAAC,CAAC,uBAAD,CAAN;QAAiCF,cAAc,EAAE;MAAjD;IAFX,EADJ;EAMH;;AAb+D;;gBAA/ChE;EAHjBoE;;;gBAGiBpE,6BACmB;EAChCoE,mBAAmB,EAAE;AADW","sources":["webpack://@mattermost/webapp/./components/terms_of_service/terms_of_service.tsx","webpack://@mattermost/webapp/./components/terms_of_service/index.ts","webpack://@mattermost/webapp/./components/widgets/icons/fa_logout_icon.tsx","webpack://@mattermost/webapp/./components/widgets/icons/fa_warning_icon.tsx"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Button, ButtonGroup} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {memoizeResult} from 'mattermost-redux/utils/helpers';\nimport {TermsOfService as ReduxTermsOfService} from '@mattermost/types/terms_of_service';\n\nimport * as GlobalActions from 'actions/global_actions';\nimport AnnouncementBar from 'components/announcement_bar';\nimport LoadingScreen from 'components/loading_screen';\nimport LoadingSpinner from 'components/widgets/loading/loading_spinner';\nimport LogoutIcon from 'components/widgets/icons/fa_logout_icon';\nimport WarningIcon from 'components/widgets/icons/fa_warning_icon';\n\nimport {browserHistory} from 'utils/browser_history';\nimport messageHtmlToComponent from 'utils/message_html_to_component';\nimport {formatText} from 'utils/text_formatting';\nimport {Constants} from 'utils/constants';\nimport EmojiMap from 'utils/emoji_map';\n\nexport interface UpdateMyTermsOfServiceStatusResponse {\n    terms_of_service_create_at: number;\n    terms_of_service_id: string;\n    user_id: number;\n}\n\nexport interface TermsOfServiceProps {\n    location: {search: string};\n    termsEnabled: boolean;\n    actions: {\n        getTermsOfService: () => Promise<{ data: ReduxTermsOfService }>;\n        updateMyTermsOfServiceStatus: (\n            termsOfServiceId: string,\n            accepted: boolean\n        ) => {data: UpdateMyTermsOfServiceStatusResponse};\n    };\n    emojiMap: EmojiMap;\n    useCaseOnboarding: boolean;\n}\n\ninterface TermsOfServiceState {\n    customTermsOfServiceId: string;\n    customTermsOfServiceText: string;\n    loading: boolean;\n    loadingAgree: boolean;\n    loadingDisagree: boolean;\n    serverError: React.ReactNode;\n}\n\nexport default class TermsOfService extends React.PureComponent<TermsOfServiceProps, TermsOfServiceState> {\n    formattedText: (text: string) => string;\n\n    constructor(props: TermsOfServiceProps) {\n        super(props);\n\n        this.state = {\n            customTermsOfServiceId: '',\n            customTermsOfServiceText: '',\n            loading: true,\n            loadingAgree: false,\n            loadingDisagree: false,\n            serverError: null,\n        };\n\n        this.formattedText = memoizeResult((text: string) => formatText(text, {}, props.emojiMap));\n    }\n\n    componentDidMount(): void {\n        if (this.props.termsEnabled) {\n            this.getTermsOfService();\n        } else {\n            GlobalActions.redirectUserToDefaultTeam();\n        }\n    }\n\n    getTermsOfService = async (): Promise<void> => {\n        this.setState({\n            customTermsOfServiceId: '',\n            customTermsOfServiceText: '',\n            loading: true,\n        });\n        const {data} = await this.props.actions.getTermsOfService();\n        if (data) {\n            this.setState({\n                customTermsOfServiceId: data.id,\n                customTermsOfServiceText: data.text,\n                loading: false,\n            });\n        } else {\n            GlobalActions.emitUserLoggedOutEvent(`/login?extra=${Constants.GET_TERMS_ERROR}`);\n        }\n    };\n\n    handleLogoutClick = (e: React.MouseEvent<HTMLAnchorElement, MouseEvent>): void => {\n        e.preventDefault();\n        GlobalActions.emitUserLoggedOutEvent('/login');\n    };\n\n    handleAcceptTerms = (): void => {\n        this.setState({\n            loadingAgree: true,\n            serverError: null,\n        });\n        this.registerUserAction(\n            true,\n            () => {\n                const query = new URLSearchParams(this.props.location.search);\n                const redirectTo = query.get('redirect_to');\n                if (redirectTo && redirectTo.match(/^\\/([^/]|$)/)) {\n                    browserHistory.push(redirectTo);\n                } else if (this.props.useCaseOnboarding) {\n                    // need info about whether admin or not,\n                    // and whether admin has already completed\n                    // first time onboarding. Instead of fetching and orchestrating that here,\n                    // let the default root component handle it.\n                    browserHistory.push('/');\n                } else {\n                    GlobalActions.redirectUserToDefaultTeam();\n                }\n            },\n        );\n    };\n\n    handleRejectTerms = (): void => {\n        this.setState({\n            loadingDisagree: true,\n            serverError: null,\n        });\n        this.registerUserAction(\n            false,\n            () => {\n                GlobalActions.emitUserLoggedOutEvent(`/login?extra=${Constants.TERMS_REJECTED}`);\n            },\n        );\n    };\n\n    registerUserAction = async (accepted: boolean, success: (data: UpdateMyTermsOfServiceStatusResponse) => void): Promise<void> => {\n        const {data} = await this.props.actions.updateMyTermsOfServiceStatus(this.state.customTermsOfServiceId, accepted);\n        if (data) {\n            success(data);\n        } else {\n            this.setState({\n                loadingAgree: false,\n                loadingDisagree: false,\n                serverError: (\n                    <FormattedMessage\n                        id='terms_of_service.api_error'\n                        defaultMessage='Unable to complete the request. If this issue persists, contact your System Administrator.'\n                    />\n                ),\n            });\n        }\n    };\n\n    render(): JSX.Element {\n        if (this.state.loading) {\n            return <LoadingScreen/>;\n        }\n\n        let termsMarkdownClasses = 'terms-of-service__markdown';\n        if (this.state.serverError) {\n            termsMarkdownClasses += ' terms-of-service-error__height--fill';\n        } else {\n            termsMarkdownClasses += ' terms-of-service__height--fill';\n        }\n        return (\n            <div>\n                <AnnouncementBar/>\n                <div className='signup-header'>\n                    <a\n                        href='#'\n                        onClick={this.handleLogoutClick}\n                    >\n                        <LogoutIcon/>\n                        <FormattedMessage\n                            id='web.header.logout'\n                            defaultMessage='Logout'\n                        />\n                    </a>\n                </div>\n                <div>\n                    <div className='signup-team__container terms-of-service__container'>\n                        <div className={termsMarkdownClasses}>\n                            <div\n                                className='medium-center'\n                                data-testid='termsOfService'\n                            >\n                                {messageHtmlToComponent(this.formattedText(this.state.customTermsOfServiceText), false, {mentions: false})}\n                            </div>\n                        </div>\n                        <div className='terms-of-service__footer medium-center'>\n                            <ButtonGroup className='terms-of-service__button-group'>\n                                <Button\n                                    bsStyle={'primary'}\n                                    disabled={this.state.loadingAgree || this.state.loadingDisagree}\n                                    id='acceptTerms'\n                                    onClick={this.handleAcceptTerms}\n                                    type='submit'\n                                >\n                                    {this.state.loadingAgree && <LoadingSpinner/>}\n                                    <FormattedMessage\n                                        id='terms_of_service.agreeButton'\n                                        defaultMessage={'I Agree'}\n                                    />\n                                </Button>\n                                <Button\n                                    bsStyle={'link'}\n                                    disabled={this.state.loadingAgree || this.state.loadingDisagree}\n                                    id='rejectTerms'\n                                    onClick={this.handleRejectTerms}\n                                    type='reset'\n                                >\n                                    {this.state.loadingDisagree && <LoadingSpinner/>}\n                                    <FormattedMessage\n                                        id='terms_of_service.disagreeButton'\n                                        defaultMessage={'I Disagree'}\n                                    />\n                                </Button>\n                            </ButtonGroup>\n                            {Boolean(this.state.serverError) && (\n                                <div className='terms-of-service__server-error alert alert-warning'>\n                                    <WarningIcon/>\n                                    {' '}\n                                    {this.state.serverError}\n                                </div>\n                            )}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\n\nimport {getTermsOfService, updateMyTermsOfServiceStatus} from 'mattermost-redux/actions/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getUseCaseOnboarding} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {GlobalState} from '@mattermost/types/store';\nimport {ActionFunc, GenericAction} from 'mattermost-redux/types/actions';\nimport {TermsOfService as ReduxTermsOfService} from '@mattermost/types/terms_of_service';\n\nimport {getEmojiMap} from 'selectors/emojis';\n\nimport TermsOfService, {UpdateMyTermsOfServiceStatusResponse} from './terms_of_service';\n\ntype Actions = {\n    getTermsOfService: () => Promise<{data: ReduxTermsOfService}>;\n    updateMyTermsOfServiceStatus: (\n        termsOfServiceId: string,\n        accepted: boolean\n    ) => {data: UpdateMyTermsOfServiceStatusResponse};\n};\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n    const useCaseOnboarding = getUseCaseOnboarding(state);\n    return {\n        useCaseOnboarding,\n        termsEnabled: config.EnableCustomTermsOfService === 'true',\n        emojiMap: getEmojiMap(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            getTermsOfService,\n            updateMyTermsOfServiceStatus,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TermsOfService);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nexport default function LogoutIcon() {\n    const {formatMessage} = useIntl();\n    return (\n        <i\n            className='fa fa-1x fa-angle-left'\n            title={formatMessage({id: 'generic_icons.logout', defaultMessage: 'Logout Icon'})}\n        />\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport LocalizedIcon from 'components/localized_icon';\n\nimport {t} from 'utils/i18n';\n\ntype Props = {\n    additionalClassName: string | null;\n}\n\nexport default class WarningIcon extends React.PureComponent<Props> {\n    public static defaultProps: Props = {\n        additionalClassName: null,\n    };\n\n    public render(): JSX.Element {\n        const className = 'fa fa-warning' + (this.props.additionalClassName ? ' ' + this.props.additionalClassName : '');\n        return (\n            <LocalizedIcon\n                className={className}\n                title={{id: t('generic_icons.warning'), defaultMessage: 'Warning Icon'}}\n            />\n        );\n    }\n}\n"],"names":["React","Button","ButtonGroup","FormattedMessage","memoizeResult","GlobalActions","AnnouncementBar","LoadingScreen","LoadingSpinner","LogoutIcon","WarningIcon","browserHistory","messageHtmlToComponent","formatText","Constants","TermsOfService","PureComponent","constructor","props","setState","customTermsOfServiceId","customTermsOfServiceText","loading","data","actions","getTermsOfService","id","text","emitUserLoggedOutEvent","GET_TERMS_ERROR","e","preventDefault","loadingAgree","serverError","registerUserAction","query","URLSearchParams","location","search","redirectTo","get","match","push","useCaseOnboarding","redirectUserToDefaultTeam","loadingDisagree","TERMS_REJECTED","accepted","success","updateMyTermsOfServiceStatus","state","formattedText","emojiMap","componentDidMount","termsEnabled","render","termsMarkdownClasses","handleLogoutClick","mentions","handleAcceptTerms","handleRejectTerms","Boolean","connect","bindActionCreators","getConfig","getUseCaseOnboarding","getEmojiMap","mapStateToProps","config","EnableCustomTermsOfService","mapDispatchToProps","dispatch","useIntl","formatMessage","defaultMessage","LocalizedIcon","t","className","additionalClassName"],"sourceRoot":""}