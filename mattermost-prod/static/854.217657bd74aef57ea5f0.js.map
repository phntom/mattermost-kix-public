{"version":3,"file":"854.217657bd74aef57ea5f0.js","mappings":"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","sources":["webpack://@mattermost/webapp/./components/logged_in/logged_in.tsx","webpack://@mattermost/webapp/./components/logged_in/index.ts","webpack://@mattermost/webapp/./packages/mattermost-redux/src/actions/timezone.ts"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Redirect} from 'react-router';\n\nimport semver from 'semver';\n\nimport {viewChannel} from 'mattermost-redux/actions/channels';\n\nimport * as GlobalActions from 'actions/global_actions';\nimport * as WebSocketActions from 'actions/websocket_actions.jsx';\nimport * as UserAgent from 'utils/user_agent';\nimport LoadingScreen from 'components/loading_screen';\nimport {getBrowserTimezone} from 'utils/timezone.jsx';\nimport store from 'stores/redux_store.jsx';\nimport WebSocketClient from 'client/web_websocket_client.jsx';\nimport BrowserStore from 'stores/browser_store';\nimport {UserProfile} from '@mattermost/types/users';\nimport {Channel} from '@mattermost/types/channels';\n\nconst dispatch = store.dispatch;\nconst getState = store.getState;\n\nconst BACKSPACE_CHAR = 8;\n\ndeclare global {\n    interface Window {\n        desktop: {\n            version?: string | null;\n        };\n    }\n}\n\nexport type Props = {\n    currentUser?: UserProfile;\n    currentChannelId?: string;\n    children?: React.ReactNode;\n    mfaRequired: boolean;\n    enableTimezone: boolean;\n    actions: {\n        autoUpdateTimezone: (deviceTimezone: string) => void;\n        getChannelURLAction: (channel: Channel, teamId: string, url: string) => void;\n    };\n    showTermsOfService: boolean;\n    location: {\n        pathname: string;\n        search: string;\n    };\n}\n\ntype DesktopMessage = {\n    origin: string;\n    data: {\n        type: string;\n        message: {\n            version: string;\n            userIsActive: boolean;\n            manual: boolean;\n            channel: Channel;\n            teamId: string;\n            url: string;\n        };\n    };\n}\n\nexport default class LoggedIn extends React.PureComponent<Props> {\n    constructor(props: Props) {\n        super(props);\n\n        const root = document.getElementById('root');\n        if (root) {\n            root.className += ' channel-view';\n        }\n    }\n\n    private isValidState(): boolean {\n        return this.props.currentUser != null;\n    }\n\n    public componentDidMount(): void {\n        // Initialize websocket\n        WebSocketActions.initialize();\n\n        if (this.props.enableTimezone) {\n            this.props.actions.autoUpdateTimezone(getBrowserTimezone());\n        }\n\n        // Make sure the websockets close and reset version\n        window.addEventListener('beforeunload', this.handleBeforeUnload);\n\n        // Listen for focused tab/window state\n        window.addEventListener('focus', this.onFocusListener);\n        window.addEventListener('blur', this.onBlurListener);\n        if (!document.hasFocus()) {\n            GlobalActions.emitBrowserFocus(false);\n        }\n\n        // Listen for messages from the desktop app\n        window.addEventListener('message', this.onDesktopMessageListener);\n\n        // Tell the desktop app the webapp is ready\n        window.postMessage(\n            {\n                type: 'webapp-ready',\n            },\n            window.location.origin,\n        );\n\n        // Device tracking setup\n        if (UserAgent.isIos()) {\n            document.body.classList.add('ios');\n        } else if (UserAgent.isAndroid()) {\n            document.body.classList.add('android');\n        }\n\n        if (!this.props.currentUser) {\n            const rootEl = document.getElementById('root');\n            if (rootEl) {\n                rootEl.setAttribute('class', '');\n            }\n            GlobalActions.emitUserLoggedOutEvent('/login?redirect_to=' + encodeURIComponent(`${this.props.location.pathname}${this.props.location.search}`), true, false);\n        }\n\n        // Prevent backspace from navigating back a page\n        window.addEventListener('keydown', this.handleBackSpace);\n\n        if (this.isValidState()) {\n            BrowserStore.signalLogin();\n        }\n    }\n\n    public componentWillUnmount(): void {\n        WebSocketActions.close();\n\n        window.removeEventListener('keydown', this.handleBackSpace);\n\n        window.removeEventListener('focus', this.onFocusListener);\n        window.removeEventListener('blur', this.onBlurListener);\n        window.removeEventListener('message', this.onDesktopMessageListener);\n    }\n\n    public render(): React.ReactNode {\n        if (!this.isValidState()) {\n            return <LoadingScreen/>;\n        }\n\n        if (this.props.mfaRequired) {\n            if (this.props.location.pathname !== '/mfa/setup') {\n                return <Redirect to={'/mfa/setup'}/>;\n            }\n        } else if (this.props.location.pathname === '/mfa/confirm') {\n            // Nothing to do. Wait for MFA flow to complete before prompting TOS.\n        } else if (this.props.showTermsOfService) {\n            if (this.props.location.pathname !== '/terms_of_service') {\n                return <Redirect to={'/terms_of_service?redirect_to=' + encodeURIComponent(this.props.location.pathname)}/>;\n            }\n        }\n\n        return this.props.children;\n    }\n\n    private onFocusListener(): void {\n        GlobalActions.emitBrowserFocus(true);\n    }\n\n    private onBlurListener(): void {\n        GlobalActions.emitBrowserFocus(false);\n    }\n\n    // listen for messages from the desktop app\n    private onDesktopMessageListener = (desktopMessage: DesktopMessage) => {\n        if (!this.props.currentUser) {\n            return;\n        }\n        if (desktopMessage.origin !== window.location.origin) {\n            return;\n        }\n\n        switch (desktopMessage.data.type) {\n        case 'register-desktop': {\n            const {version} = desktopMessage.data.message;\n            if (!window.desktop) {\n                window.desktop = {};\n            }\n            window.desktop.version = semver.valid(semver.coerce(version));\n            break;\n        }\n        case 'user-activity-update': {\n            const {userIsActive, manual} = desktopMessage.data.message;\n\n            // update the server with the users current away status\n            if (userIsActive === true || userIsActive === false) {\n                WebSocketClient.userUpdateActiveStatus(userIsActive, manual);\n            }\n            break;\n        }\n        case 'notification-clicked': {\n            const {channel, teamId, url} = desktopMessage.data.message;\n            window.focus();\n\n            // navigate to the appropriate channel\n            this.props.actions.getChannelURLAction(channel, teamId, url);\n            break;\n        }\n        }\n    }\n\n    private handleBackSpace = (e: KeyboardEvent): void => {\n        const excludedElements = ['input', 'textarea'];\n\n        if (e.which === BACKSPACE_CHAR && !(excludedElements.includes((e.target as HTMLElement).tagName.toLowerCase()))) {\n            e.preventDefault();\n        }\n    }\n\n    private handleBeforeUnload = (): void => {\n        // remove the event listener to prevent getting stuck in a loop\n        window.removeEventListener('beforeunload', this.handleBeforeUnload);\n        if (document.cookie.indexOf('MMUSERID=') > -1) {\n            viewChannel('', this.props.currentChannelId || '')(dispatch, getState);\n        }\n        WebSocketActions.close();\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch} from 'redux';\n\nimport {GlobalState} from 'types/store';\n\nimport {Channel} from '@mattermost/types/channels';\n\nimport {DispatchFunc, GenericAction} from 'mattermost-redux/types/actions';\n\nimport {autoUpdateTimezone} from 'mattermost-redux/actions/timezone';\nimport {getCurrentChannelId} from 'mattermost-redux/selectors/entities/channels';\nimport {getLicense, getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUser, shouldShowTermsOfService} from 'mattermost-redux/selectors/entities/users';\n\nimport {browserHistory} from 'utils/browser_history';\nimport {checkIfMFARequired} from 'utils/route';\nimport {getChannelURL} from 'utils/utils';\nimport {isPermalinkURL} from 'utils/url';\n\nimport LoggedIn from './logged_in';\n\ntype Props = {\n    match: {\n        url: string;\n    };\n};\n\nfunction mapStateToProps(state: GlobalState, ownProps: Props) {\n    const license = getLicense(state);\n    const config = getConfig(state);\n    const showTermsOfService = shouldShowTermsOfService(state);\n\n    return {\n        currentUser: getCurrentUser(state),\n        currentChannelId: getCurrentChannelId(state),\n        mfaRequired: checkIfMFARequired(getCurrentUser(state), license, config, ownProps.match.url),\n        enableTimezone: config.ExperimentalTimezone === 'true',\n        showTermsOfService,\n    };\n}\n\n// NOTE: suggestions where to keep this welcomed\nconst getChannelURLAction = (channel: Channel, teamId: string, url: string) => (dispatch: DispatchFunc, getState: () => GlobalState) => {\n    const state = getState();\n\n    if (url && isPermalinkURL(url)) {\n        return browserHistory.push(url);\n    }\n\n    return browserHistory.push(getChannelURL(state, channel, teamId));\n};\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators({\n            autoUpdateTimezone,\n            getChannelURLAction,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoggedIn);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {makeGetUserTimezone} from 'mattermost-redux/selectors/entities/timezone';\n\nimport {DispatchFunc, GetStateFunc} from 'mattermost-redux/types/actions';\n\nimport {updateMe} from './users';\nexport function autoUpdateTimezone(deviceTimezone: string) {\n    return async (dispatch: DispatchFunc, getState: GetStateFunc) => {\n        const currentUser = getCurrentUser(getState());\n        const currentTimezone = makeGetUserTimezone()(getState(), currentUser.id);\n        const newTimezoneExists = currentTimezone.automaticTimezone !== deviceTimezone;\n\n        if (currentTimezone.useAutomaticTimezone && newTimezoneExists) {\n            const timezone = {\n                useAutomaticTimezone: 'true',\n                automaticTimezone: deviceTimezone,\n                manualTimezone: currentTimezone.manualTimezone,\n            };\n\n            const updatedUser = {\n                ...currentUser,\n                timezone,\n            };\n\n            updateMe(updatedUser)(dispatch, getState);\n        }\n    };\n}\n"],"names":["React","Redirect","semver","viewChannel","GlobalActions","WebSocketActions","UserAgent","LoadingScreen","getBrowserTimezone","store","WebSocketClient","BrowserStore","dispatch","getState","BACKSPACE_CHAR","LoggedIn","PureComponent","constructor","props","desktopMessage","currentUser","origin","window","location","data","type","version","message","desktop","valid","coerce","userIsActive","manual","userUpdateActiveStatus","channel","teamId","url","focus","actions","getChannelURLAction","e","excludedElements","which","includes","target","tagName","toLowerCase","preventDefault","removeEventListener","handleBeforeUnload","document","cookie","indexOf","currentChannelId","close","root","getElementById","className","isValidState","componentDidMount","initialize","enableTimezone","autoUpdateTimezone","addEventListener","onFocusListener","onBlurListener","hasFocus","emitBrowserFocus","onDesktopMessageListener","postMessage","isIos","body","classList","add","isAndroid","rootEl","setAttribute","emitUserLoggedOutEvent","encodeURIComponent","pathname","search","handleBackSpace","signalLogin","componentWillUnmount","render","mfaRequired","showTermsOfService","children","connect","bindActionCreators","getCurrentChannelId","getLicense","getConfig","getCurrentUser","shouldShowTermsOfService","browserHistory","checkIfMFARequired","getChannelURL","isPermalinkURL","mapStateToProps","state","ownProps","license","config","match","ExperimentalTimezone","push","mapDispatchToProps","makeGetUserTimezone","updateMe","deviceTimezone","currentTimezone","id","newTimezoneExists","automaticTimezone","useAutomaticTimezone","timezone","manualTimezone","updatedUser"],"sourceRoot":""}